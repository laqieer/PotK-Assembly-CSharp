// Decompiled with JetBrains decompiler
// Type: WebAPI
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1057B608-EE69-47D4-8399-FD66F6FD63A9
// Assembly location: C:\r\PotK-Assembly-CSharp\TW\Assembly-CSharp.dll

using Bode;
using Earth;
using GameCore;
using HTTP;
using MasterDataTable;
using MiniJSON;
using SM;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using UniLinq;
using UnityEngine;

#nullable disable
public static class WebAPI
{
  private static readonly string errorUnknown = "原因不明のエラー";
  private static readonly Dictionary<string, string> commonErrorDict = new Dictionary<string, string>()
  {
    {
      "VLD000",
      "意図しないパラメータがある"
    },
    {
      "VLD011",
      "secret_key が存在しない "
    },
    {
      "VLD012",
      "secret_key が文字列に変換できない"
    },
    {
      "VLD013",
      "secret_key が空文字列"
    },
    {
      "VLD014",
      "secret_key が 65 文字以上"
    },
    {
      "VLD031",
      "device_id が存在しない"
    },
    {
      "VLD032",
      "device_id が文字列に変換できない"
    },
    {
      "VLD033",
      "device_id が空文字列 "
    },
    {
      "VLD034",
      "device_id が 35 文字以下"
    },
    {
      "VLD035",
      "device_id が 37 文字以上"
    }
  };
  private static readonly Dictionary<string, string> passcodeErrorDict = WebAPI.commonErrorDict;
  private static readonly Dictionary<string, string> migrateErrorDict = ((IEnumerable<Dictionary<string, string>>) new Dictionary<string, string>[2]
  {
    WebAPI.commonErrorDict,
    new Dictionary<string, string>()
    {
      {
        "Locked PASSCODE",
        "入力誤り回数が三回を超えている"
      },
      {
        "Missing PASSCODE",
        "パスコードが誤っている"
      },
      {
        "Missing DEVICE_ID",
        "移行元と移行先が同一端末"
      }
    }
  }).SelectMany<Dictionary<string, string>, KeyValuePair<string, string>>((Func<Dictionary<string, string>, IEnumerable<KeyValuePair<string, string>>>) (x => (IEnumerable<KeyValuePair<string, string>>) x)).ToDictionary<KeyValuePair<string, string>, string, string>((Func<KeyValuePair<string, string>, string>) (x => x.Key), (Func<KeyValuePair<string, string>, string>) (x => x.Value));
  private static Dictionary<string, DateTime> latestResponsedAt = new Dictionary<string, DateTime>();
  private static readonly string[] SENTRY_MESSAGE_DELIMITERS = new string[1]
  {
    " ::: "
  };
  public static Action<WebAPI.Response.UserError> DefaultUserErrorCallback = new Action<WebAPI.Response.UserError>(WebAPI.defaultUserErrorCallback);

  [DebuggerHidden]
  public static IEnumerator RpcSubmitEnv(Action<bool> rpcCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CRpcSubmitEnv\u003Ec__Iterator45()
    {
      rpcCallback = rpcCallback,
      \u003C\u0024\u003ErpcCallback = rpcCallback
    };
  }

  [DebuggerHidden]
  private static IEnumerator SendRpcSubmitEnv(Action<bool> rpcCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CSendRpcSubmitEnv\u003Ec__Iterator46()
    {
      rpcCallback = rpcCallback,
      \u003C\u0024\u003ErpcCallback = rpcCallback
    };
  }

  public static void RpcSubmitEnv(Action<bool> successCallback, Func<IEnumerator> failCallback)
  {
    WebQueue.EnqueueRpcSubmitEnv(successCallback, (Func<WebError, IEnumerator>) (error =>
    {
      if (error.HasResponse())
      {
        if (error.IsClientError())
        {
          error.Request.RestRetryCount = 0;
          return failCallback();
        }
      }
      else if (Persist.auth.Exists)
        return new object[0].GetEnumerator();
      return WebQueue.FailCallback(error);
    }));
  }

  public static void AuthDeviceInfo(System.Action authCallback)
  {
    WebAPI.AuthDeviceInfo(authCallback, (Func<IEnumerator>) (() =>
    {
      authCallback();
      return new object[0].GetEnumerator();
    }));
  }

  public static void AuthDeviceInfo(System.Action successCallback, Func<IEnumerator> failCallback)
  {
    WebQueue.EnqueueAuthDeviceInfo(successCallback, (Func<WebError, IEnumerator>) (error =>
    {
      if (error.HasResponse())
      {
        if (error.IsClientError())
        {
          error.Request.RestRetryCount = 0;
          return failCallback();
        }
      }
      else if (Persist.auth.Exists)
        return new object[0].GetEnumerator();
      return WebQueue.FailCallback(error);
    }));
  }

  private static string secondsToTime(int n)
  {
    if (n < 60)
      return n.ToString() + "秒";
    if (n < 3600)
      return (n / 60).ToString() + "分";
    return n < 86400 ? (n / 60 / 60).ToString() + "時" : (n / 60 / 60 / 24).ToString() + "日";
  }

  public static Future<WebAPI.Response.BattleContinueCount> SilentBattleContinueCount(
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleContinueCount>((Func<Promise<WebAPI.Response.BattleContinueCount>, IEnumerator>) (promise => WebAPI.LoadSilentBattleContinueCount(promise, continue_count, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadSilentBattleContinueCount(
    Promise<WebAPI.Response.BattleContinueCount> promise,
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadSilentBattleContinueCount\u003Ec__Iterator47()
    {
      continue_count = continue_count,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Econtinue_count = continue_count,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalSilentBattleContinueCount(
    int continue_count,
    Action<WebAPI.Response.BattleContinueCount> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SilentPost("/battle/continue_count", new Dictionary<string, object>()
    {
      [nameof (continue_count)] = (object) continue_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleContinueCount) null);
      }
      else
        callback(new WebAPI.Response.BattleContinueCount(json.Json));
    }));
  }

  public static Future<BattleEnd> BattleFinish(
    WebAPI.Request.BattleFinish request,
    BE be,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    if (request.quest_type == CommonQuestType.Story)
      return WebAPI.BattleStoryFinish(request.battle_turn, request.battle_uuid, request.continue_count, request.drop_entity_ids.ToArray(), request.duels_critical_count.ToArray(), request.duels_damage.ToArray(), request.duels_hit_damage.ToArray(), request.duels_max_damage.ToArray(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.dead_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.enemy_id)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.kill_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.level_difference)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.overkill_damage)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.damage_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.kill_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.player_gear_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.target_character_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.exp)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.character_id)).ToArray<int>(), request.is_game_over, request.panel_entity_ids.ToArray(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.supply_id)).ToArray<int>(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.use_quantity)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.guest)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.player_unit_id)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.received_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.remaining_hp)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.rental)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage_count)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_kill_count)).ToArray<int>(), request.week_element_attack_count, request.week_kind_attack_count, !request.win ? 0 : 1, userErrorCallback).Then<BattleEnd>((Func<WebAPI.Response.BattleStoryFinish, BattleEnd>) (x => x.battle_finish));
    if (request.quest_type == CommonQuestType.Extra)
      return WebAPI.BattleExtraFinish(request.battle_turn, request.battle_uuid, request.continue_count, request.drop_entity_ids.ToArray(), request.duels_critical_count.ToArray(), request.duels_damage.ToArray(), request.duels_hit_damage.ToArray(), request.duels_max_damage.ToArray(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.dead_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.enemy_id)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.kill_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.level_difference)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.overkill_damage)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.damage_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.kill_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.player_gear_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.target_character_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.exp)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.character_id)).ToArray<int>(), request.is_game_over, request.panel_entity_ids.ToArray(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.supply_id)).ToArray<int>(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.use_quantity)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.guest)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.player_unit_id)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.received_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.remaining_hp)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.rental)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage_count)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_kill_count)).ToArray<int>(), request.week_element_attack_count, request.week_kind_attack_count, !request.win ? 0 : 1, userErrorCallback).Then<BattleEnd>((Func<WebAPI.Response.BattleExtraFinish, BattleEnd>) (x => x.battle_finish));
    if (request.quest_type == CommonQuestType.Character)
      return WebAPI.BattleCharacterFinish(request.battle_turn, request.battle_uuid, request.continue_count, request.drop_entity_ids.ToArray(), request.duels_critical_count.ToArray(), request.duels_damage.ToArray(), request.duels_hit_damage.ToArray(), request.duels_max_damage.ToArray(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.dead_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.enemy_id)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.kill_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.level_difference)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.overkill_damage)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.damage_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.kill_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.player_gear_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.target_character_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.exp)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.character_id)).ToArray<int>(), request.is_game_over, request.panel_entity_ids.ToArray(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.supply_id)).ToArray<int>(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.use_quantity)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.guest)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.player_unit_id)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.received_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.remaining_hp)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.rental)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage_count)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_kill_count)).ToArray<int>(), request.week_element_attack_count, request.week_kind_attack_count, !request.win ? 0 : 1, userErrorCallback).Then<BattleEnd>((Func<WebAPI.Response.BattleCharacterFinish, BattleEnd>) (x => x.battle_finish));
    if (request.quest_type == CommonQuestType.Harmony)
      return WebAPI.BattleHarmonyFinish(request.battle_turn, request.battle_uuid, request.continue_count, request.drop_entity_ids.ToArray(), request.duels_critical_count.ToArray(), request.duels_damage.ToArray(), request.duels_hit_damage.ToArray(), request.duels_max_damage.ToArray(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.dead_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.enemy_id)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.kill_count)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.level_difference)).ToArray<int>(), request.enemies.Select<WebAPI.Request.BattleFinish.EnemyResult, int>((Func<WebAPI.Request.BattleFinish.EnemyResult, int>) (x => x.overkill_damage)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.damage_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.kill_count)).ToArray<int>(), request.gears.Select<WebAPI.Request.BattleFinish.GearResult, int>((Func<WebAPI.Request.BattleFinish.GearResult, int>) (x => x.player_gear_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.target_character_id)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.exp)).ToArray<int>(), request.intimates.Select<WebAPI.Request.BattleFinish.IntimateResult, int>((Func<WebAPI.Request.BattleFinish.IntimateResult, int>) (x => x.character_id)).ToArray<int>(), request.is_game_over, request.panel_entity_ids.ToArray(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.supply_id)).ToArray<int>(), request.supplies.Select<WebAPI.Request.BattleFinish.SupplyResult, int>((Func<WebAPI.Request.BattleFinish.SupplyResult, int>) (x => x.use_quantity)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.guest)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.player_unit_id)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.received_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.remaining_hp)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.rental)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_damage_count)).ToArray<int>(), request.units.Select<WebAPI.Request.BattleFinish.UnitResult, int>((Func<WebAPI.Request.BattleFinish.UnitResult, int>) (x => x.total_kill_count)).ToArray<int>(), request.week_element_attack_count, request.week_kind_attack_count, !request.win ? 0 : 1, userErrorCallback).Then<BattleEnd>((Func<WebAPI.Response.BattleHarmonyFinish, BattleEnd>) (x => x.battle_finish));
    return request.quest_type == CommonQuestType.Earth || request.quest_type == CommonQuestType.EarthExtra ? Singleton<EarthDataManager>.GetInstance().BattleFinish(request, be) : (Future<BattleEnd>) null;
  }

  public static Future<WebAPI.Response.BattleWaveFinish> BattleWaveFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    BattleWaveFinishInfo[] info,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    int[] guests,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.BattleWaveFinish>((Func<Promise<WebAPI.Response.BattleWaveFinish>, IEnumerator>) (promise => WebAPI.LoadBattleWaveFinish(promise, battle_turn, battle_uuid, continue_count, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, supply_results_supply_id, supply_results_use_quantity, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, info, weak_element_attack_count, weak_kind_attack_count, win, guests, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleWaveFinish(
    Promise<WebAPI.Response.BattleWaveFinish> promise,
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    BattleWaveFinishInfo[] info,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    int[] guests,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleWaveFinish\u003Ec__Iterator48()
    {
      battle_turn = battle_turn,
      battle_uuid = battle_uuid,
      continue_count = continue_count,
      duels_critical_count = duels_critical_count,
      duels_damage = duels_damage,
      duels_hit_damage = duels_hit_damage,
      duels_max_damage = duels_max_damage,
      gear_results_damage_count = gear_results_damage_count,
      gear_results_kill_count = gear_results_kill_count,
      gear_results_player_gear_id = gear_results_player_gear_id,
      intimate_result_target_player_character_id = intimate_result_target_player_character_id,
      intimate_results_exp = intimate_results_exp,
      intimate_results_player_character_id = intimate_results_player_character_id,
      is_game_over = is_game_over,
      supply_results_supply_id = supply_results_supply_id,
      supply_results_use_quantity = supply_results_use_quantity,
      unit_results_player_unit_id = unit_results_player_unit_id,
      unit_results_received_damage = unit_results_received_damage,
      unit_results_remaining_hp = unit_results_remaining_hp,
      unit_results_rental = unit_results_rental,
      unit_results_total_damage = unit_results_total_damage,
      unit_results_total_damage_count = unit_results_total_damage_count,
      unit_results_total_kill_count = unit_results_total_kill_count,
      info = info,
      weak_element_attack_count = weak_element_attack_count,
      weak_kind_attack_count = weak_kind_attack_count,
      win = win,
      guests = guests,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Ebattle_turn = battle_turn,
      \u003C\u0024\u003Ebattle_uuid = battle_uuid,
      \u003C\u0024\u003Econtinue_count = continue_count,
      \u003C\u0024\u003Eduels_critical_count = duels_critical_count,
      \u003C\u0024\u003Eduels_damage = duels_damage,
      \u003C\u0024\u003Eduels_hit_damage = duels_hit_damage,
      \u003C\u0024\u003Eduels_max_damage = duels_max_damage,
      \u003C\u0024\u003Egear_results_damage_count = gear_results_damage_count,
      \u003C\u0024\u003Egear_results_kill_count = gear_results_kill_count,
      \u003C\u0024\u003Egear_results_player_gear_id = gear_results_player_gear_id,
      \u003C\u0024\u003Eintimate_result_target_player_character_id = intimate_result_target_player_character_id,
      \u003C\u0024\u003Eintimate_results_exp = intimate_results_exp,
      \u003C\u0024\u003Eintimate_results_player_character_id = intimate_results_player_character_id,
      \u003C\u0024\u003Eis_game_over = is_game_over,
      \u003C\u0024\u003Esupply_results_supply_id = supply_results_supply_id,
      \u003C\u0024\u003Esupply_results_use_quantity = supply_results_use_quantity,
      \u003C\u0024\u003Eunit_results_player_unit_id = unit_results_player_unit_id,
      \u003C\u0024\u003Eunit_results_received_damage = unit_results_received_damage,
      \u003C\u0024\u003Eunit_results_remaining_hp = unit_results_remaining_hp,
      \u003C\u0024\u003Eunit_results_rental = unit_results_rental,
      \u003C\u0024\u003Eunit_results_total_damage = unit_results_total_damage,
      \u003C\u0024\u003Eunit_results_total_damage_count = unit_results_total_damage_count,
      \u003C\u0024\u003Eunit_results_total_kill_count = unit_results_total_kill_count,
      \u003C\u0024\u003Einfo = info,
      \u003C\u0024\u003Eweak_element_attack_count = weak_element_attack_count,
      \u003C\u0024\u003Eweak_kind_attack_count = weak_kind_attack_count,
      \u003C\u0024\u003Ewin = win,
      \u003C\u0024\u003Eguests = guests,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleWaveFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    BattleWaveFinishInfo[] info,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    int[] guests,
    Action<WebAPI.Response.BattleWaveFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/battle/wave/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (continue_count)] = (object) continue_count,
      [nameof (duels_critical_count)] = (object) duels_critical_count,
      [nameof (duels_damage)] = (object) duels_damage,
      [nameof (duels_hit_damage)] = (object) duels_hit_damage,
      [nameof (duels_max_damage)] = (object) duels_max_damage,
      [nameof (gear_results_damage_count)] = (object) gear_results_damage_count,
      [nameof (gear_results_kill_count)] = (object) gear_results_kill_count,
      [nameof (gear_results_player_gear_id)] = (object) gear_results_player_gear_id,
      [nameof (intimate_result_target_player_character_id)] = (object) intimate_result_target_player_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_player_character_id)] = (object) intimate_results_player_character_id,
      [nameof (is_game_over)] = (object) is_game_over,
      [nameof (supply_results_supply_id)] = (object) supply_results_supply_id,
      [nameof (supply_results_use_quantity)] = (object) supply_results_use_quantity,
      ["unit_results_guest_unit"] = (object) guests,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_received_damage)] = (object) unit_results_received_damage,
      [nameof (unit_results_remaining_hp)] = (object) unit_results_remaining_hp,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (unit_results_total_damage_count)] = (object) unit_results_total_damage_count,
      [nameof (unit_results_total_kill_count)] = (object) unit_results_total_kill_count,
      [nameof (weak_element_attack_count)] = (object) weak_element_attack_count,
      [nameof (weak_kind_attack_count)] = (object) weak_kind_attack_count,
      ["wave_stage"] = (object) ((IEnumerable<BattleWaveFinishInfo>) info).Select<BattleWaveFinishInfo, Dictionary<string, object>>((Func<BattleWaveFinishInfo, Dictionary<string, object>>) (x => x.ToDict())).ToArray<Dictionary<string, object>>(),
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleWaveFinish) null);
      }
      else
        callback(new WebAPI.Response.BattleWaveFinish(json.Json));
    }));
  }

  public static Future<T> GachaChargePay<T>(
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<T>((Func<Promise<T>, IEnumerator>) (promise => WebAPI.LoadGachaChargePay<T>(promise, name, execute_count, gacha_id, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaChargePay<T>(
    Promise<T> promise,
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaChargePay\u003Ec__Iterator49<T>()
    {
      name = name,
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Ename = name,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaChargePay<T>(
    string name,
    int execute_count,
    int gacha_id,
    Action<T> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/{0}/pay".F((object) name), new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
      }
      else
        ((Action<T>) callback)((T) typeof (T).GetConstructor(new System.Type[1]
        {
          typeof (Dictionary<string, object>)
        }).Invoke(new object[1]{ (object) json.Json }));
    }));
  }

  public static Future<T> GachaChargeMultiPay<T>(
    string name,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<T>((Func<Promise<T>, IEnumerator>) (promise => WebAPI.LoadGachaChargeMultiPay<T>(promise, name, gacha_id, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaChargeMultiPay<T>(
    Promise<T> promise,
    string name,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaChargeMultiPay\u003Ec__Iterator4A<T>()
    {
      name = name,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Ename = name,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaChargeMultiPay<T>(
    string name,
    int gacha_id,
    Action<T> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/{0}/multi/pay".F((object) name), new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
      }
      else
        ((Action<T>) callback)((T) typeof (T).GetConstructor(new System.Type[1]
        {
          typeof (Dictionary<string, object>)
        }).Invoke(new object[1]{ (object) json.Json }));
    }));
  }

  public static Future<WebAPI.Response.GachaG002FriendpointPay> GachaFriendPointPay(
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GachaG002FriendpointPay>((Func<Promise<WebAPI.Response.GachaG002FriendpointPay>, IEnumerator>) (promise => WebAPI.LoadGachaG002FriendpointPay(promise, name, execute_count, gacha_id, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG002FriendpointPay(
    Promise<WebAPI.Response.GachaG002FriendpointPay> promise,
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG002FriendpointPay\u003Ec__Iterator4B()
    {
      name = name,
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Ename = name,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaFriendpointPay(
    string name,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG002FriendpointPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/gacha/{0}/pay".F((object) name), new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
      }
      else
        callback(new WebAPI.Response.GachaG002FriendpointPay(json.Json));
    }));
  }

  public static Future<WebAPI.Response.AchievementApiAuth> AchievementApiAuth(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.AchievementApiAuth>((Func<Promise<WebAPI.Response.AchievementApiAuth>, IEnumerator>) (promise => WebAPI.LoadAchievementApiAuth(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadAchievementApiAuth(
    Promise<WebAPI.Response.AchievementApiAuth> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadAchievementApiAuth\u003Ec__Iterator4C()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalAchievementApiAuth(
    Action<WebAPI.Response.AchievementApiAuth> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/achievement/api/auth", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.AchievementApiAuth) null);
      }
      else
        callback(new WebAPI.Response.AchievementApiAuth(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ActivityBuyFund> ActivityBuyFund(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ActivityBuyFund>((Func<Promise<WebAPI.Response.ActivityBuyFund>, IEnumerator>) (promise => WebAPI.LoadActivityBuyFund(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadActivityBuyFund(
    Promise<WebAPI.Response.ActivityBuyFund> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadActivityBuyFund\u003Ec__Iterator4D()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalActivityBuyFund(
    Action<WebAPI.Response.ActivityBuyFund> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/activity/buy_fund", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ActivityBuyFund) null);
      }
      else
        callback(new WebAPI.Response.ActivityBuyFund(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ActivityList> ActivityList(
    int combat,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ActivityList>((Func<Promise<WebAPI.Response.ActivityList>, IEnumerator>) (promise => WebAPI.LoadActivityList(promise, combat, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadActivityList(
    Promise<WebAPI.Response.ActivityList> promise,
    int combat,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadActivityList\u003Ec__Iterator4E()
    {
      combat = combat,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ecombat = combat,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalActivityList(
    int combat,
    Action<WebAPI.Response.ActivityList> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/activity/list", new Dictionary<string, object>()
    {
      [nameof (combat)] = (object) combat
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ActivityList) null);
      }
      else
        callback(new WebAPI.Response.ActivityList(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ActivityReceive> ActivityReceive(
    int step_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ActivityReceive>((Func<Promise<WebAPI.Response.ActivityReceive>, IEnumerator>) (promise => WebAPI.LoadActivityReceive(promise, step_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadActivityReceive(
    Promise<WebAPI.Response.ActivityReceive> promise,
    int step_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadActivityReceive\u003Ec__Iterator4F()
    {
      step_id = step_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Estep_id = step_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalActivityReceive(
    int step_id,
    Action<WebAPI.Response.ActivityReceive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/activity/receive", new Dictionary<string, object>()
    {
      [nameof (step_id)] = (object) step_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ActivityReceive) null);
      }
      else
        callback(new WebAPI.Response.ActivityReceive(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.Agreement> Agreement(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.Agreement>((Func<Promise<WebAPI.Response.Agreement>, IEnumerator>) (promise => WebAPI.LoadAgreement(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadAgreement(
    Promise<WebAPI.Response.Agreement> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadAgreement\u003Ec__Iterator50()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalAgreement(
    Action<WebAPI.Response.Agreement> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/agreement", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Agreement) null);
      }
      else
        callback(new WebAPI.Response.Agreement(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleCharacterFinish> BattleCharacterFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleCharacterFinish>((Func<Promise<WebAPI.Response.BattleCharacterFinish>, IEnumerator>) (promise => WebAPI.LoadBattleCharacterFinish(promise, battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleCharacterFinish(
    Promise<WebAPI.Response.BattleCharacterFinish> promise,
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleCharacterFinish\u003Ec__Iterator51()
    {
      battle_turn = battle_turn,
      battle_uuid = battle_uuid,
      continue_count = continue_count,
      drop_entity_ids = drop_entity_ids,
      duels_critical_count = duels_critical_count,
      duels_damage = duels_damage,
      duels_hit_damage = duels_hit_damage,
      duels_max_damage = duels_max_damage,
      enemy_results_dead_count = enemy_results_dead_count,
      enemy_results_enemy_id = enemy_results_enemy_id,
      enemy_results_kill_count = enemy_results_kill_count,
      enemy_results_level_difference = enemy_results_level_difference,
      enemy_results_overkill_damage = enemy_results_overkill_damage,
      gear_results_damage_count = gear_results_damage_count,
      gear_results_kill_count = gear_results_kill_count,
      gear_results_player_gear_id = gear_results_player_gear_id,
      intimate_result_target_player_character_id = intimate_result_target_player_character_id,
      intimate_results_exp = intimate_results_exp,
      intimate_results_player_character_id = intimate_results_player_character_id,
      is_game_over = is_game_over,
      panel_entity_ids = panel_entity_ids,
      supply_results_supply_id = supply_results_supply_id,
      supply_results_use_quantity = supply_results_use_quantity,
      unit_results_guest_unit = unit_results_guest_unit,
      unit_results_player_unit_id = unit_results_player_unit_id,
      unit_results_received_damage = unit_results_received_damage,
      unit_results_remaining_hp = unit_results_remaining_hp,
      unit_results_rental = unit_results_rental,
      unit_results_total_damage = unit_results_total_damage,
      unit_results_total_damage_count = unit_results_total_damage_count,
      unit_results_total_kill_count = unit_results_total_kill_count,
      weak_element_attack_count = weak_element_attack_count,
      weak_kind_attack_count = weak_kind_attack_count,
      win = win,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebattle_turn = battle_turn,
      \u003C\u0024\u003Ebattle_uuid = battle_uuid,
      \u003C\u0024\u003Econtinue_count = continue_count,
      \u003C\u0024\u003Edrop_entity_ids = drop_entity_ids,
      \u003C\u0024\u003Eduels_critical_count = duels_critical_count,
      \u003C\u0024\u003Eduels_damage = duels_damage,
      \u003C\u0024\u003Eduels_hit_damage = duels_hit_damage,
      \u003C\u0024\u003Eduels_max_damage = duels_max_damage,
      \u003C\u0024\u003Eenemy_results_dead_count = enemy_results_dead_count,
      \u003C\u0024\u003Eenemy_results_enemy_id = enemy_results_enemy_id,
      \u003C\u0024\u003Eenemy_results_kill_count = enemy_results_kill_count,
      \u003C\u0024\u003Eenemy_results_level_difference = enemy_results_level_difference,
      \u003C\u0024\u003Eenemy_results_overkill_damage = enemy_results_overkill_damage,
      \u003C\u0024\u003Egear_results_damage_count = gear_results_damage_count,
      \u003C\u0024\u003Egear_results_kill_count = gear_results_kill_count,
      \u003C\u0024\u003Egear_results_player_gear_id = gear_results_player_gear_id,
      \u003C\u0024\u003Eintimate_result_target_player_character_id = intimate_result_target_player_character_id,
      \u003C\u0024\u003Eintimate_results_exp = intimate_results_exp,
      \u003C\u0024\u003Eintimate_results_player_character_id = intimate_results_player_character_id,
      \u003C\u0024\u003Eis_game_over = is_game_over,
      \u003C\u0024\u003Epanel_entity_ids = panel_entity_ids,
      \u003C\u0024\u003Esupply_results_supply_id = supply_results_supply_id,
      \u003C\u0024\u003Esupply_results_use_quantity = supply_results_use_quantity,
      \u003C\u0024\u003Eunit_results_guest_unit = unit_results_guest_unit,
      \u003C\u0024\u003Eunit_results_player_unit_id = unit_results_player_unit_id,
      \u003C\u0024\u003Eunit_results_received_damage = unit_results_received_damage,
      \u003C\u0024\u003Eunit_results_remaining_hp = unit_results_remaining_hp,
      \u003C\u0024\u003Eunit_results_rental = unit_results_rental,
      \u003C\u0024\u003Eunit_results_total_damage = unit_results_total_damage,
      \u003C\u0024\u003Eunit_results_total_damage_count = unit_results_total_damage_count,
      \u003C\u0024\u003Eunit_results_total_kill_count = unit_results_total_kill_count,
      \u003C\u0024\u003Eweak_element_attack_count = weak_element_attack_count,
      \u003C\u0024\u003Eweak_kind_attack_count = weak_kind_attack_count,
      \u003C\u0024\u003Ewin = win,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleCharacterFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.BattleCharacterFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/character/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (continue_count)] = (object) continue_count,
      [nameof (drop_entity_ids)] = (object) drop_entity_ids,
      [nameof (duels_critical_count)] = (object) duels_critical_count,
      [nameof (duels_damage)] = (object) duels_damage,
      [nameof (duels_hit_damage)] = (object) duels_hit_damage,
      [nameof (duels_max_damage)] = (object) duels_max_damage,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_enemy_id)] = (object) enemy_results_enemy_id,
      [nameof (enemy_results_kill_count)] = (object) enemy_results_kill_count,
      [nameof (enemy_results_level_difference)] = (object) enemy_results_level_difference,
      [nameof (enemy_results_overkill_damage)] = (object) enemy_results_overkill_damage,
      [nameof (gear_results_damage_count)] = (object) gear_results_damage_count,
      [nameof (gear_results_kill_count)] = (object) gear_results_kill_count,
      [nameof (gear_results_player_gear_id)] = (object) gear_results_player_gear_id,
      [nameof (intimate_result_target_player_character_id)] = (object) intimate_result_target_player_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_player_character_id)] = (object) intimate_results_player_character_id,
      [nameof (is_game_over)] = (object) is_game_over,
      [nameof (panel_entity_ids)] = (object) panel_entity_ids,
      [nameof (supply_results_supply_id)] = (object) supply_results_supply_id,
      [nameof (supply_results_use_quantity)] = (object) supply_results_use_quantity,
      [nameof (unit_results_guest_unit)] = (object) unit_results_guest_unit,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_received_damage)] = (object) unit_results_received_damage,
      [nameof (unit_results_remaining_hp)] = (object) unit_results_remaining_hp,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (unit_results_total_damage_count)] = (object) unit_results_total_damage_count,
      [nameof (unit_results_total_kill_count)] = (object) unit_results_total_kill_count,
      [nameof (weak_element_attack_count)] = (object) weak_element_attack_count,
      [nameof (weak_kind_attack_count)] = (object) weak_kind_attack_count,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleCharacterFinish) null);
      }
      else
        callback(new WebAPI.Response.BattleCharacterFinish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleCharacterQuestDetail> BattleCharacterQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleCharacterQuestDetail>((Func<Promise<WebAPI.Response.BattleCharacterQuestDetail>, IEnumerator>) (promise => WebAPI.LoadBattleCharacterQuestDetail(promise, quest_s_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleCharacterQuestDetail(
    Promise<WebAPI.Response.BattleCharacterQuestDetail> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleCharacterQuestDetail\u003Ec__Iterator52()
    {
      quest_s_id = quest_s_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleCharacterQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.BattleCharacterQuestDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/character/quest_detail", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleCharacterQuestDetail) null);
      }
      else
        callback(new WebAPI.Response.BattleCharacterQuestDetail(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleCharacterStart> BattleCharacterStart(
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleCharacterStart>((Func<Promise<WebAPI.Response.BattleCharacterStart>, IEnumerator>) (promise => WebAPI.LoadBattleCharacterStart(promise, deck_number, deck_type_id, quest_s_id, support_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleCharacterStart(
    Promise<WebAPI.Response.BattleCharacterStart> promise,
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleCharacterStart\u003Ec__Iterator53()
    {
      deck_number = deck_number,
      deck_type_id = deck_type_id,
      quest_s_id = quest_s_id,
      support_player_id = support_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Edeck_number = deck_number,
      \u003C\u0024\u003Edeck_type_id = deck_type_id,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003Esupport_player_id = support_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleCharacterStart(
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.BattleCharacterStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/character/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleCharacterStart) null);
      }
      else
        callback(new WebAPI.Response.BattleCharacterStart(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleContinueCount> BattleContinueCount(
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleContinueCount>((Func<Promise<WebAPI.Response.BattleContinueCount>, IEnumerator>) (promise => WebAPI.LoadBattleContinueCount(promise, continue_count, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleContinueCount(
    Promise<WebAPI.Response.BattleContinueCount> promise,
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleContinueCount\u003Ec__Iterator54()
    {
      continue_count = continue_count,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Econtinue_count = continue_count,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleContinueCount(
    int continue_count,
    Action<WebAPI.Response.BattleContinueCount> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/continue_count", new Dictionary<string, object>()
    {
      [nameof (continue_count)] = (object) continue_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleContinueCount) null);
      }
      else
        callback(new WebAPI.Response.BattleContinueCount(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleExtraFinish> BattleExtraFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleExtraFinish>((Func<Promise<WebAPI.Response.BattleExtraFinish>, IEnumerator>) (promise => WebAPI.LoadBattleExtraFinish(promise, battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleExtraFinish(
    Promise<WebAPI.Response.BattleExtraFinish> promise,
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleExtraFinish\u003Ec__Iterator55()
    {
      battle_turn = battle_turn,
      battle_uuid = battle_uuid,
      continue_count = continue_count,
      drop_entity_ids = drop_entity_ids,
      duels_critical_count = duels_critical_count,
      duels_damage = duels_damage,
      duels_hit_damage = duels_hit_damage,
      duels_max_damage = duels_max_damage,
      enemy_results_dead_count = enemy_results_dead_count,
      enemy_results_enemy_id = enemy_results_enemy_id,
      enemy_results_kill_count = enemy_results_kill_count,
      enemy_results_level_difference = enemy_results_level_difference,
      enemy_results_overkill_damage = enemy_results_overkill_damage,
      gear_results_damage_count = gear_results_damage_count,
      gear_results_kill_count = gear_results_kill_count,
      gear_results_player_gear_id = gear_results_player_gear_id,
      intimate_result_target_player_character_id = intimate_result_target_player_character_id,
      intimate_results_exp = intimate_results_exp,
      intimate_results_player_character_id = intimate_results_player_character_id,
      is_game_over = is_game_over,
      panel_entity_ids = panel_entity_ids,
      supply_results_supply_id = supply_results_supply_id,
      supply_results_use_quantity = supply_results_use_quantity,
      unit_results_guest_unit = unit_results_guest_unit,
      unit_results_player_unit_id = unit_results_player_unit_id,
      unit_results_received_damage = unit_results_received_damage,
      unit_results_remaining_hp = unit_results_remaining_hp,
      unit_results_rental = unit_results_rental,
      unit_results_total_damage = unit_results_total_damage,
      unit_results_total_damage_count = unit_results_total_damage_count,
      unit_results_total_kill_count = unit_results_total_kill_count,
      weak_element_attack_count = weak_element_attack_count,
      weak_kind_attack_count = weak_kind_attack_count,
      win = win,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebattle_turn = battle_turn,
      \u003C\u0024\u003Ebattle_uuid = battle_uuid,
      \u003C\u0024\u003Econtinue_count = continue_count,
      \u003C\u0024\u003Edrop_entity_ids = drop_entity_ids,
      \u003C\u0024\u003Eduels_critical_count = duels_critical_count,
      \u003C\u0024\u003Eduels_damage = duels_damage,
      \u003C\u0024\u003Eduels_hit_damage = duels_hit_damage,
      \u003C\u0024\u003Eduels_max_damage = duels_max_damage,
      \u003C\u0024\u003Eenemy_results_dead_count = enemy_results_dead_count,
      \u003C\u0024\u003Eenemy_results_enemy_id = enemy_results_enemy_id,
      \u003C\u0024\u003Eenemy_results_kill_count = enemy_results_kill_count,
      \u003C\u0024\u003Eenemy_results_level_difference = enemy_results_level_difference,
      \u003C\u0024\u003Eenemy_results_overkill_damage = enemy_results_overkill_damage,
      \u003C\u0024\u003Egear_results_damage_count = gear_results_damage_count,
      \u003C\u0024\u003Egear_results_kill_count = gear_results_kill_count,
      \u003C\u0024\u003Egear_results_player_gear_id = gear_results_player_gear_id,
      \u003C\u0024\u003Eintimate_result_target_player_character_id = intimate_result_target_player_character_id,
      \u003C\u0024\u003Eintimate_results_exp = intimate_results_exp,
      \u003C\u0024\u003Eintimate_results_player_character_id = intimate_results_player_character_id,
      \u003C\u0024\u003Eis_game_over = is_game_over,
      \u003C\u0024\u003Epanel_entity_ids = panel_entity_ids,
      \u003C\u0024\u003Esupply_results_supply_id = supply_results_supply_id,
      \u003C\u0024\u003Esupply_results_use_quantity = supply_results_use_quantity,
      \u003C\u0024\u003Eunit_results_guest_unit = unit_results_guest_unit,
      \u003C\u0024\u003Eunit_results_player_unit_id = unit_results_player_unit_id,
      \u003C\u0024\u003Eunit_results_received_damage = unit_results_received_damage,
      \u003C\u0024\u003Eunit_results_remaining_hp = unit_results_remaining_hp,
      \u003C\u0024\u003Eunit_results_rental = unit_results_rental,
      \u003C\u0024\u003Eunit_results_total_damage = unit_results_total_damage,
      \u003C\u0024\u003Eunit_results_total_damage_count = unit_results_total_damage_count,
      \u003C\u0024\u003Eunit_results_total_kill_count = unit_results_total_kill_count,
      \u003C\u0024\u003Eweak_element_attack_count = weak_element_attack_count,
      \u003C\u0024\u003Eweak_kind_attack_count = weak_kind_attack_count,
      \u003C\u0024\u003Ewin = win,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleExtraFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.BattleExtraFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/extra/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (continue_count)] = (object) continue_count,
      [nameof (drop_entity_ids)] = (object) drop_entity_ids,
      [nameof (duels_critical_count)] = (object) duels_critical_count,
      [nameof (duels_damage)] = (object) duels_damage,
      [nameof (duels_hit_damage)] = (object) duels_hit_damage,
      [nameof (duels_max_damage)] = (object) duels_max_damage,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_enemy_id)] = (object) enemy_results_enemy_id,
      [nameof (enemy_results_kill_count)] = (object) enemy_results_kill_count,
      [nameof (enemy_results_level_difference)] = (object) enemy_results_level_difference,
      [nameof (enemy_results_overkill_damage)] = (object) enemy_results_overkill_damage,
      [nameof (gear_results_damage_count)] = (object) gear_results_damage_count,
      [nameof (gear_results_kill_count)] = (object) gear_results_kill_count,
      [nameof (gear_results_player_gear_id)] = (object) gear_results_player_gear_id,
      [nameof (intimate_result_target_player_character_id)] = (object) intimate_result_target_player_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_player_character_id)] = (object) intimate_results_player_character_id,
      [nameof (is_game_over)] = (object) is_game_over,
      [nameof (panel_entity_ids)] = (object) panel_entity_ids,
      [nameof (supply_results_supply_id)] = (object) supply_results_supply_id,
      [nameof (supply_results_use_quantity)] = (object) supply_results_use_quantity,
      [nameof (unit_results_guest_unit)] = (object) unit_results_guest_unit,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_received_damage)] = (object) unit_results_received_damage,
      [nameof (unit_results_remaining_hp)] = (object) unit_results_remaining_hp,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (unit_results_total_damage_count)] = (object) unit_results_total_damage_count,
      [nameof (unit_results_total_kill_count)] = (object) unit_results_total_kill_count,
      [nameof (weak_element_attack_count)] = (object) weak_element_attack_count,
      [nameof (weak_kind_attack_count)] = (object) weak_kind_attack_count,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleExtraFinish) null);
      }
      else
        callback(new WebAPI.Response.BattleExtraFinish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleExtraQuestDetail> BattleExtraQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleExtraQuestDetail>((Func<Promise<WebAPI.Response.BattleExtraQuestDetail>, IEnumerator>) (promise => WebAPI.LoadBattleExtraQuestDetail(promise, quest_s_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleExtraQuestDetail(
    Promise<WebAPI.Response.BattleExtraQuestDetail> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleExtraQuestDetail\u003Ec__Iterator56()
    {
      quest_s_id = quest_s_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleExtraQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.BattleExtraQuestDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/extra/quest_detail", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleExtraQuestDetail) null);
      }
      else
        callback(new WebAPI.Response.BattleExtraQuestDetail(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleExtraStart> BattleExtraStart(
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleExtraStart>((Func<Promise<WebAPI.Response.BattleExtraStart>, IEnumerator>) (promise => WebAPI.LoadBattleExtraStart(promise, deck_number, deck_type_id, quest_s_id, support_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleExtraStart(
    Promise<WebAPI.Response.BattleExtraStart> promise,
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleExtraStart\u003Ec__Iterator57()
    {
      deck_number = deck_number,
      deck_type_id = deck_type_id,
      quest_s_id = quest_s_id,
      support_player_id = support_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Edeck_number = deck_number,
      \u003C\u0024\u003Edeck_type_id = deck_type_id,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003Esupport_player_id = support_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleExtraStart(
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.BattleExtraStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/extra/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleExtraStart) null);
      }
      else
        callback(new WebAPI.Response.BattleExtraStart(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleForceClose> BattleForceClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleForceClose>((Func<Promise<WebAPI.Response.BattleForceClose>, IEnumerator>) (promise => WebAPI.LoadBattleForceClose(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleForceClose(
    Promise<WebAPI.Response.BattleForceClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleForceClose\u003Ec__Iterator58()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleForceClose(
    Action<WebAPI.Response.BattleForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/battle/force-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleForceClose) null);
      }
      else
        callback(new WebAPI.Response.BattleForceClose(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleHarmonyFinish> BattleHarmonyFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleHarmonyFinish>((Func<Promise<WebAPI.Response.BattleHarmonyFinish>, IEnumerator>) (promise => WebAPI.LoadBattleHarmonyFinish(promise, battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleHarmonyFinish(
    Promise<WebAPI.Response.BattleHarmonyFinish> promise,
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleHarmonyFinish\u003Ec__Iterator59()
    {
      battle_turn = battle_turn,
      battle_uuid = battle_uuid,
      continue_count = continue_count,
      drop_entity_ids = drop_entity_ids,
      duels_critical_count = duels_critical_count,
      duels_damage = duels_damage,
      duels_hit_damage = duels_hit_damage,
      duels_max_damage = duels_max_damage,
      enemy_results_dead_count = enemy_results_dead_count,
      enemy_results_enemy_id = enemy_results_enemy_id,
      enemy_results_kill_count = enemy_results_kill_count,
      enemy_results_level_difference = enemy_results_level_difference,
      enemy_results_overkill_damage = enemy_results_overkill_damage,
      gear_results_damage_count = gear_results_damage_count,
      gear_results_kill_count = gear_results_kill_count,
      gear_results_player_gear_id = gear_results_player_gear_id,
      intimate_result_target_player_character_id = intimate_result_target_player_character_id,
      intimate_results_exp = intimate_results_exp,
      intimate_results_player_character_id = intimate_results_player_character_id,
      is_game_over = is_game_over,
      panel_entity_ids = panel_entity_ids,
      supply_results_supply_id = supply_results_supply_id,
      supply_results_use_quantity = supply_results_use_quantity,
      unit_results_guest_unit = unit_results_guest_unit,
      unit_results_player_unit_id = unit_results_player_unit_id,
      unit_results_received_damage = unit_results_received_damage,
      unit_results_remaining_hp = unit_results_remaining_hp,
      unit_results_rental = unit_results_rental,
      unit_results_total_damage = unit_results_total_damage,
      unit_results_total_damage_count = unit_results_total_damage_count,
      unit_results_total_kill_count = unit_results_total_kill_count,
      weak_element_attack_count = weak_element_attack_count,
      weak_kind_attack_count = weak_kind_attack_count,
      win = win,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebattle_turn = battle_turn,
      \u003C\u0024\u003Ebattle_uuid = battle_uuid,
      \u003C\u0024\u003Econtinue_count = continue_count,
      \u003C\u0024\u003Edrop_entity_ids = drop_entity_ids,
      \u003C\u0024\u003Eduels_critical_count = duels_critical_count,
      \u003C\u0024\u003Eduels_damage = duels_damage,
      \u003C\u0024\u003Eduels_hit_damage = duels_hit_damage,
      \u003C\u0024\u003Eduels_max_damage = duels_max_damage,
      \u003C\u0024\u003Eenemy_results_dead_count = enemy_results_dead_count,
      \u003C\u0024\u003Eenemy_results_enemy_id = enemy_results_enemy_id,
      \u003C\u0024\u003Eenemy_results_kill_count = enemy_results_kill_count,
      \u003C\u0024\u003Eenemy_results_level_difference = enemy_results_level_difference,
      \u003C\u0024\u003Eenemy_results_overkill_damage = enemy_results_overkill_damage,
      \u003C\u0024\u003Egear_results_damage_count = gear_results_damage_count,
      \u003C\u0024\u003Egear_results_kill_count = gear_results_kill_count,
      \u003C\u0024\u003Egear_results_player_gear_id = gear_results_player_gear_id,
      \u003C\u0024\u003Eintimate_result_target_player_character_id = intimate_result_target_player_character_id,
      \u003C\u0024\u003Eintimate_results_exp = intimate_results_exp,
      \u003C\u0024\u003Eintimate_results_player_character_id = intimate_results_player_character_id,
      \u003C\u0024\u003Eis_game_over = is_game_over,
      \u003C\u0024\u003Epanel_entity_ids = panel_entity_ids,
      \u003C\u0024\u003Esupply_results_supply_id = supply_results_supply_id,
      \u003C\u0024\u003Esupply_results_use_quantity = supply_results_use_quantity,
      \u003C\u0024\u003Eunit_results_guest_unit = unit_results_guest_unit,
      \u003C\u0024\u003Eunit_results_player_unit_id = unit_results_player_unit_id,
      \u003C\u0024\u003Eunit_results_received_damage = unit_results_received_damage,
      \u003C\u0024\u003Eunit_results_remaining_hp = unit_results_remaining_hp,
      \u003C\u0024\u003Eunit_results_rental = unit_results_rental,
      \u003C\u0024\u003Eunit_results_total_damage = unit_results_total_damage,
      \u003C\u0024\u003Eunit_results_total_damage_count = unit_results_total_damage_count,
      \u003C\u0024\u003Eunit_results_total_kill_count = unit_results_total_kill_count,
      \u003C\u0024\u003Eweak_element_attack_count = weak_element_attack_count,
      \u003C\u0024\u003Eweak_kind_attack_count = weak_kind_attack_count,
      \u003C\u0024\u003Ewin = win,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleHarmonyFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.BattleHarmonyFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/harmony/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (continue_count)] = (object) continue_count,
      [nameof (drop_entity_ids)] = (object) drop_entity_ids,
      [nameof (duels_critical_count)] = (object) duels_critical_count,
      [nameof (duels_damage)] = (object) duels_damage,
      [nameof (duels_hit_damage)] = (object) duels_hit_damage,
      [nameof (duels_max_damage)] = (object) duels_max_damage,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_enemy_id)] = (object) enemy_results_enemy_id,
      [nameof (enemy_results_kill_count)] = (object) enemy_results_kill_count,
      [nameof (enemy_results_level_difference)] = (object) enemy_results_level_difference,
      [nameof (enemy_results_overkill_damage)] = (object) enemy_results_overkill_damage,
      [nameof (gear_results_damage_count)] = (object) gear_results_damage_count,
      [nameof (gear_results_kill_count)] = (object) gear_results_kill_count,
      [nameof (gear_results_player_gear_id)] = (object) gear_results_player_gear_id,
      [nameof (intimate_result_target_player_character_id)] = (object) intimate_result_target_player_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_player_character_id)] = (object) intimate_results_player_character_id,
      [nameof (is_game_over)] = (object) is_game_over,
      [nameof (panel_entity_ids)] = (object) panel_entity_ids,
      [nameof (supply_results_supply_id)] = (object) supply_results_supply_id,
      [nameof (supply_results_use_quantity)] = (object) supply_results_use_quantity,
      [nameof (unit_results_guest_unit)] = (object) unit_results_guest_unit,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_received_damage)] = (object) unit_results_received_damage,
      [nameof (unit_results_remaining_hp)] = (object) unit_results_remaining_hp,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (unit_results_total_damage_count)] = (object) unit_results_total_damage_count,
      [nameof (unit_results_total_kill_count)] = (object) unit_results_total_kill_count,
      [nameof (weak_element_attack_count)] = (object) weak_element_attack_count,
      [nameof (weak_kind_attack_count)] = (object) weak_kind_attack_count,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleHarmonyFinish) null);
      }
      else
        callback(new WebAPI.Response.BattleHarmonyFinish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleHarmonyQuestDetail> BattleHarmonyQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleHarmonyQuestDetail>((Func<Promise<WebAPI.Response.BattleHarmonyQuestDetail>, IEnumerator>) (promise => WebAPI.LoadBattleHarmonyQuestDetail(promise, quest_s_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleHarmonyQuestDetail(
    Promise<WebAPI.Response.BattleHarmonyQuestDetail> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleHarmonyQuestDetail\u003Ec__Iterator5A()
    {
      quest_s_id = quest_s_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleHarmonyQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.BattleHarmonyQuestDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/harmony/quest_detail", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleHarmonyQuestDetail) null);
      }
      else
        callback(new WebAPI.Response.BattleHarmonyQuestDetail(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleHarmonyStart> BattleHarmonyStart(
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleHarmonyStart>((Func<Promise<WebAPI.Response.BattleHarmonyStart>, IEnumerator>) (promise => WebAPI.LoadBattleHarmonyStart(promise, deck_number, deck_type_id, quest_s_id, support_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleHarmonyStart(
    Promise<WebAPI.Response.BattleHarmonyStart> promise,
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleHarmonyStart\u003Ec__Iterator5B()
    {
      deck_number = deck_number,
      deck_type_id = deck_type_id,
      quest_s_id = quest_s_id,
      support_player_id = support_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Edeck_number = deck_number,
      \u003C\u0024\u003Edeck_type_id = deck_type_id,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003Esupport_player_id = support_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleHarmonyStart(
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.BattleHarmonyStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/harmony/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleHarmonyStart) null);
      }
      else
        callback(new WebAPI.Response.BattleHarmonyStart(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleResume> BattleResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleResume>((Func<Promise<WebAPI.Response.BattleResume>, IEnumerator>) (promise => WebAPI.LoadBattleResume(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleResume(
    Promise<WebAPI.Response.BattleResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleResume\u003Ec__Iterator5C()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleResume(
    Action<WebAPI.Response.BattleResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/battle/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleResume) null);
      }
      else
        callback(new WebAPI.Response.BattleResume(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleRetire> BattleRetire(
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleRetire>((Func<Promise<WebAPI.Response.BattleRetire>, IEnumerator>) (promise => WebAPI.LoadBattleRetire(promise, continue_count, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleRetire(
    Promise<WebAPI.Response.BattleRetire> promise,
    int continue_count,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleRetire\u003Ec__Iterator5D()
    {
      continue_count = continue_count,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Econtinue_count = continue_count,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleRetire(
    int continue_count,
    Action<WebAPI.Response.BattleRetire> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/retire", new Dictionary<string, object>()
    {
      [nameof (continue_count)] = (object) continue_count
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleRetire) null);
      }
      else
        callback(new WebAPI.Response.BattleRetire(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleStoryFinish> BattleStoryFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleStoryFinish>((Func<Promise<WebAPI.Response.BattleStoryFinish>, IEnumerator>) (promise => WebAPI.LoadBattleStoryFinish(promise, battle_turn, battle_uuid, continue_count, drop_entity_ids, duels_critical_count, duels_damage, duels_hit_damage, duels_max_damage, enemy_results_dead_count, enemy_results_enemy_id, enemy_results_kill_count, enemy_results_level_difference, enemy_results_overkill_damage, gear_results_damage_count, gear_results_kill_count, gear_results_player_gear_id, intimate_result_target_player_character_id, intimate_results_exp, intimate_results_player_character_id, is_game_over, panel_entity_ids, supply_results_supply_id, supply_results_use_quantity, unit_results_guest_unit, unit_results_player_unit_id, unit_results_received_damage, unit_results_remaining_hp, unit_results_rental, unit_results_total_damage, unit_results_total_damage_count, unit_results_total_kill_count, weak_element_attack_count, weak_kind_attack_count, win, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleStoryFinish(
    Promise<WebAPI.Response.BattleStoryFinish> promise,
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleStoryFinish\u003Ec__Iterator5E()
    {
      battle_turn = battle_turn,
      battle_uuid = battle_uuid,
      continue_count = continue_count,
      drop_entity_ids = drop_entity_ids,
      duels_critical_count = duels_critical_count,
      duels_damage = duels_damage,
      duels_hit_damage = duels_hit_damage,
      duels_max_damage = duels_max_damage,
      enemy_results_dead_count = enemy_results_dead_count,
      enemy_results_enemy_id = enemy_results_enemy_id,
      enemy_results_kill_count = enemy_results_kill_count,
      enemy_results_level_difference = enemy_results_level_difference,
      enemy_results_overkill_damage = enemy_results_overkill_damage,
      gear_results_damage_count = gear_results_damage_count,
      gear_results_kill_count = gear_results_kill_count,
      gear_results_player_gear_id = gear_results_player_gear_id,
      intimate_result_target_player_character_id = intimate_result_target_player_character_id,
      intimate_results_exp = intimate_results_exp,
      intimate_results_player_character_id = intimate_results_player_character_id,
      is_game_over = is_game_over,
      panel_entity_ids = panel_entity_ids,
      supply_results_supply_id = supply_results_supply_id,
      supply_results_use_quantity = supply_results_use_quantity,
      unit_results_guest_unit = unit_results_guest_unit,
      unit_results_player_unit_id = unit_results_player_unit_id,
      unit_results_received_damage = unit_results_received_damage,
      unit_results_remaining_hp = unit_results_remaining_hp,
      unit_results_rental = unit_results_rental,
      unit_results_total_damage = unit_results_total_damage,
      unit_results_total_damage_count = unit_results_total_damage_count,
      unit_results_total_kill_count = unit_results_total_kill_count,
      weak_element_attack_count = weak_element_attack_count,
      weak_kind_attack_count = weak_kind_attack_count,
      win = win,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebattle_turn = battle_turn,
      \u003C\u0024\u003Ebattle_uuid = battle_uuid,
      \u003C\u0024\u003Econtinue_count = continue_count,
      \u003C\u0024\u003Edrop_entity_ids = drop_entity_ids,
      \u003C\u0024\u003Eduels_critical_count = duels_critical_count,
      \u003C\u0024\u003Eduels_damage = duels_damage,
      \u003C\u0024\u003Eduels_hit_damage = duels_hit_damage,
      \u003C\u0024\u003Eduels_max_damage = duels_max_damage,
      \u003C\u0024\u003Eenemy_results_dead_count = enemy_results_dead_count,
      \u003C\u0024\u003Eenemy_results_enemy_id = enemy_results_enemy_id,
      \u003C\u0024\u003Eenemy_results_kill_count = enemy_results_kill_count,
      \u003C\u0024\u003Eenemy_results_level_difference = enemy_results_level_difference,
      \u003C\u0024\u003Eenemy_results_overkill_damage = enemy_results_overkill_damage,
      \u003C\u0024\u003Egear_results_damage_count = gear_results_damage_count,
      \u003C\u0024\u003Egear_results_kill_count = gear_results_kill_count,
      \u003C\u0024\u003Egear_results_player_gear_id = gear_results_player_gear_id,
      \u003C\u0024\u003Eintimate_result_target_player_character_id = intimate_result_target_player_character_id,
      \u003C\u0024\u003Eintimate_results_exp = intimate_results_exp,
      \u003C\u0024\u003Eintimate_results_player_character_id = intimate_results_player_character_id,
      \u003C\u0024\u003Eis_game_over = is_game_over,
      \u003C\u0024\u003Epanel_entity_ids = panel_entity_ids,
      \u003C\u0024\u003Esupply_results_supply_id = supply_results_supply_id,
      \u003C\u0024\u003Esupply_results_use_quantity = supply_results_use_quantity,
      \u003C\u0024\u003Eunit_results_guest_unit = unit_results_guest_unit,
      \u003C\u0024\u003Eunit_results_player_unit_id = unit_results_player_unit_id,
      \u003C\u0024\u003Eunit_results_received_damage = unit_results_received_damage,
      \u003C\u0024\u003Eunit_results_remaining_hp = unit_results_remaining_hp,
      \u003C\u0024\u003Eunit_results_rental = unit_results_rental,
      \u003C\u0024\u003Eunit_results_total_damage = unit_results_total_damage,
      \u003C\u0024\u003Eunit_results_total_damage_count = unit_results_total_damage_count,
      \u003C\u0024\u003Eunit_results_total_kill_count = unit_results_total_kill_count,
      \u003C\u0024\u003Eweak_element_attack_count = weak_element_attack_count,
      \u003C\u0024\u003Eweak_kind_attack_count = weak_kind_attack_count,
      \u003C\u0024\u003Ewin = win,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleStoryFinish(
    int battle_turn,
    string battle_uuid,
    int continue_count,
    int[] drop_entity_ids,
    int[] duels_critical_count,
    int[] duels_damage,
    int[] duels_hit_damage,
    int[] duels_max_damage,
    int[] enemy_results_dead_count,
    int[] enemy_results_enemy_id,
    int[] enemy_results_kill_count,
    int[] enemy_results_level_difference,
    int[] enemy_results_overkill_damage,
    int[] gear_results_damage_count,
    int[] gear_results_kill_count,
    int[] gear_results_player_gear_id,
    int[] intimate_result_target_player_character_id,
    int[] intimate_results_exp,
    int[] intimate_results_player_character_id,
    bool is_game_over,
    int[] panel_entity_ids,
    int[] supply_results_supply_id,
    int[] supply_results_use_quantity,
    int[] unit_results_guest_unit,
    int[] unit_results_player_unit_id,
    int[] unit_results_received_damage,
    int[] unit_results_remaining_hp,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    int[] unit_results_total_damage_count,
    int[] unit_results_total_kill_count,
    int weak_element_attack_count,
    int weak_kind_attack_count,
    int win,
    Action<WebAPI.Response.BattleStoryFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/story/finish", new Dictionary<string, object>()
    {
      [nameof (battle_turn)] = (object) battle_turn,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (continue_count)] = (object) continue_count,
      [nameof (drop_entity_ids)] = (object) drop_entity_ids,
      [nameof (duels_critical_count)] = (object) duels_critical_count,
      [nameof (duels_damage)] = (object) duels_damage,
      [nameof (duels_hit_damage)] = (object) duels_hit_damage,
      [nameof (duels_max_damage)] = (object) duels_max_damage,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_enemy_id)] = (object) enemy_results_enemy_id,
      [nameof (enemy_results_kill_count)] = (object) enemy_results_kill_count,
      [nameof (enemy_results_level_difference)] = (object) enemy_results_level_difference,
      [nameof (enemy_results_overkill_damage)] = (object) enemy_results_overkill_damage,
      [nameof (gear_results_damage_count)] = (object) gear_results_damage_count,
      [nameof (gear_results_kill_count)] = (object) gear_results_kill_count,
      [nameof (gear_results_player_gear_id)] = (object) gear_results_player_gear_id,
      [nameof (intimate_result_target_player_character_id)] = (object) intimate_result_target_player_character_id,
      [nameof (intimate_results_exp)] = (object) intimate_results_exp,
      [nameof (intimate_results_player_character_id)] = (object) intimate_results_player_character_id,
      [nameof (is_game_over)] = (object) is_game_over,
      [nameof (panel_entity_ids)] = (object) panel_entity_ids,
      [nameof (supply_results_supply_id)] = (object) supply_results_supply_id,
      [nameof (supply_results_use_quantity)] = (object) supply_results_use_quantity,
      [nameof (unit_results_guest_unit)] = (object) unit_results_guest_unit,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_received_damage)] = (object) unit_results_received_damage,
      [nameof (unit_results_remaining_hp)] = (object) unit_results_remaining_hp,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (unit_results_total_damage_count)] = (object) unit_results_total_damage_count,
      [nameof (unit_results_total_kill_count)] = (object) unit_results_total_kill_count,
      [nameof (weak_element_attack_count)] = (object) weak_element_attack_count,
      [nameof (weak_kind_attack_count)] = (object) weak_kind_attack_count,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleStoryFinish) null);
      }
      else
        callback(new WebAPI.Response.BattleStoryFinish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleStoryQuestDetail> BattleStoryQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleStoryQuestDetail>((Func<Promise<WebAPI.Response.BattleStoryQuestDetail>, IEnumerator>) (promise => WebAPI.LoadBattleStoryQuestDetail(promise, quest_s_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleStoryQuestDetail(
    Promise<WebAPI.Response.BattleStoryQuestDetail> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleStoryQuestDetail\u003Ec__Iterator5F()
    {
      quest_s_id = quest_s_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleStoryQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.BattleStoryQuestDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/story/quest_detail", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleStoryQuestDetail) null);
      }
      else
        callback(new WebAPI.Response.BattleStoryQuestDetail(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleStoryStart> BattleStoryStart(
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleStoryStart>((Func<Promise<WebAPI.Response.BattleStoryStart>, IEnumerator>) (promise => WebAPI.LoadBattleStoryStart(promise, deck_number, deck_type_id, quest_s_id, support_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleStoryStart(
    Promise<WebAPI.Response.BattleStoryStart> promise,
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleStoryStart\u003Ec__Iterator60()
    {
      deck_number = deck_number,
      deck_type_id = deck_type_id,
      quest_s_id = quest_s_id,
      support_player_id = support_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Edeck_number = deck_number,
      \u003C\u0024\u003Edeck_type_id = deck_type_id,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003Esupport_player_id = support_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleStoryStart(
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.BattleStoryStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/story/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleStoryStart) null);
      }
      else
        callback(new WebAPI.Response.BattleStoryStart(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleWaveQuestDetail> BattleWaveQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleWaveQuestDetail>((Func<Promise<WebAPI.Response.BattleWaveQuestDetail>, IEnumerator>) (promise => WebAPI.LoadBattleWaveQuestDetail(promise, quest_s_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleWaveQuestDetail(
    Promise<WebAPI.Response.BattleWaveQuestDetail> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleWaveQuestDetail\u003Ec__Iterator61()
    {
      quest_s_id = quest_s_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleWaveQuestDetail(
    int quest_s_id,
    Action<WebAPI.Response.BattleWaveQuestDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/wave/quest_detail", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleWaveQuestDetail) null);
      }
      else
        callback(new WebAPI.Response.BattleWaveQuestDetail(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BattleWaveStart> BattleWaveStart(
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BattleWaveStart>((Func<Promise<WebAPI.Response.BattleWaveStart>, IEnumerator>) (promise => WebAPI.LoadBattleWaveStart(promise, deck_number, deck_type_id, quest_s_id, support_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBattleWaveStart(
    Promise<WebAPI.Response.BattleWaveStart> promise,
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBattleWaveStart\u003Ec__Iterator62()
    {
      deck_number = deck_number,
      deck_type_id = deck_type_id,
      quest_s_id = quest_s_id,
      support_player_id = support_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Edeck_number = deck_number,
      \u003C\u0024\u003Edeck_type_id = deck_type_id,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003Esupport_player_id = support_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBattleWaveStart(
    int deck_number,
    int deck_type_id,
    int quest_s_id,
    string support_player_id,
    Action<WebAPI.Response.BattleWaveStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/battle/wave/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (quest_s_id)] = (object) quest_s_id,
      [nameof (support_player_id)] = (object) support_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BattleWaveStart) null);
      }
      else
        callback(new WebAPI.Response.BattleWaveStart(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BingoIndex> BingoIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BingoIndex>((Func<Promise<WebAPI.Response.BingoIndex>, IEnumerator>) (promise => WebAPI.LoadBingoIndex(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBingoIndex(
    Promise<WebAPI.Response.BingoIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBingoIndex\u003Ec__Iterator63()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBingoIndex(
    Action<WebAPI.Response.BingoIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/bingo/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BingoIndex) null);
      }
      else
        callback(new WebAPI.Response.BingoIndex(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BingoOpenCheck> BingoOpenCheck(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BingoOpenCheck>((Func<Promise<WebAPI.Response.BingoOpenCheck>, IEnumerator>) (promise => WebAPI.LoadBingoOpenCheck(promise, bingo_id, panel_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBingoOpenCheck(
    Promise<WebAPI.Response.BingoOpenCheck> promise,
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBingoOpenCheck\u003Ec__Iterator64()
    {
      bingo_id = bingo_id,
      panel_id = panel_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebingo_id = bingo_id,
      \u003C\u0024\u003Epanel_id = panel_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBingoOpenCheck(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.BingoOpenCheck> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/bingo/open/check", new Dictionary<string, object>()
    {
      [nameof (bingo_id)] = (object) bingo_id,
      [nameof (panel_id)] = (object) panel_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BingoOpenCheck) null);
      }
      else
        callback(new WebAPI.Response.BingoOpenCheck(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BingoReceiveReward> BingoReceiveReward(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BingoReceiveReward>((Func<Promise<WebAPI.Response.BingoReceiveReward>, IEnumerator>) (promise => WebAPI.LoadBingoReceiveReward(promise, bingo_id, panel_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBingoReceiveReward(
    Promise<WebAPI.Response.BingoReceiveReward> promise,
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBingoReceiveReward\u003Ec__Iterator65()
    {
      bingo_id = bingo_id,
      panel_id = panel_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebingo_id = bingo_id,
      \u003C\u0024\u003Epanel_id = panel_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBingoReceiveReward(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.BingoReceiveReward> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/bingo/receive/reward", new Dictionary<string, object>()
    {
      [nameof (bingo_id)] = (object) bingo_id,
      [nameof (panel_id)] = (object) panel_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BingoReceiveReward) null);
      }
      else
        callback(new WebAPI.Response.BingoReceiveReward(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BingoReview> BingoReview(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BingoReview>((Func<Promise<WebAPI.Response.BingoReview>, IEnumerator>) (promise => WebAPI.LoadBingoReview(promise, bingo_id, panel_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBingoReview(
    Promise<WebAPI.Response.BingoReview> promise,
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBingoReview\u003Ec__Iterator66()
    {
      bingo_id = bingo_id,
      panel_id = panel_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebingo_id = bingo_id,
      \u003C\u0024\u003Epanel_id = panel_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBingoReview(
    int bingo_id,
    int panel_id,
    Action<WebAPI.Response.BingoReview> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/bingo/review", new Dictionary<string, object>()
    {
      [nameof (bingo_id)] = (object) bingo_id,
      [nameof (panel_id)] = (object) panel_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BingoReview) null);
      }
      else
        callback(new WebAPI.Response.BingoReview(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.BingoSelectComplete> BingoSelectComplete(
    int bingo_id,
    int group_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.BingoSelectComplete>((Func<Promise<WebAPI.Response.BingoSelectComplete>, IEnumerator>) (promise => WebAPI.LoadBingoSelectComplete(promise, bingo_id, group_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadBingoSelectComplete(
    Promise<WebAPI.Response.BingoSelectComplete> promise,
    int bingo_id,
    int group_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadBingoSelectComplete\u003Ec__Iterator67()
    {
      bingo_id = bingo_id,
      group_id = group_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebingo_id = bingo_id,
      \u003C\u0024\u003Egroup_id = group_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalBingoSelectComplete(
    int bingo_id,
    int group_id,
    Action<WebAPI.Response.BingoSelectComplete> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/bingo/select/complete", new Dictionary<string, object>()
    {
      [nameof (bingo_id)] = (object) bingo_id,
      [nameof (group_id)] = (object) group_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.BingoSelectComplete) null);
      }
      else
        callback(new WebAPI.Response.BingoSelectComplete(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.CoinbonusHistory> CoinbonusHistory(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.CoinbonusHistory>((Func<Promise<WebAPI.Response.CoinbonusHistory>, IEnumerator>) (promise => WebAPI.LoadCoinbonusHistory(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadCoinbonusHistory(
    Promise<WebAPI.Response.CoinbonusHistory> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadCoinbonusHistory\u003Ec__Iterator68()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalCoinbonusHistory(
    Action<WebAPI.Response.CoinbonusHistory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/coinbonus/history", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.CoinbonusHistory) null);
      }
      else
        callback(new WebAPI.Response.CoinbonusHistory(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.CoinbonusPresent> CoinbonusPresent(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.CoinbonusPresent>((Func<Promise<WebAPI.Response.CoinbonusPresent>, IEnumerator>) (promise => WebAPI.LoadCoinbonusPresent(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadCoinbonusPresent(
    Promise<WebAPI.Response.CoinbonusPresent> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadCoinbonusPresent\u003Ec__Iterator69()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalCoinbonusPresent(
    Action<WebAPI.Response.CoinbonusPresent> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/coinbonus/present", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.CoinbonusPresent) null);
      }
      else
        callback(new WebAPI.Response.CoinbonusPresent(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ColosseumBoot> ColosseumBoot(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ColosseumBoot>((Func<Promise<WebAPI.Response.ColosseumBoot>, IEnumerator>) (promise => WebAPI.LoadColosseumBoot(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadColosseumBoot(
    Promise<WebAPI.Response.ColosseumBoot> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadColosseumBoot\u003Ec__Iterator6A()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalColosseumBoot(
    Action<WebAPI.Response.ColosseumBoot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/colosseum/boot", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumBoot) null);
      }
      else
        callback(new WebAPI.Response.ColosseumBoot(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ColosseumFinish> ColosseumFinish(
    string arena_transaction_id,
    string battle_log,
    bool is_win,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ColosseumFinish>((Func<Promise<WebAPI.Response.ColosseumFinish>, IEnumerator>) (promise => WebAPI.LoadColosseumFinish(promise, arena_transaction_id, battle_log, is_win, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadColosseumFinish(
    Promise<WebAPI.Response.ColosseumFinish> promise,
    string arena_transaction_id,
    string battle_log,
    bool is_win,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadColosseumFinish\u003Ec__Iterator6B()
    {
      arena_transaction_id = arena_transaction_id,
      battle_log = battle_log,
      is_win = is_win,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Earena_transaction_id = arena_transaction_id,
      \u003C\u0024\u003Ebattle_log = battle_log,
      \u003C\u0024\u003Eis_win = is_win,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalColosseumFinish(
    string arena_transaction_id,
    string battle_log,
    bool is_win,
    Action<WebAPI.Response.ColosseumFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/colosseum/finish", new Dictionary<string, object>()
    {
      [nameof (arena_transaction_id)] = (object) arena_transaction_id,
      [nameof (battle_log)] = (object) battle_log,
      [nameof (is_win)] = (object) is_win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumFinish) null);
      }
      else
        callback(new WebAPI.Response.ColosseumFinish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ColosseumForceClose> ColosseumForceClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ColosseumForceClose>((Func<Promise<WebAPI.Response.ColosseumForceClose>, IEnumerator>) (promise => WebAPI.LoadColosseumForceClose(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadColosseumForceClose(
    Promise<WebAPI.Response.ColosseumForceClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadColosseumForceClose\u003Ec__Iterator6C()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalColosseumForceClose(
    Action<WebAPI.Response.ColosseumForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/colosseum/force-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumForceClose) null);
      }
      else
        callback(new WebAPI.Response.ColosseumForceClose(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ColosseumRanking> ColosseumRanking(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ColosseumRanking>((Func<Promise<WebAPI.Response.ColosseumRanking>, IEnumerator>) (promise => WebAPI.LoadColosseumRanking(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadColosseumRanking(
    Promise<WebAPI.Response.ColosseumRanking> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadColosseumRanking\u003Ec__Iterator6D()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalColosseumRanking(
    Action<WebAPI.Response.ColosseumRanking> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/colosseum/ranking", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumRanking) null);
      }
      else
        callback(new WebAPI.Response.ColosseumRanking(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ColosseumResume> ColosseumResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ColosseumResume>((Func<Promise<WebAPI.Response.ColosseumResume>, IEnumerator>) (promise => WebAPI.LoadColosseumResume(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadColosseumResume(
    Promise<WebAPI.Response.ColosseumResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadColosseumResume\u003Ec__Iterator6E()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalColosseumResume(
    Action<WebAPI.Response.ColosseumResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/colosseum/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumResume) null);
      }
      else
        callback(new WebAPI.Response.ColosseumResume(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ColosseumStart> ColosseumStart(
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ColosseumStart>((Func<Promise<WebAPI.Response.ColosseumStart>, IEnumerator>) (promise => WebAPI.LoadColosseumStart(promise, deck_number, deck_type_id, target_player_id, target_player_index, total_combat, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadColosseumStart(
    Promise<WebAPI.Response.ColosseumStart> promise,
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadColosseumStart\u003Ec__Iterator6F()
    {
      deck_number = deck_number,
      deck_type_id = deck_type_id,
      target_player_id = target_player_id,
      target_player_index = target_player_index,
      total_combat = total_combat,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Edeck_number = deck_number,
      \u003C\u0024\u003Edeck_type_id = deck_type_id,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003Etarget_player_index = target_player_index,
      \u003C\u0024\u003Etotal_combat = total_combat,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalColosseumStart(
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.ColosseumStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/colosseum/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (target_player_id)] = (object) target_player_id,
      [nameof (target_player_index)] = (object) target_player_index,
      [nameof (total_combat)] = (object) total_combat
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumStart) null);
      }
      else
        callback(new WebAPI.Response.ColosseumStart(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ColosseumTutorialBoot> ColosseumTutorialBoot(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ColosseumTutorialBoot>((Func<Promise<WebAPI.Response.ColosseumTutorialBoot>, IEnumerator>) (promise => WebAPI.LoadColosseumTutorialBoot(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadColosseumTutorialBoot(
    Promise<WebAPI.Response.ColosseumTutorialBoot> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadColosseumTutorialBoot\u003Ec__Iterator70()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalColosseumTutorialBoot(
    Action<WebAPI.Response.ColosseumTutorialBoot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/colosseum/tutorial/boot", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumTutorialBoot) null);
      }
      else
        callback(new WebAPI.Response.ColosseumTutorialBoot(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ColosseumTutorialFinish> ColosseumTutorialFinish(
    string arena_transaction_id,
    string battle_log,
    int deck_number,
    int deck_type_id,
    bool is_win,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ColosseumTutorialFinish>((Func<Promise<WebAPI.Response.ColosseumTutorialFinish>, IEnumerator>) (promise => WebAPI.LoadColosseumTutorialFinish(promise, arena_transaction_id, battle_log, deck_number, deck_type_id, is_win, total_combat, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadColosseumTutorialFinish(
    Promise<WebAPI.Response.ColosseumTutorialFinish> promise,
    string arena_transaction_id,
    string battle_log,
    int deck_number,
    int deck_type_id,
    bool is_win,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadColosseumTutorialFinish\u003Ec__Iterator71()
    {
      arena_transaction_id = arena_transaction_id,
      battle_log = battle_log,
      deck_number = deck_number,
      deck_type_id = deck_type_id,
      is_win = is_win,
      total_combat = total_combat,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Earena_transaction_id = arena_transaction_id,
      \u003C\u0024\u003Ebattle_log = battle_log,
      \u003C\u0024\u003Edeck_number = deck_number,
      \u003C\u0024\u003Edeck_type_id = deck_type_id,
      \u003C\u0024\u003Eis_win = is_win,
      \u003C\u0024\u003Etotal_combat = total_combat,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalColosseumTutorialFinish(
    string arena_transaction_id,
    string battle_log,
    int deck_number,
    int deck_type_id,
    bool is_win,
    int total_combat,
    Action<WebAPI.Response.ColosseumTutorialFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/colosseum/tutorial/finish", new Dictionary<string, object>()
    {
      [nameof (arena_transaction_id)] = (object) arena_transaction_id,
      [nameof (battle_log)] = (object) battle_log,
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (is_win)] = (object) is_win,
      [nameof (total_combat)] = (object) total_combat
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumTutorialFinish) null);
      }
      else
        callback(new WebAPI.Response.ColosseumTutorialFinish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ColosseumTutorialForceClose> ColosseumTutorialForceClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ColosseumTutorialForceClose>((Func<Promise<WebAPI.Response.ColosseumTutorialForceClose>, IEnumerator>) (promise => WebAPI.LoadColosseumTutorialForceClose(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadColosseumTutorialForceClose(
    Promise<WebAPI.Response.ColosseumTutorialForceClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadColosseumTutorialForceClose\u003Ec__Iterator72()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalColosseumTutorialForceClose(
    Action<WebAPI.Response.ColosseumTutorialForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/colosseum/tutorial/force-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumTutorialForceClose) null);
      }
      else
        callback(new WebAPI.Response.ColosseumTutorialForceClose(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ColosseumTutorialResume> ColosseumTutorialResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ColosseumTutorialResume>((Func<Promise<WebAPI.Response.ColosseumTutorialResume>, IEnumerator>) (promise => WebAPI.LoadColosseumTutorialResume(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadColosseumTutorialResume(
    Promise<WebAPI.Response.ColosseumTutorialResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadColosseumTutorialResume\u003Ec__Iterator73()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalColosseumTutorialResume(
    Action<WebAPI.Response.ColosseumTutorialResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/colosseum/tutorial/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumTutorialResume) null);
      }
      else
        callback(new WebAPI.Response.ColosseumTutorialResume(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ColosseumTutorialStart> ColosseumTutorialStart(
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ColosseumTutorialStart>((Func<Promise<WebAPI.Response.ColosseumTutorialStart>, IEnumerator>) (promise => WebAPI.LoadColosseumTutorialStart(promise, deck_number, deck_type_id, target_player_id, target_player_index, total_combat, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadColosseumTutorialStart(
    Promise<WebAPI.Response.ColosseumTutorialStart> promise,
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadColosseumTutorialStart\u003Ec__Iterator74()
    {
      deck_number = deck_number,
      deck_type_id = deck_type_id,
      target_player_id = target_player_id,
      target_player_index = target_player_index,
      total_combat = total_combat,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Edeck_number = deck_number,
      \u003C\u0024\u003Edeck_type_id = deck_type_id,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003Etarget_player_index = target_player_index,
      \u003C\u0024\u003Etotal_combat = total_combat,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalColosseumTutorialStart(
    int deck_number,
    int deck_type_id,
    string target_player_id,
    int target_player_index,
    int total_combat,
    Action<WebAPI.Response.ColosseumTutorialStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/colosseum/tutorial/start", new Dictionary<string, object>()
    {
      [nameof (deck_number)] = (object) deck_number,
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (target_player_id)] = (object) target_player_id,
      [nameof (target_player_index)] = (object) target_player_index,
      [nameof (total_combat)] = (object) total_combat
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ColosseumTutorialStart) null);
      }
      else
        callback(new WebAPI.Response.ColosseumTutorialStart(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.CrossfestaDetail> CrossfestaDetail(
    int campaign_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.CrossfestaDetail>((Func<Promise<WebAPI.Response.CrossfestaDetail>, IEnumerator>) (promise => WebAPI.LoadCrossfestaDetail(promise, campaign_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadCrossfestaDetail(
    Promise<WebAPI.Response.CrossfestaDetail> promise,
    int campaign_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadCrossfestaDetail\u003Ec__Iterator75()
    {
      campaign_id = campaign_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ecampaign_id = campaign_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalCrossfestaDetail(
    int campaign_id,
    Action<WebAPI.Response.CrossfestaDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/crossfesta/detail", new Dictionary<string, object>()
    {
      [nameof (campaign_id)] = (object) campaign_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.CrossfestaDetail) null);
      }
      else
        callback(new WebAPI.Response.CrossfestaDetail(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.CrossfestaIndex> CrossfestaIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.CrossfestaIndex>((Func<Promise<WebAPI.Response.CrossfestaIndex>, IEnumerator>) (promise => WebAPI.LoadCrossfestaIndex(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadCrossfestaIndex(
    Promise<WebAPI.Response.CrossfestaIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadCrossfestaIndex\u003Ec__Iterator76()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalCrossfestaIndex(
    Action<WebAPI.Response.CrossfestaIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/crossfesta/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.CrossfestaIndex) null);
      }
      else
        callback(new WebAPI.Response.CrossfestaIndex(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.CrossfestaSerial> CrossfestaSerial(
    int campaign_achieve_id,
    int campaign_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.CrossfestaSerial>((Func<Promise<WebAPI.Response.CrossfestaSerial>, IEnumerator>) (promise => WebAPI.LoadCrossfestaSerial(promise, campaign_achieve_id, campaign_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadCrossfestaSerial(
    Promise<WebAPI.Response.CrossfestaSerial> promise,
    int campaign_achieve_id,
    int campaign_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadCrossfestaSerial\u003Ec__Iterator77()
    {
      campaign_achieve_id = campaign_achieve_id,
      campaign_id = campaign_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ecampaign_achieve_id = campaign_achieve_id,
      \u003C\u0024\u003Ecampaign_id = campaign_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalCrossfestaSerial(
    int campaign_achieve_id,
    int campaign_id,
    Action<WebAPI.Response.CrossfestaSerial> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/crossfesta/serial", new Dictionary<string, object>()
    {
      [nameof (campaign_achieve_id)] = (object) campaign_achieve_id,
      [nameof (campaign_id)] = (object) campaign_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.CrossfestaSerial) null);
      }
      else
        callback(new WebAPI.Response.CrossfestaSerial(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.DailymissionExternalLink> DailymissionExternalLink(
    int mission_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.DailymissionExternalLink>((Func<Promise<WebAPI.Response.DailymissionExternalLink>, IEnumerator>) (promise => WebAPI.LoadDailymissionExternalLink(promise, mission_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadDailymissionExternalLink(
    Promise<WebAPI.Response.DailymissionExternalLink> promise,
    int mission_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadDailymissionExternalLink\u003Ec__Iterator78()
    {
      mission_id = mission_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emission_id = mission_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalDailymissionExternalLink(
    int mission_id,
    Action<WebAPI.Response.DailymissionExternalLink> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/dailymission/external_link", new Dictionary<string, object>()
    {
      [nameof (mission_id)] = (object) mission_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DailymissionExternalLink) null);
      }
      else
        callback(new WebAPI.Response.DailymissionExternalLink(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.DailymissionIndex> DailymissionIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.DailymissionIndex>((Func<Promise<WebAPI.Response.DailymissionIndex>, IEnumerator>) (promise => WebAPI.LoadDailymissionIndex(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadDailymissionIndex(
    Promise<WebAPI.Response.DailymissionIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadDailymissionIndex\u003Ec__Iterator79()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalDailymissionIndex(
    Action<WebAPI.Response.DailymissionIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/dailymission/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DailymissionIndex) null);
      }
      else
        callback(new WebAPI.Response.DailymissionIndex(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.DailymissionReceive> DailymissionReceive(
    int mission_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.DailymissionReceive>((Func<Promise<WebAPI.Response.DailymissionReceive>, IEnumerator>) (promise => WebAPI.LoadDailymissionReceive(promise, mission_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadDailymissionReceive(
    Promise<WebAPI.Response.DailymissionReceive> promise,
    int mission_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadDailymissionReceive\u003Ec__Iterator7A()
    {
      mission_id = mission_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emission_id = mission_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalDailymissionReceive(
    int mission_id,
    Action<WebAPI.Response.DailymissionReceive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/dailymission/receive", new Dictionary<string, object>()
    {
      [nameof (mission_id)] = (object) mission_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DailymissionReceive) null);
      }
      else
        callback(new WebAPI.Response.DailymissionReceive(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.DailymissionReview> DailymissionReview(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.DailymissionReview>((Func<Promise<WebAPI.Response.DailymissionReview>, IEnumerator>) (promise => WebAPI.LoadDailymissionReview(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadDailymissionReview(
    Promise<WebAPI.Response.DailymissionReview> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadDailymissionReview\u003Ec__Iterator7B()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalDailymissionReview(
    Action<WebAPI.Response.DailymissionReview> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/dailymission/review", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DailymissionReview) null);
      }
      else
        callback(new WebAPI.Response.DailymissionReview(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.DeckEdit> DeckEdit(
    int deck_type_id,
    int number,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.DeckEdit>((Func<Promise<WebAPI.Response.DeckEdit>, IEnumerator>) (promise => WebAPI.LoadDeckEdit(promise, deck_type_id, number, player_unit_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadDeckEdit(
    Promise<WebAPI.Response.DeckEdit> promise,
    int deck_type_id,
    int number,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadDeckEdit\u003Ec__Iterator7C()
    {
      deck_type_id = deck_type_id,
      number = number,
      player_unit_ids = player_unit_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Edeck_type_id = deck_type_id,
      \u003C\u0024\u003Enumber = number,
      \u003C\u0024\u003Eplayer_unit_ids = player_unit_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalDeckEdit(
    int deck_type_id,
    int number,
    int[] player_unit_ids,
    Action<WebAPI.Response.DeckEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/deck/edit", new Dictionary<string, object>()
    {
      [nameof (deck_type_id)] = (object) deck_type_id,
      [nameof (number)] = (object) number,
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.DeckEdit) null);
      }
      else
        callback(new WebAPI.Response.DeckEdit(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.EmblemSet> EmblemSet(
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.EmblemSet>((Func<Promise<WebAPI.Response.EmblemSet>, IEnumerator>) (promise => WebAPI.LoadEmblemSet(promise, emblem_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadEmblemSet(
    Promise<WebAPI.Response.EmblemSet> promise,
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadEmblemSet\u003Ec__Iterator7D()
    {
      emblem_id = emblem_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eemblem_id = emblem_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalEmblemSet(
    int emblem_id,
    Action<WebAPI.Response.EmblemSet> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/emblem/set", new Dictionary<string, object>()
    {
      [nameof (emblem_id)] = (object) emblem_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.EmblemSet) null);
      }
      else
        callback(new WebAPI.Response.EmblemSet(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.EmblemStatus> EmblemStatus(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.EmblemStatus>((Func<Promise<WebAPI.Response.EmblemStatus>, IEnumerator>) (promise => WebAPI.LoadEmblemStatus(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadEmblemStatus(
    Promise<WebAPI.Response.EmblemStatus> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadEmblemStatus\u003Ec__Iterator7E()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalEmblemStatus(
    Action<WebAPI.Response.EmblemStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/emblem/status", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.EmblemStatus) null);
      }
      else
        callback(new WebAPI.Response.EmblemStatus(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.EventDetail> EventDetail(
    int period_id,
    int[] unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.EventDetail>((Func<Promise<WebAPI.Response.EventDetail>, IEnumerator>) (promise => WebAPI.LoadEventDetail(promise, period_id, unit_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadEventDetail(
    Promise<WebAPI.Response.EventDetail> promise,
    int period_id,
    int[] unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadEventDetail\u003Ec__Iterator7F()
    {
      period_id = period_id,
      unit_ids = unit_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eperiod_id = period_id,
      \u003C\u0024\u003Eunit_ids = unit_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalEventDetail(
    int period_id,
    int[] unit_ids,
    Action<WebAPI.Response.EventDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/event/detail", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id,
      [nameof (unit_ids)] = (object) unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.EventDetail) null);
      }
      else
        callback(new WebAPI.Response.EventDetail(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.EventTop> EventTop(
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.EventTop>((Func<Promise<WebAPI.Response.EventTop>, IEnumerator>) (promise => WebAPI.LoadEventTop(promise, period_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadEventTop(
    Promise<WebAPI.Response.EventTop> promise,
    int period_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadEventTop\u003Ec__Iterator80()
    {
      period_id = period_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eperiod_id = period_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalEventTop(
    int period_id,
    Action<WebAPI.Response.EventTop> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/event/top", new Dictionary<string, object>()
    {
      [nameof (period_id)] = (object) period_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.EventTop) null);
      }
      else
        callback(new WebAPI.Response.EventTop(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.FriendAccept> FriendAccept(
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.FriendAccept>((Func<Promise<WebAPI.Response.FriendAccept>, IEnumerator>) (promise => WebAPI.LoadFriendAccept(promise, target_player_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadFriendAccept(
    Promise<WebAPI.Response.FriendAccept> promise,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadFriendAccept\u003Ec__Iterator81()
    {
      target_player_ids = target_player_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_player_ids = target_player_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalFriendAccept(
    string[] target_player_ids,
    Action<WebAPI.Response.FriendAccept> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/friend/accept", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendAccept) null);
      }
      else
        callback(new WebAPI.Response.FriendAccept(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.FriendApply> FriendApply(
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.FriendApply>((Func<Promise<WebAPI.Response.FriendApply>, IEnumerator>) (promise => WebAPI.LoadFriendApply(promise, target_player_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadFriendApply(
    Promise<WebAPI.Response.FriendApply> promise,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadFriendApply\u003Ec__Iterator82()
    {
      target_player_ids = target_player_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_player_ids = target_player_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalFriendApply(
    string[] target_player_ids,
    Action<WebAPI.Response.FriendApply> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/friend/apply", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendApply) null);
      }
      else
        callback(new WebAPI.Response.FriendApply(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.FriendCancel> FriendCancel(
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.FriendCancel>((Func<Promise<WebAPI.Response.FriendCancel>, IEnumerator>) (promise => WebAPI.LoadFriendCancel(promise, target_player_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadFriendCancel(
    Promise<WebAPI.Response.FriendCancel> promise,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadFriendCancel\u003Ec__Iterator83()
    {
      target_player_ids = target_player_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_player_ids = target_player_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalFriendCancel(
    string[] target_player_ids,
    Action<WebAPI.Response.FriendCancel> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/friend/cancel", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendCancel) null);
      }
      else
        callback(new WebAPI.Response.FriendCancel(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.FriendDetail> FriendDetail(
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.FriendDetail>((Func<Promise<WebAPI.Response.FriendDetail>, IEnumerator>) (promise => WebAPI.LoadFriendDetail(promise, target_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadFriendDetail(
    Promise<WebAPI.Response.FriendDetail> promise,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadFriendDetail\u003Ec__Iterator84()
    {
      target_player_id = target_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalFriendDetail(
    string target_player_id,
    Action<WebAPI.Response.FriendDetail> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/friend/detail", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendDetail) null);
      }
      else
        callback(new WebAPI.Response.FriendDetail(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.FriendFavorite> FriendFavorite(
    string[] target_player_ids,
    string[] unlock_target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.FriendFavorite>((Func<Promise<WebAPI.Response.FriendFavorite>, IEnumerator>) (promise => WebAPI.LoadFriendFavorite(promise, target_player_ids, unlock_target_player_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadFriendFavorite(
    Promise<WebAPI.Response.FriendFavorite> promise,
    string[] target_player_ids,
    string[] unlock_target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadFriendFavorite\u003Ec__Iterator85()
    {
      target_player_ids = target_player_ids,
      unlock_target_player_ids = unlock_target_player_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_player_ids = target_player_ids,
      \u003C\u0024\u003Eunlock_target_player_ids = unlock_target_player_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalFriendFavorite(
    string[] target_player_ids,
    string[] unlock_target_player_ids,
    Action<WebAPI.Response.FriendFavorite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/friend/favorite", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids,
      [nameof (unlock_target_player_ids)] = (object) unlock_target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendFavorite) null);
      }
      else
        callback(new WebAPI.Response.FriendFavorite(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.FriendFriends> FriendFriends(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.FriendFriends>((Func<Promise<WebAPI.Response.FriendFriends>, IEnumerator>) (promise => WebAPI.LoadFriendFriends(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadFriendFriends(
    Promise<WebAPI.Response.FriendFriends> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadFriendFriends\u003Ec__Iterator86()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalFriendFriends(
    Action<WebAPI.Response.FriendFriends> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/friend/friends", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendFriends) null);
      }
      else
        callback(new WebAPI.Response.FriendFriends(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.FriendReject> FriendReject(
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.FriendReject>((Func<Promise<WebAPI.Response.FriendReject>, IEnumerator>) (promise => WebAPI.LoadFriendReject(promise, target_player_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadFriendReject(
    Promise<WebAPI.Response.FriendReject> promise,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadFriendReject\u003Ec__Iterator87()
    {
      target_player_ids = target_player_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_player_ids = target_player_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalFriendReject(
    string[] target_player_ids,
    Action<WebAPI.Response.FriendReject> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/friend/reject", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendReject) null);
      }
      else
        callback(new WebAPI.Response.FriendReject(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.FriendRemove> FriendRemove(
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.FriendRemove>((Func<Promise<WebAPI.Response.FriendRemove>, IEnumerator>) (promise => WebAPI.LoadFriendRemove(promise, target_player_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadFriendRemove(
    Promise<WebAPI.Response.FriendRemove> promise,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadFriendRemove\u003Ec__Iterator88()
    {
      target_player_ids = target_player_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_player_ids = target_player_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalFriendRemove(
    string[] target_player_ids,
    Action<WebAPI.Response.FriendRemove> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/friend/remove", new Dictionary<string, object>()
    {
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendRemove) null);
      }
      else
        callback(new WebAPI.Response.FriendRemove(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.FriendStatus> FriendStatus(
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.FriendStatus>((Func<Promise<WebAPI.Response.FriendStatus>, IEnumerator>) (promise => WebAPI.LoadFriendStatus(promise, target_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadFriendStatus(
    Promise<WebAPI.Response.FriendStatus> promise,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadFriendStatus\u003Ec__Iterator89()
    {
      target_player_id = target_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalFriendStatus(
    string target_player_id,
    Action<WebAPI.Response.FriendStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/friend/status", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.FriendStatus) null);
      }
      else
        callback(new WebAPI.Response.FriendStatus(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.Gacha> Gacha(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.Gacha>((Func<Promise<WebAPI.Response.Gacha>, IEnumerator>) (promise => WebAPI.LoadGacha(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGacha(
    Promise<WebAPI.Response.Gacha> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGacha\u003Ec__Iterator8A()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGacha(
    Action<WebAPI.Response.Gacha> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/gacha", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Gacha) null);
      }
      else
        callback(new WebAPI.Response.Gacha(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG001ChargeMultiPay> GachaG001ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG001ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG001ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG001ChargeMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG001ChargeMultiPay(
    Promise<WebAPI.Response.GachaG001ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG001ChargeMultiPay\u003Ec__Iterator8B()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG001ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG001ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g001_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG001ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG001ChargeMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG001ChargePay> GachaG001ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG001ChargePay>((Func<Promise<WebAPI.Response.GachaG001ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG001ChargePay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG001ChargePay(
    Promise<WebAPI.Response.GachaG001ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG001ChargePay\u003Ec__Iterator8C()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG001ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG001ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g001_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG001ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG001ChargePay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG002FriendpointPay> GachaG002FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG002FriendpointPay>((Func<Promise<WebAPI.Response.GachaG002FriendpointPay>, IEnumerator>) (promise => WebAPI.LoadGachaG002FriendpointPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG002FriendpointPay(
    Promise<WebAPI.Response.GachaG002FriendpointPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG002FriendpointPay\u003Ec__Iterator8D()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG002FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG002FriendpointPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g002_friendpoint/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG002FriendpointPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG002FriendpointPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG003ChargeMultiPay> GachaG003ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG003ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG003ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG003ChargeMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG003ChargeMultiPay(
    Promise<WebAPI.Response.GachaG003ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG003ChargeMultiPay\u003Ec__Iterator8E()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG003ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG003ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g003_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG003ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG003ChargeMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG003ChargePay> GachaG003ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG003ChargePay>((Func<Promise<WebAPI.Response.GachaG003ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG003ChargePay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG003ChargePay(
    Promise<WebAPI.Response.GachaG003ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG003ChargePay\u003Ec__Iterator8F()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG003ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG003ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g003_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG003ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG003ChargePay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG004TicketMultiPay> GachaG004TicketMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG004TicketMultiPay>((Func<Promise<WebAPI.Response.GachaG004TicketMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG004TicketMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG004TicketMultiPay(
    Promise<WebAPI.Response.GachaG004TicketMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG004TicketMultiPay\u003Ec__Iterator90()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG004TicketMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG004TicketMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g004_ticket/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG004TicketMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG004TicketMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG004TicketPay> GachaG004TicketPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG004TicketPay>((Func<Promise<WebAPI.Response.GachaG004TicketPay>, IEnumerator>) (promise => WebAPI.LoadGachaG004TicketPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG004TicketPay(
    Promise<WebAPI.Response.GachaG004TicketPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG004TicketPay\u003Ec__Iterator91()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG004TicketPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG004TicketPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g004_ticket/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG004TicketPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG004TicketPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG005NewbieMultiPay> GachaG005NewbieMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG005NewbieMultiPay>((Func<Promise<WebAPI.Response.GachaG005NewbieMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG005NewbieMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG005NewbieMultiPay(
    Promise<WebAPI.Response.GachaG005NewbieMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG005NewbieMultiPay\u003Ec__Iterator92()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG005NewbieMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG005NewbieMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g005_newbie/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG005NewbieMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG005NewbieMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG005NewbiePay> GachaG005NewbiePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG005NewbiePay>((Func<Promise<WebAPI.Response.GachaG005NewbiePay>, IEnumerator>) (promise => WebAPI.LoadGachaG005NewbiePay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG005NewbiePay(
    Promise<WebAPI.Response.GachaG005NewbiePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG005NewbiePay\u003Ec__Iterator93()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG005NewbiePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG005NewbiePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g005_newbie/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG005NewbiePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG005NewbiePay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG006GiftMultiPay> GachaG006GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG006GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG006GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG006GiftMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG006GiftMultiPay(
    Promise<WebAPI.Response.GachaG006GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG006GiftMultiPay\u003Ec__Iterator94()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG006GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG006GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g006_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG006GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG006GiftMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG006GiftPay> GachaG006GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG006GiftPay>((Func<Promise<WebAPI.Response.GachaG006GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG006GiftPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG006GiftPay(
    Promise<WebAPI.Response.GachaG006GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG006GiftPay\u003Ec__Iterator95()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG006GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG006GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g006_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG006GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG006GiftPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG007PanelMultiPay> GachaG007PanelMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG007PanelMultiPay>((Func<Promise<WebAPI.Response.GachaG007PanelMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG007PanelMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG007PanelMultiPay(
    Promise<WebAPI.Response.GachaG007PanelMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG007PanelMultiPay\u003Ec__Iterator96()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG007PanelMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG007PanelMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g007_panel/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG007PanelMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG007PanelMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG007PanelPanelInfo> GachaG007PanelPanelInfo(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG007PanelPanelInfo>((Func<Promise<WebAPI.Response.GachaG007PanelPanelInfo>, IEnumerator>) (promise => WebAPI.LoadGachaG007PanelPanelInfo(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG007PanelPanelInfo(
    Promise<WebAPI.Response.GachaG007PanelPanelInfo> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG007PanelPanelInfo\u003Ec__Iterator97()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG007PanelPanelInfo(
    Action<WebAPI.Response.GachaG007PanelPanelInfo> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/gacha/g007_panel/panel/info", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG007PanelPanelInfo) null);
      }
      else
        callback(new WebAPI.Response.GachaG007PanelPanelInfo(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG007PanelPanelReset> GachaG007PanelPanelReset(
    int sheet_series_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG007PanelPanelReset>((Func<Promise<WebAPI.Response.GachaG007PanelPanelReset>, IEnumerator>) (promise => WebAPI.LoadGachaG007PanelPanelReset(promise, sheet_series_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG007PanelPanelReset(
    Promise<WebAPI.Response.GachaG007PanelPanelReset> promise,
    int sheet_series_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG007PanelPanelReset\u003Ec__Iterator98()
    {
      sheet_series_id = sheet_series_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Esheet_series_id = sheet_series_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG007PanelPanelReset(
    int sheet_series_id,
    Action<WebAPI.Response.GachaG007PanelPanelReset> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g007_panel/panel/reset", new Dictionary<string, object>()
    {
      [nameof (sheet_series_id)] = (object) sheet_series_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG007PanelPanelReset) null);
      }
      else
        callback(new WebAPI.Response.GachaG007PanelPanelReset(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG007PanelPay> GachaG007PanelPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG007PanelPay>((Func<Promise<WebAPI.Response.GachaG007PanelPay>, IEnumerator>) (promise => WebAPI.LoadGachaG007PanelPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG007PanelPay(
    Promise<WebAPI.Response.GachaG007PanelPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG007PanelPay\u003Ec__Iterator99()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG007PanelPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG007PanelPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g007_panel/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG007PanelPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG007PanelPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG008GiftMultiPay> GachaG008GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG008GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG008GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG008GiftMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG008GiftMultiPay(
    Promise<WebAPI.Response.GachaG008GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG008GiftMultiPay\u003Ec__Iterator9A()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG008GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG008GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g008_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG008GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG008GiftMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG008GiftPay> GachaG008GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG008GiftPay>((Func<Promise<WebAPI.Response.GachaG008GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG008GiftPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG008GiftPay(
    Promise<WebAPI.Response.GachaG008GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG008GiftPay\u003Ec__Iterator9B()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG008GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG008GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g008_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG008GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG008GiftPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG009StatusupMultiPay> GachaG009StatusupMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG009StatusupMultiPay>((Func<Promise<WebAPI.Response.GachaG009StatusupMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG009StatusupMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG009StatusupMultiPay(
    Promise<WebAPI.Response.GachaG009StatusupMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG009StatusupMultiPay\u003Ec__Iterator9C()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG009StatusupMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG009StatusupMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g009_statusup/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG009StatusupMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG009StatusupMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG009StatusupPay> GachaG009StatusupPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG009StatusupPay>((Func<Promise<WebAPI.Response.GachaG009StatusupPay>, IEnumerator>) (promise => WebAPI.LoadGachaG009StatusupPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG009StatusupPay(
    Promise<WebAPI.Response.GachaG009StatusupPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG009StatusupPay\u003Ec__Iterator9D()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG009StatusupPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG009StatusupPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g009_statusup/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG009StatusupPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG009StatusupPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG010ChargeMultiPay> GachaG010ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG010ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG010ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG010ChargeMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG010ChargeMultiPay(
    Promise<WebAPI.Response.GachaG010ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG010ChargeMultiPay\u003Ec__Iterator9E()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG010ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG010ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g010_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG010ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG010ChargeMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG010ChargePay> GachaG010ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG010ChargePay>((Func<Promise<WebAPI.Response.GachaG010ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG010ChargePay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG010ChargePay(
    Promise<WebAPI.Response.GachaG010ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG010ChargePay\u003Ec__Iterator9F()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG010ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG010ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g010_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG010ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG010ChargePay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG011GiftMultiPay> GachaG011GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG011GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG011GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG011GiftMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG011GiftMultiPay(
    Promise<WebAPI.Response.GachaG011GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG011GiftMultiPay\u003Ec__IteratorA0()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG011GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG011GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g011_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG011GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG011GiftMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG011GiftPay> GachaG011GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG011GiftPay>((Func<Promise<WebAPI.Response.GachaG011GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG011GiftPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG011GiftPay(
    Promise<WebAPI.Response.GachaG011GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG011GiftPay\u003Ec__IteratorA1()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG011GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG011GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g011_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG011GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG011GiftPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG012FriendpointPay> GachaG012FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG012FriendpointPay>((Func<Promise<WebAPI.Response.GachaG012FriendpointPay>, IEnumerator>) (promise => WebAPI.LoadGachaG012FriendpointPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG012FriendpointPay(
    Promise<WebAPI.Response.GachaG012FriendpointPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG012FriendpointPay\u003Ec__IteratorA2()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG012FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG012FriendpointPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g012_friendpoint/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG012FriendpointPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG012FriendpointPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG013FriendpointPay> GachaG013FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG013FriendpointPay>((Func<Promise<WebAPI.Response.GachaG013FriendpointPay>, IEnumerator>) (promise => WebAPI.LoadGachaG013FriendpointPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG013FriendpointPay(
    Promise<WebAPI.Response.GachaG013FriendpointPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG013FriendpointPay\u003Ec__IteratorA3()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG013FriendpointPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG013FriendpointPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g013_friendpoint/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG013FriendpointPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG013FriendpointPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG014ChargeMultiPay> GachaG014ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG014ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG014ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG014ChargeMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG014ChargeMultiPay(
    Promise<WebAPI.Response.GachaG014ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG014ChargeMultiPay\u003Ec__IteratorA4()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG014ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG014ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g014_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG014ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG014ChargeMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG014ChargePay> GachaG014ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG014ChargePay>((Func<Promise<WebAPI.Response.GachaG014ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG014ChargePay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG014ChargePay(
    Promise<WebAPI.Response.GachaG014ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG014ChargePay\u003Ec__IteratorA5()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG014ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG014ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g014_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG014ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG014ChargePay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG015ChargeMultiPay> GachaG015ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG015ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG015ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG015ChargeMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG015ChargeMultiPay(
    Promise<WebAPI.Response.GachaG015ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG015ChargeMultiPay\u003Ec__IteratorA6()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG015ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG015ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g015_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG015ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG015ChargeMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG015ChargePay> GachaG015ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG015ChargePay>((Func<Promise<WebAPI.Response.GachaG015ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG015ChargePay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG015ChargePay(
    Promise<WebAPI.Response.GachaG015ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG015ChargePay\u003Ec__IteratorA7()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG015ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG015ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g015_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG015ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG015ChargePay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG016ChargeMultiPay> GachaG016ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG016ChargeMultiPay>((Func<Promise<WebAPI.Response.GachaG016ChargeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG016ChargeMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG016ChargeMultiPay(
    Promise<WebAPI.Response.GachaG016ChargeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG016ChargeMultiPay\u003Ec__IteratorA8()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG016ChargeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG016ChargeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g016_charge/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG016ChargeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG016ChargeMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG016ChargePay> GachaG016ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG016ChargePay>((Func<Promise<WebAPI.Response.GachaG016ChargePay>, IEnumerator>) (promise => WebAPI.LoadGachaG016ChargePay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG016ChargePay(
    Promise<WebAPI.Response.GachaG016ChargePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG016ChargePay\u003Ec__IteratorA9()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG016ChargePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG016ChargePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g016_charge/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG016ChargePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG016ChargePay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG017GiftMultiPay> GachaG017GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG017GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG017GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG017GiftMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG017GiftMultiPay(
    Promise<WebAPI.Response.GachaG017GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG017GiftMultiPay\u003Ec__IteratorAA()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG017GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG017GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g017_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG017GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG017GiftMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG017GiftPay> GachaG017GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG017GiftPay>((Func<Promise<WebAPI.Response.GachaG017GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG017GiftPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG017GiftPay(
    Promise<WebAPI.Response.GachaG017GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG017GiftPay\u003Ec__IteratorAB()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG017GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG017GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g017_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG017GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG017GiftPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG018GiftMultiPay> GachaG018GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG018GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG018GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG018GiftMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG018GiftMultiPay(
    Promise<WebAPI.Response.GachaG018GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG018GiftMultiPay\u003Ec__IteratorAC()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG018GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG018GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g018_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG018GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG018GiftMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG018GiftPay> GachaG018GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG018GiftPay>((Func<Promise<WebAPI.Response.GachaG018GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG018GiftPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG018GiftPay(
    Promise<WebAPI.Response.GachaG018GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG018GiftPay\u003Ec__IteratorAD()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG018GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG018GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g018_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG018GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG018GiftPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG019GiftMultiPay> GachaG019GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG019GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG019GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG019GiftMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG019GiftMultiPay(
    Promise<WebAPI.Response.GachaG019GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG019GiftMultiPay\u003Ec__IteratorAE()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG019GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG019GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g019_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG019GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG019GiftMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG019GiftPay> GachaG019GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG019GiftPay>((Func<Promise<WebAPI.Response.GachaG019GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG019GiftPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG019GiftPay(
    Promise<WebAPI.Response.GachaG019GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG019GiftPay\u003Ec__IteratorAF()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG019GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG019GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g019_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG019GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG019GiftPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG020GiftMultiPay> GachaG020GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG020GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG020GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG020GiftMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG020GiftMultiPay(
    Promise<WebAPI.Response.GachaG020GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG020GiftMultiPay\u003Ec__IteratorB0()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG020GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG020GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g020_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG020GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG020GiftMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG020GiftPay> GachaG020GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG020GiftPay>((Func<Promise<WebAPI.Response.GachaG020GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG020GiftPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG020GiftPay(
    Promise<WebAPI.Response.GachaG020GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG020GiftPay\u003Ec__IteratorB1()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG020GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG020GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g020_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG020GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG020GiftPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG021FreeMultiPay> GachaG021FreeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG021FreeMultiPay>((Func<Promise<WebAPI.Response.GachaG021FreeMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG021FreeMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG021FreeMultiPay(
    Promise<WebAPI.Response.GachaG021FreeMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG021FreeMultiPay\u003Ec__IteratorB2()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG021FreeMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG021FreeMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g021_free/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG021FreeMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG021FreeMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG021FreePay> GachaG021FreePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG021FreePay>((Func<Promise<WebAPI.Response.GachaG021FreePay>, IEnumerator>) (promise => WebAPI.LoadGachaG021FreePay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG021FreePay(
    Promise<WebAPI.Response.GachaG021FreePay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG021FreePay\u003Ec__IteratorB3()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG021FreePay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG021FreePay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g021_free/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG021FreePay) null);
      }
      else
        callback(new WebAPI.Response.GachaG021FreePay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG022GiftMultiPay> GachaG022GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG022GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG022GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG022GiftMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG022GiftMultiPay(
    Promise<WebAPI.Response.GachaG022GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG022GiftMultiPay\u003Ec__IteratorB4()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG022GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG022GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g022_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG022GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG022GiftMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG022GiftPay> GachaG022GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG022GiftPay>((Func<Promise<WebAPI.Response.GachaG022GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG022GiftPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG022GiftPay(
    Promise<WebAPI.Response.GachaG022GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG022GiftPay\u003Ec__IteratorB5()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG022GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG022GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g022_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG022GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG022GiftPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG023GiftMultiPay> GachaG023GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG023GiftMultiPay>((Func<Promise<WebAPI.Response.GachaG023GiftMultiPay>, IEnumerator>) (promise => WebAPI.LoadGachaG023GiftMultiPay(promise, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG023GiftMultiPay(
    Promise<WebAPI.Response.GachaG023GiftMultiPay> promise,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG023GiftMultiPay\u003Ec__IteratorB6()
    {
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG023GiftMultiPay(
    int gacha_id,
    Action<WebAPI.Response.GachaG023GiftMultiPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g023_gift/multi/pay", new Dictionary<string, object>()
    {
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG023GiftMultiPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG023GiftMultiPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GachaG023GiftPay> GachaG023GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GachaG023GiftPay>((Func<Promise<WebAPI.Response.GachaG023GiftPay>, IEnumerator>) (promise => WebAPI.LoadGachaG023GiftPay(promise, execute_count, gacha_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGachaG023GiftPay(
    Promise<WebAPI.Response.GachaG023GiftPay> promise,
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGachaG023GiftPay\u003Ec__IteratorB7()
    {
      execute_count = execute_count,
      gacha_id = gacha_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eexecute_count = execute_count,
      \u003C\u0024\u003Egacha_id = gacha_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGachaG023GiftPay(
    int execute_count,
    int gacha_id,
    Action<WebAPI.Response.GachaG023GiftPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gacha/g023_gift/pay", new Dictionary<string, object>()
    {
      [nameof (execute_count)] = (object) execute_count,
      [nameof (gacha_id)] = (object) gacha_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GachaG023GiftPay) null);
      }
      else
        callback(new WebAPI.Response.GachaG023GiftPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.Gamekit2All> Gamekit2All(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.Gamekit2All>((Func<Promise<WebAPI.Response.Gamekit2All>, IEnumerator>) (promise => WebAPI.LoadGamekit2All(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGamekit2All(
    Promise<WebAPI.Response.Gamekit2All> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGamekit2All\u003Ec__IteratorB8()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGamekit2All(
    Action<WebAPI.Response.Gamekit2All> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/gamekit2/all", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Gamekit2All) null);
      }
      else
        callback(new WebAPI.Response.Gamekit2All(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GamekitAll> GamekitAll(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GamekitAll>((Func<Promise<WebAPI.Response.GamekitAll>, IEnumerator>) (promise => WebAPI.LoadGamekitAll(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGamekitAll(
    Promise<WebAPI.Response.GamekitAll> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGamekitAll\u003Ec__IteratorB9()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGamekitAll(
    Action<WebAPI.Response.GamekitAll> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/gamekit/all", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GamekitAll) null);
      }
      else
        callback(new WebAPI.Response.GamekitAll(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildApplicantsAccept> GuildApplicantsAccept(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildApplicantsAccept>((Func<Promise<WebAPI.Response.GuildApplicantsAccept>, IEnumerator>) (promise => WebAPI.LoadGuildApplicantsAccept(promise, mock, target_player_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildApplicantsAccept(
    Promise<WebAPI.Response.GuildApplicantsAccept> promise,
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildApplicantsAccept\u003Ec__IteratorBA()
    {
      mock = mock,
      target_player_ids = target_player_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003Etarget_player_ids = target_player_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildApplicantsAccept(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.GuildApplicantsAccept> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/applicants/accept", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildApplicantsAccept) null);
      }
      else
        callback(new WebAPI.Response.GuildApplicantsAccept(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildApplicantsCancel> GuildApplicantsCancel(
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildApplicantsCancel>((Func<Promise<WebAPI.Response.GuildApplicantsCancel>, IEnumerator>) (promise => WebAPI.LoadGuildApplicantsCancel(promise, target_guild_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildApplicantsCancel(
    Promise<WebAPI.Response.GuildApplicantsCancel> promise,
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildApplicantsCancel\u003Ec__IteratorBB()
    {
      target_guild_id = target_guild_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_guild_id = target_guild_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildApplicantsCancel(
    string target_guild_id,
    Action<WebAPI.Response.GuildApplicantsCancel> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/applicants/cancel", new Dictionary<string, object>()
    {
      [nameof (target_guild_id)] = (object) target_guild_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildApplicantsCancel) null);
      }
      else
        callback(new WebAPI.Response.GuildApplicantsCancel(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildApplicantsReject> GuildApplicantsReject(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildApplicantsReject>((Func<Promise<WebAPI.Response.GuildApplicantsReject>, IEnumerator>) (promise => WebAPI.LoadGuildApplicantsReject(promise, mock, target_player_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildApplicantsReject(
    Promise<WebAPI.Response.GuildApplicantsReject> promise,
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildApplicantsReject\u003Ec__IteratorBC()
    {
      mock = mock,
      target_player_ids = target_player_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003Etarget_player_ids = target_player_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildApplicantsReject(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.GuildApplicantsReject> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/applicants/reject", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildApplicantsReject) null);
      }
      else
        callback(new WebAPI.Response.GuildApplicantsReject(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildApplicantsSend> GuildApplicantsSend(
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildApplicantsSend>((Func<Promise<WebAPI.Response.GuildApplicantsSend>, IEnumerator>) (promise => WebAPI.LoadGuildApplicantsSend(promise, mock, target_guild_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildApplicantsSend(
    Promise<WebAPI.Response.GuildApplicantsSend> promise,
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildApplicantsSend\u003Ec__IteratorBD()
    {
      mock = mock,
      target_guild_id = target_guild_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003Etarget_guild_id = target_guild_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildApplicantsSend(
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.GuildApplicantsSend> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/applicants/send", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_guild_id)] = (object) target_guild_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildApplicantsSend) null);
      }
      else
        callback(new WebAPI.Response.GuildApplicantsSend(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildBankContact> GuildBankContact(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildBankContact>((Func<Promise<WebAPI.Response.GuildBankContact>, IEnumerator>) (promise => WebAPI.LoadGuildBankContact(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildBankContact(
    Promise<WebAPI.Response.GuildBankContact> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildBankContact\u003Ec__IteratorBE()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildBankContact(
    Action<WebAPI.Response.GuildBankContact> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/guild/bank/contact", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildBankContact) null);
      }
      else
        callback(new WebAPI.Response.GuildBankContact(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildBankInvest> GuildBankInvest(
    int rate_id,
    int scale,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildBankInvest>((Func<Promise<WebAPI.Response.GuildBankInvest>, IEnumerator>) (promise => WebAPI.LoadGuildBankInvest(promise, rate_id, scale, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildBankInvest(
    Promise<WebAPI.Response.GuildBankInvest> promise,
    int rate_id,
    int scale,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildBankInvest\u003Ec__IteratorBF()
    {
      rate_id = rate_id,
      scale = scale,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Erate_id = rate_id,
      \u003C\u0024\u003Escale = scale,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildBankInvest(
    int rate_id,
    int scale,
    Action<WebAPI.Response.GuildBankInvest> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/bank/invest", new Dictionary<string, object>()
    {
      [nameof (rate_id)] = (object) rate_id,
      [nameof (scale)] = (object) scale
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildBankInvest) null);
      }
      else
        callback(new WebAPI.Response.GuildBankInvest(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildBaseInvest> GuildBaseInvest(
    int base_id,
    int from_rank,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildBaseInvest>((Func<Promise<WebAPI.Response.GuildBaseInvest>, IEnumerator>) (promise => WebAPI.LoadGuildBaseInvest(promise, base_id, from_rank, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildBaseInvest(
    Promise<WebAPI.Response.GuildBaseInvest> promise,
    int base_id,
    int from_rank,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildBaseInvest\u003Ec__IteratorC0()
    {
      base_id = base_id,
      from_rank = from_rank,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebase_id = base_id,
      \u003C\u0024\u003Efrom_rank = from_rank,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildBaseInvest(
    int base_id,
    int from_rank,
    Action<WebAPI.Response.GuildBaseInvest> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/base/invest", new Dictionary<string, object>()
    {
      [nameof (base_id)] = (object) base_id,
      [nameof (from_rank)] = (object) from_rank
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildBaseInvest) null);
      }
      else
        callback(new WebAPI.Response.GuildBaseInvest(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildBroadcastMessage> GuildBroadcastMessage(
    string body,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildBroadcastMessage>((Func<Promise<WebAPI.Response.GuildBroadcastMessage>, IEnumerator>) (promise => WebAPI.LoadGuildBroadcastMessage(promise, body, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildBroadcastMessage(
    Promise<WebAPI.Response.GuildBroadcastMessage> promise,
    string body,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildBroadcastMessage\u003Ec__IteratorC1()
    {
      body = body,
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebody = body,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildBroadcastMessage(
    string body,
    bool mock,
    Action<WebAPI.Response.GuildBroadcastMessage> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/broadcast_message", new Dictionary<string, object>()
    {
      [nameof (body)] = (object) body,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildBroadcastMessage) null);
      }
      else
        callback(new WebAPI.Response.GuildBroadcastMessage(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildDissolute> GuildDissolute(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildDissolute>((Func<Promise<WebAPI.Response.GuildDissolute>, IEnumerator>) (promise => WebAPI.LoadGuildDissolute(promise, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildDissolute(
    Promise<WebAPI.Response.GuildDissolute> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildDissolute\u003Ec__IteratorC2()
    {
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildDissolute(
    bool mock,
    Action<WebAPI.Response.GuildDissolute> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/dissolute", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildDissolute) null);
      }
      else
        callback(new WebAPI.Response.GuildDissolute(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildEmblemIndex> GuildEmblemIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildEmblemIndex>((Func<Promise<WebAPI.Response.GuildEmblemIndex>, IEnumerator>) (promise => WebAPI.LoadGuildEmblemIndex(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildEmblemIndex(
    Promise<WebAPI.Response.GuildEmblemIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildEmblemIndex\u003Ec__IteratorC3()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildEmblemIndex(
    Action<WebAPI.Response.GuildEmblemIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/guild/emblem/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildEmblemIndex) null);
      }
      else
        callback(new WebAPI.Response.GuildEmblemIndex(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildEmblemSetting> GuildEmblemSetting(
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildEmblemSetting>((Func<Promise<WebAPI.Response.GuildEmblemSetting>, IEnumerator>) (promise => WebAPI.LoadGuildEmblemSetting(promise, emblem_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildEmblemSetting(
    Promise<WebAPI.Response.GuildEmblemSetting> promise,
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildEmblemSetting\u003Ec__IteratorC4()
    {
      emblem_id = emblem_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eemblem_id = emblem_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildEmblemSetting(
    int emblem_id,
    Action<WebAPI.Response.GuildEmblemSetting> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/emblem/setting", new Dictionary<string, object>()
    {
      [nameof (emblem_id)] = (object) emblem_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildEmblemSetting) null);
      }
      else
        callback(new WebAPI.Response.GuildEmblemSetting(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildEmblemUnsetting> GuildEmblemUnsetting(
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildEmblemUnsetting>((Func<Promise<WebAPI.Response.GuildEmblemUnsetting>, IEnumerator>) (promise => WebAPI.LoadGuildEmblemUnsetting(promise, emblem_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildEmblemUnsetting(
    Promise<WebAPI.Response.GuildEmblemUnsetting> promise,
    int emblem_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildEmblemUnsetting\u003Ec__IteratorC5()
    {
      emblem_id = emblem_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eemblem_id = emblem_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildEmblemUnsetting(
    int emblem_id,
    Action<WebAPI.Response.GuildEmblemUnsetting> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/emblem/unsetting", new Dictionary<string, object>()
    {
      [nameof (emblem_id)] = (object) emblem_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildEmblemUnsetting) null);
      }
      else
        callback(new WebAPI.Response.GuildEmblemUnsetting(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildEstablish> GuildEstablish(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildEstablish>((Func<Promise<WebAPI.Response.GuildEstablish>, IEnumerator>) (promise => WebAPI.LoadGuildEstablish(promise, approval_policy_id, atmosphere_id, auto_approval_id, guild_name, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildEstablish(
    Promise<WebAPI.Response.GuildEstablish> promise,
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildEstablish\u003Ec__IteratorC6()
    {
      approval_policy_id = approval_policy_id,
      atmosphere_id = atmosphere_id,
      auto_approval_id = auto_approval_id,
      guild_name = guild_name,
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eapproval_policy_id = approval_policy_id,
      \u003C\u0024\u003Eatmosphere_id = atmosphere_id,
      \u003C\u0024\u003Eauto_approval_id = auto_approval_id,
      \u003C\u0024\u003Eguild_name = guild_name,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildEstablish(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.GuildEstablish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/establish", new Dictionary<string, object>()
    {
      [nameof (approval_policy_id)] = (object) approval_policy_id,
      [nameof (atmosphere_id)] = (object) atmosphere_id,
      [nameof (auto_approval_id)] = (object) auto_approval_id,
      [nameof (guild_name)] = (object) guild_name,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildEstablish) null);
      }
      else
        callback(new WebAPI.Response.GuildEstablish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildFriendAffiliations> GuildFriendAffiliations(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildFriendAffiliations>((Func<Promise<WebAPI.Response.GuildFriendAffiliations>, IEnumerator>) (promise => WebAPI.LoadGuildFriendAffiliations(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildFriendAffiliations(
    Promise<WebAPI.Response.GuildFriendAffiliations> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildFriendAffiliations\u003Ec__IteratorC7()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildFriendAffiliations(
    Action<WebAPI.Response.GuildFriendAffiliations> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/guild/friend_affiliations", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildFriendAffiliations) null);
      }
      else
        callback(new WebAPI.Response.GuildFriendAffiliations(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildGiftGetWishListMaster> GuildGiftGetWishListMaster(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildGiftGetWishListMaster>((Func<Promise<WebAPI.Response.GuildGiftGetWishListMaster>, IEnumerator>) (promise => WebAPI.LoadGuildGiftGetWishListMaster(promise, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildGiftGetWishListMaster(
    Promise<WebAPI.Response.GuildGiftGetWishListMaster> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildGiftGetWishListMaster\u003Ec__IteratorC8()
    {
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildGiftGetWishListMaster(
    bool mock,
    Action<WebAPI.Response.GuildGiftGetWishListMaster> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/gift/get/wish/list/master", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftGetWishListMaster) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftGetWishListMaster(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildGiftReceiveExecute> GuildGiftReceiveExecute(
    bool mock,
    string[] target_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildGiftReceiveExecute>((Func<Promise<WebAPI.Response.GuildGiftReceiveExecute>, IEnumerator>) (promise => WebAPI.LoadGuildGiftReceiveExecute(promise, mock, target_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildGiftReceiveExecute(
    Promise<WebAPI.Response.GuildGiftReceiveExecute> promise,
    bool mock,
    string[] target_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildGiftReceiveExecute\u003Ec__IteratorC9()
    {
      mock = mock,
      target_ids = target_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003Etarget_ids = target_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildGiftReceiveExecute(
    bool mock,
    string[] target_ids,
    Action<WebAPI.Response.GuildGiftReceiveExecute> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/gift/receive/execute", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_ids)] = (object) target_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftReceiveExecute) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftReceiveExecute(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildGiftReceiveList> GuildGiftReceiveList(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildGiftReceiveList>((Func<Promise<WebAPI.Response.GuildGiftReceiveList>, IEnumerator>) (promise => WebAPI.LoadGuildGiftReceiveList(promise, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildGiftReceiveList(
    Promise<WebAPI.Response.GuildGiftReceiveList> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildGiftReceiveList\u003Ec__IteratorCA()
    {
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildGiftReceiveList(
    bool mock,
    Action<WebAPI.Response.GuildGiftReceiveList> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/gift/receive/list", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftReceiveList) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftReceiveList(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildGiftSendExecute> GuildGiftSendExecute(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildGiftSendExecute>((Func<Promise<WebAPI.Response.GuildGiftSendExecute>, IEnumerator>) (promise => WebAPI.LoadGuildGiftSendExecute(promise, mock, target_player_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildGiftSendExecute(
    Promise<WebAPI.Response.GuildGiftSendExecute> promise,
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildGiftSendExecute\u003Ec__IteratorCB()
    {
      mock = mock,
      target_player_ids = target_player_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003Etarget_player_ids = target_player_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildGiftSendExecute(
    bool mock,
    string[] target_player_ids,
    Action<WebAPI.Response.GuildGiftSendExecute> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/gift/send/execute", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_ids)] = (object) target_player_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftSendExecute) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftSendExecute(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildGiftSendList> GuildGiftSendList(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildGiftSendList>((Func<Promise<WebAPI.Response.GuildGiftSendList>, IEnumerator>) (promise => WebAPI.LoadGuildGiftSendList(promise, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildGiftSendList(
    Promise<WebAPI.Response.GuildGiftSendList> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildGiftSendList\u003Ec__IteratorCC()
    {
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildGiftSendList(
    bool mock,
    Action<WebAPI.Response.GuildGiftSendList> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/gift/send/list", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftSendList) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftSendList(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildGiftUpdateWishList> GuildGiftUpdateWishList(
    int gift_id,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildGiftUpdateWishList>((Func<Promise<WebAPI.Response.GuildGiftUpdateWishList>, IEnumerator>) (promise => WebAPI.LoadGuildGiftUpdateWishList(promise, gift_id, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildGiftUpdateWishList(
    Promise<WebAPI.Response.GuildGiftUpdateWishList> promise,
    int gift_id,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildGiftUpdateWishList\u003Ec__IteratorCD()
    {
      gift_id = gift_id,
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Egift_id = gift_id,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildGiftUpdateWishList(
    int gift_id,
    bool mock,
    Action<WebAPI.Response.GuildGiftUpdateWishList> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/gift/update/wish/list", new Dictionary<string, object>()
    {
      [nameof (gift_id)] = (object) gift_id,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildGiftUpdateWishList) null);
      }
      else
        callback(new WebAPI.Response.GuildGiftUpdateWishList(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildMasterResign> GuildMasterResign(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildMasterResign>((Func<Promise<WebAPI.Response.GuildMasterResign>, IEnumerator>) (promise => WebAPI.LoadGuildMasterResign(promise, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildMasterResign(
    Promise<WebAPI.Response.GuildMasterResign> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildMasterResign\u003Ec__IteratorCE()
    {
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildMasterResign(
    bool mock,
    Action<WebAPI.Response.GuildMasterResign> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/master/resign", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildMasterResign) null);
      }
      else
        callback(new WebAPI.Response.GuildMasterResign(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildMasterTransfer> GuildMasterTransfer(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildMasterTransfer>((Func<Promise<WebAPI.Response.GuildMasterTransfer>, IEnumerator>) (promise => WebAPI.LoadGuildMasterTransfer(promise, mock, target_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildMasterTransfer(
    Promise<WebAPI.Response.GuildMasterTransfer> promise,
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildMasterTransfer\u003Ec__IteratorCF()
    {
      mock = mock,
      target_player_id = target_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildMasterTransfer(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.GuildMasterTransfer> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/master/transfer", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildMasterTransfer) null);
      }
      else
        callback(new WebAPI.Response.GuildMasterTransfer(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildMembershipsBanish> GuildMembershipsBanish(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildMembershipsBanish>((Func<Promise<WebAPI.Response.GuildMembershipsBanish>, IEnumerator>) (promise => WebAPI.LoadGuildMembershipsBanish(promise, mock, target_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildMembershipsBanish(
    Promise<WebAPI.Response.GuildMembershipsBanish> promise,
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildMembershipsBanish\u003Ec__IteratorD0()
    {
      mock = mock,
      target_player_id = target_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildMembershipsBanish(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.GuildMembershipsBanish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/memberships/banish", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildMembershipsBanish) null);
      }
      else
        callback(new WebAPI.Response.GuildMembershipsBanish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildMembershipsLeave> GuildMembershipsLeave(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildMembershipsLeave>((Func<Promise<WebAPI.Response.GuildMembershipsLeave>, IEnumerator>) (promise => WebAPI.LoadGuildMembershipsLeave(promise, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildMembershipsLeave(
    Promise<WebAPI.Response.GuildMembershipsLeave> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildMembershipsLeave\u003Ec__IteratorD1()
    {
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildMembershipsLeave(
    bool mock,
    Action<WebAPI.Response.GuildMembershipsLeave> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/memberships/leave", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildMembershipsLeave) null);
      }
      else
        callback(new WebAPI.Response.GuildMembershipsLeave(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildPrivateMessage> GuildPrivateMessage(
    string body,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildPrivateMessage>((Func<Promise<WebAPI.Response.GuildPrivateMessage>, IEnumerator>) (promise => WebAPI.LoadGuildPrivateMessage(promise, body, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildPrivateMessage(
    Promise<WebAPI.Response.GuildPrivateMessage> promise,
    string body,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildPrivateMessage\u003Ec__IteratorD2()
    {
      body = body,
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebody = body,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildPrivateMessage(
    string body,
    bool mock,
    Action<WebAPI.Response.GuildPrivateMessage> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/private_message", new Dictionary<string, object>()
    {
      [nameof (body)] = (object) body,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildPrivateMessage) null);
      }
      else
        callback(new WebAPI.Response.GuildPrivateMessage(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildRecommends> GuildRecommends(
    int limit,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildRecommends>((Func<Promise<WebAPI.Response.GuildRecommends>, IEnumerator>) (promise => WebAPI.LoadGuildRecommends(promise, limit, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildRecommends(
    Promise<WebAPI.Response.GuildRecommends> promise,
    int limit,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildRecommends\u003Ec__IteratorD3()
    {
      limit = limit,
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Elimit = limit,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildRecommends(
    int limit,
    bool mock,
    Action<WebAPI.Response.GuildRecommends> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/recommends", new Dictionary<string, object>()
    {
      [nameof (limit)] = (object) limit,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildRecommends) null);
      }
      else
        callback(new WebAPI.Response.GuildRecommends(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildSearch> GuildSearch(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int availability_id,
    string guild_name,
    int limit,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildSearch>((Func<Promise<WebAPI.Response.GuildSearch>, IEnumerator>) (promise => WebAPI.LoadGuildSearch(promise, approval_policy_id, atmosphere_id, auto_approval_id, availability_id, guild_name, limit, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildSearch(
    Promise<WebAPI.Response.GuildSearch> promise,
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int availability_id,
    string guild_name,
    int limit,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildSearch\u003Ec__IteratorD4()
    {
      approval_policy_id = approval_policy_id,
      atmosphere_id = atmosphere_id,
      auto_approval_id = auto_approval_id,
      availability_id = availability_id,
      guild_name = guild_name,
      limit = limit,
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eapproval_policy_id = approval_policy_id,
      \u003C\u0024\u003Eatmosphere_id = atmosphere_id,
      \u003C\u0024\u003Eauto_approval_id = auto_approval_id,
      \u003C\u0024\u003Eavailability_id = availability_id,
      \u003C\u0024\u003Eguild_name = guild_name,
      \u003C\u0024\u003Elimit = limit,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildSearch(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    int availability_id,
    string guild_name,
    int limit,
    bool mock,
    Action<WebAPI.Response.GuildSearch> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/search", new Dictionary<string, object>()
    {
      [nameof (approval_policy_id)] = (object) approval_policy_id,
      [nameof (atmosphere_id)] = (object) atmosphere_id,
      [nameof (auto_approval_id)] = (object) auto_approval_id,
      [nameof (availability_id)] = (object) availability_id,
      [nameof (guild_name)] = (object) guild_name,
      [nameof (limit)] = (object) limit,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSearch) null);
      }
      else
        callback(new WebAPI.Response.GuildSearch(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildSettings> GuildSettings(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildSettings>((Func<Promise<WebAPI.Response.GuildSettings>, IEnumerator>) (promise => WebAPI.LoadGuildSettings(promise, approval_policy_id, atmosphere_id, auto_approval_id, guild_name, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildSettings(
    Promise<WebAPI.Response.GuildSettings> promise,
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildSettings\u003Ec__IteratorD5()
    {
      approval_policy_id = approval_policy_id,
      atmosphere_id = atmosphere_id,
      auto_approval_id = auto_approval_id,
      guild_name = guild_name,
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eapproval_policy_id = approval_policy_id,
      \u003C\u0024\u003Eatmosphere_id = atmosphere_id,
      \u003C\u0024\u003Eauto_approval_id = auto_approval_id,
      \u003C\u0024\u003Eguild_name = guild_name,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildSettings(
    int approval_policy_id,
    int atmosphere_id,
    int auto_approval_id,
    string guild_name,
    bool mock,
    Action<WebAPI.Response.GuildSettings> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/settings", new Dictionary<string, object>()
    {
      [nameof (approval_policy_id)] = (object) approval_policy_id,
      [nameof (atmosphere_id)] = (object) atmosphere_id,
      [nameof (auto_approval_id)] = (object) auto_approval_id,
      [nameof (guild_name)] = (object) guild_name,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSettings) null);
      }
      else
        callback(new WebAPI.Response.GuildSettings(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildShow> GuildShow(
    string guild_id,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildShow>((Func<Promise<WebAPI.Response.GuildShow>, IEnumerator>) (promise => WebAPI.LoadGuildShow(promise, guild_id, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildShow(
    Promise<WebAPI.Response.GuildShow> promise,
    string guild_id,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildShow\u003Ec__IteratorD6()
    {
      guild_id = guild_id,
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eguild_id = guild_id,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildShow(
    string guild_id,
    bool mock,
    Action<WebAPI.Response.GuildShow> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/show", new Dictionary<string, object>()
    {
      [nameof (guild_id)] = (object) guild_id,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildShow) null);
      }
      else
        callback(new WebAPI.Response.GuildShow(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildSignal> GuildSignal(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildSignal>((Func<Promise<WebAPI.Response.GuildSignal>, IEnumerator>) (promise => WebAPI.LoadGuildSignal(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildSignal(
    Promise<WebAPI.Response.GuildSignal> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildSignal\u003Ec__IteratorD7()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildSignal(
    Action<WebAPI.Response.GuildSignal> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/guild/signal", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSignal) null);
      }
      else
        callback(new WebAPI.Response.GuildSignal(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildSubmasterAssign> GuildSubmasterAssign(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildSubmasterAssign>((Func<Promise<WebAPI.Response.GuildSubmasterAssign>, IEnumerator>) (promise => WebAPI.LoadGuildSubmasterAssign(promise, mock, target_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildSubmasterAssign(
    Promise<WebAPI.Response.GuildSubmasterAssign> promise,
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildSubmasterAssign\u003Ec__IteratorD8()
    {
      mock = mock,
      target_player_id = target_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildSubmasterAssign(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.GuildSubmasterAssign> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/submaster/assign", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSubmasterAssign) null);
      }
      else
        callback(new WebAPI.Response.GuildSubmasterAssign(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildSubmasterDismiss> GuildSubmasterDismiss(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildSubmasterDismiss>((Func<Promise<WebAPI.Response.GuildSubmasterDismiss>, IEnumerator>) (promise => WebAPI.LoadGuildSubmasterDismiss(promise, mock, target_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildSubmasterDismiss(
    Promise<WebAPI.Response.GuildSubmasterDismiss> promise,
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildSubmasterDismiss\u003Ec__IteratorD9()
    {
      mock = mock,
      target_player_id = target_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildSubmasterDismiss(
    bool mock,
    string target_player_id,
    Action<WebAPI.Response.GuildSubmasterDismiss> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/submaster/dismiss", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSubmasterDismiss) null);
      }
      else
        callback(new WebAPI.Response.GuildSubmasterDismiss(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildSubmasterResign> GuildSubmasterResign(
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildSubmasterResign>((Func<Promise<WebAPI.Response.GuildSubmasterResign>, IEnumerator>) (promise => WebAPI.LoadGuildSubmasterResign(promise, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildSubmasterResign(
    Promise<WebAPI.Response.GuildSubmasterResign> promise,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildSubmasterResign\u003Ec__IteratorDA()
    {
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildSubmasterResign(
    bool mock,
    Action<WebAPI.Response.GuildSubmasterResign> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/submaster/resign", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildSubmasterResign) null);
      }
      else
        callback(new WebAPI.Response.GuildSubmasterResign(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildTop> GuildTop(
    int membership_status_id,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildTop>((Func<Promise<WebAPI.Response.GuildTop>, IEnumerator>) (promise => WebAPI.LoadGuildTop(promise, membership_status_id, mock, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildTop(
    Promise<WebAPI.Response.GuildTop> promise,
    int membership_status_id,
    bool mock,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildTop\u003Ec__IteratorDB()
    {
      membership_status_id = membership_status_id,
      mock = mock,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emembership_status_id = membership_status_id,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildTop(
    int membership_status_id,
    bool mock,
    Action<WebAPI.Response.GuildTop> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guild/top", new Dictionary<string, object>()
    {
      [nameof (membership_status_id)] = (object) membership_status_id,
      [nameof (mock)] = (object) mock
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildTop) null);
      }
      else
        callback(new WebAPI.Response.GuildTop(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildlogAutoupdate> GuildlogAutoupdate(
    string current_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildlogAutoupdate>((Func<Promise<WebAPI.Response.GuildlogAutoupdate>, IEnumerator>) (promise => WebAPI.LoadGuildlogAutoupdate(promise, current_log_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildlogAutoupdate(
    Promise<WebAPI.Response.GuildlogAutoupdate> promise,
    string current_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildlogAutoupdate\u003Ec__IteratorDC()
    {
      current_log_id = current_log_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ecurrent_log_id = current_log_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildlogAutoupdate(
    string current_log_id,
    Action<WebAPI.Response.GuildlogAutoupdate> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guildlog/autoupdate", new Dictionary<string, object>()
    {
      [nameof (current_log_id)] = (object) current_log_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogAutoupdate) null);
      }
      else
        callback(new WebAPI.Response.GuildlogAutoupdate(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildlogMemberShowLatest> GuildlogMemberShowLatest(
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildlogMemberShowLatest>((Func<Promise<WebAPI.Response.GuildlogMemberShowLatest>, IEnumerator>) (promise => WebAPI.LoadGuildlogMemberShowLatest(promise, target_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildlogMemberShowLatest(
    Promise<WebAPI.Response.GuildlogMemberShowLatest> promise,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildlogMemberShowLatest\u003Ec__IteratorDD()
    {
      target_player_id = target_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildlogMemberShowLatest(
    string target_player_id,
    Action<WebAPI.Response.GuildlogMemberShowLatest> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guildlog/member/show/latest", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogMemberShowLatest) null);
      }
      else
        callback(new WebAPI.Response.GuildlogMemberShowLatest(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildlogMemberShowPast> GuildlogMemberShowPast(
    string oldest_log_id,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildlogMemberShowPast>((Func<Promise<WebAPI.Response.GuildlogMemberShowPast>, IEnumerator>) (promise => WebAPI.LoadGuildlogMemberShowPast(promise, oldest_log_id, target_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildlogMemberShowPast(
    Promise<WebAPI.Response.GuildlogMemberShowPast> promise,
    string oldest_log_id,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildlogMemberShowPast\u003Ec__IteratorDE()
    {
      oldest_log_id = oldest_log_id,
      target_player_id = target_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eoldest_log_id = oldest_log_id,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildlogMemberShowPast(
    string oldest_log_id,
    string target_player_id,
    Action<WebAPI.Response.GuildlogMemberShowPast> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guildlog/member/show/past", new Dictionary<string, object>()
    {
      [nameof (oldest_log_id)] = (object) oldest_log_id,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogMemberShowPast) null);
      }
      else
        callback(new WebAPI.Response.GuildlogMemberShowPast(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildlogSendStamp> GuildlogSendStamp(
    int stamp_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildlogSendStamp>((Func<Promise<WebAPI.Response.GuildlogSendStamp>, IEnumerator>) (promise => WebAPI.LoadGuildlogSendStamp(promise, stamp_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildlogSendStamp(
    Promise<WebAPI.Response.GuildlogSendStamp> promise,
    int stamp_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildlogSendStamp\u003Ec__IteratorDF()
    {
      stamp_id = stamp_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Estamp_id = stamp_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildlogSendStamp(
    int stamp_id,
    Action<WebAPI.Response.GuildlogSendStamp> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guildlog/send/stamp", new Dictionary<string, object>()
    {
      [nameof (stamp_id)] = (object) stamp_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogSendStamp) null);
      }
      else
        callback(new WebAPI.Response.GuildlogSendStamp(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildlogShow> GuildlogShow(
    int oldest_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogShow>((Func<Promise<WebAPI.Response.GuildlogShow>, IEnumerator>) (promise => WebAPI.LoadGuildlogShow(promise, oldest_log_id, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildlogShow(
    Promise<WebAPI.Response.GuildlogShow> promise,
    int oldest_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildlogShow\u003Ec__IteratorE0()
    {
      oldest_log_id = oldest_log_id,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Eoldest_log_id = oldest_log_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildlogShow(
    int oldest_log_id,
    Action<WebAPI.Response.GuildlogShow> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.Post("/guildlog/show", new Dictionary<string, object>()
    {
      [nameof (oldest_log_id)] = (object) oldest_log_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogShow) null);
      }
      else
        callback(new WebAPI.Response.GuildlogShow(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogShowPast> GuildlogShowPast(
    string oldest_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildlogShowPast>((Func<Promise<WebAPI.Response.GuildlogShowPast>, IEnumerator>) (promise => WebAPI.LoadGuildlogShowPast(promise, oldest_log_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildlogShowPast(
    Promise<WebAPI.Response.GuildlogShowPast> promise,
    string oldest_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildlogShowPast\u003Ec__IteratorE1()
    {
      oldest_log_id = oldest_log_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eoldest_log_id = oldest_log_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildlogShowPast(
    string oldest_log_id,
    Action<WebAPI.Response.GuildlogShowPast> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guildlog/show/past", new Dictionary<string, object>()
    {
      [nameof (oldest_log_id)] = (object) oldest_log_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogShowPast) null);
      }
      else
        callback(new WebAPI.Response.GuildlogShowPast(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildlogWrite> GuildlogWrite(
    string log_text,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GuildlogWrite>((Func<Promise<WebAPI.Response.GuildlogWrite>, IEnumerator>) (promise => WebAPI.LoadGuildlogWrite(promise, log_text, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGuildlogWrite(
    Promise<WebAPI.Response.GuildlogWrite> promise,
    string log_text,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGuildlogWrite\u003Ec__IteratorE2()
    {
      log_text = log_text,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Elog_text = log_text,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGuildlogWrite(
    string log_text,
    Action<WebAPI.Response.GuildlogWrite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/guildlog/write", new Dictionary<string, object>()
    {
      [nameof (log_text)] = (object) log_text
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogWrite) null);
      }
      else
        callback(new WebAPI.Response.GuildlogWrite(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgBattleFinish> GvgBattleFinish(
    int annihilation_count,
    string battle_uuid,
    int capture_star,
    int enemy_annihilation_count,
    int[] enemy_results_dead_count,
    int[] enemy_results_player_unit_id,
    int[] enemy_results_rental,
    int[] enemy_results_total_damage,
    int enemy_total_point,
    int total_point,
    int[] unit_results_dead_count,
    int[] unit_results_player_unit_id,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    bool win,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgBattleFinish>((Func<Promise<WebAPI.Response.GvgBattleFinish>, IEnumerator>) (promise => WebAPI.LoadGvgBattleFinish(promise, annihilation_count, battle_uuid, capture_star, enemy_annihilation_count, enemy_results_dead_count, enemy_results_player_unit_id, enemy_results_rental, enemy_results_total_damage, enemy_total_point, total_point, unit_results_dead_count, unit_results_player_unit_id, unit_results_rental, unit_results_total_damage, win, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgBattleFinish(
    Promise<WebAPI.Response.GvgBattleFinish> promise,
    int annihilation_count,
    string battle_uuid,
    int capture_star,
    int enemy_annihilation_count,
    int[] enemy_results_dead_count,
    int[] enemy_results_player_unit_id,
    int[] enemy_results_rental,
    int[] enemy_results_total_damage,
    int enemy_total_point,
    int total_point,
    int[] unit_results_dead_count,
    int[] unit_results_player_unit_id,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    bool win,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgBattleFinish\u003Ec__IteratorE3()
    {
      annihilation_count = annihilation_count,
      battle_uuid = battle_uuid,
      capture_star = capture_star,
      enemy_annihilation_count = enemy_annihilation_count,
      enemy_results_dead_count = enemy_results_dead_count,
      enemy_results_player_unit_id = enemy_results_player_unit_id,
      enemy_results_rental = enemy_results_rental,
      enemy_results_total_damage = enemy_results_total_damage,
      enemy_total_point = enemy_total_point,
      total_point = total_point,
      unit_results_dead_count = unit_results_dead_count,
      unit_results_player_unit_id = unit_results_player_unit_id,
      unit_results_rental = unit_results_rental,
      unit_results_total_damage = unit_results_total_damage,
      win = win,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eannihilation_count = annihilation_count,
      \u003C\u0024\u003Ebattle_uuid = battle_uuid,
      \u003C\u0024\u003Ecapture_star = capture_star,
      \u003C\u0024\u003Eenemy_annihilation_count = enemy_annihilation_count,
      \u003C\u0024\u003Eenemy_results_dead_count = enemy_results_dead_count,
      \u003C\u0024\u003Eenemy_results_player_unit_id = enemy_results_player_unit_id,
      \u003C\u0024\u003Eenemy_results_rental = enemy_results_rental,
      \u003C\u0024\u003Eenemy_results_total_damage = enemy_results_total_damage,
      \u003C\u0024\u003Eenemy_total_point = enemy_total_point,
      \u003C\u0024\u003Etotal_point = total_point,
      \u003C\u0024\u003Eunit_results_dead_count = unit_results_dead_count,
      \u003C\u0024\u003Eunit_results_player_unit_id = unit_results_player_unit_id,
      \u003C\u0024\u003Eunit_results_rental = unit_results_rental,
      \u003C\u0024\u003Eunit_results_total_damage = unit_results_total_damage,
      \u003C\u0024\u003Ewin = win,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgBattleFinish(
    int annihilation_count,
    string battle_uuid,
    int capture_star,
    int enemy_annihilation_count,
    int[] enemy_results_dead_count,
    int[] enemy_results_player_unit_id,
    int[] enemy_results_rental,
    int[] enemy_results_total_damage,
    int enemy_total_point,
    int total_point,
    int[] unit_results_dead_count,
    int[] unit_results_player_unit_id,
    int[] unit_results_rental,
    int[] unit_results_total_damage,
    bool win,
    Action<WebAPI.Response.GvgBattleFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gvg/battle/finish", new Dictionary<string, object>()
    {
      [nameof (annihilation_count)] = (object) annihilation_count,
      [nameof (battle_uuid)] = (object) battle_uuid,
      [nameof (capture_star)] = (object) capture_star,
      [nameof (enemy_annihilation_count)] = (object) enemy_annihilation_count,
      [nameof (enemy_results_dead_count)] = (object) enemy_results_dead_count,
      [nameof (enemy_results_player_unit_id)] = (object) enemy_results_player_unit_id,
      [nameof (enemy_results_rental)] = (object) enemy_results_rental,
      [nameof (enemy_results_total_damage)] = (object) enemy_results_total_damage,
      [nameof (enemy_total_point)] = (object) enemy_total_point,
      [nameof (total_point)] = (object) total_point,
      [nameof (unit_results_dead_count)] = (object) unit_results_dead_count,
      [nameof (unit_results_player_unit_id)] = (object) unit_results_player_unit_id,
      [nameof (unit_results_rental)] = (object) unit_results_rental,
      [nameof (unit_results_total_damage)] = (object) unit_results_total_damage,
      [nameof (win)] = (object) win
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgBattleFinish) null);
      }
      else
        callback(new WebAPI.Response.GvgBattleFinish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgBattleForceClose> GvgBattleForceClose(
    string battle_uuid,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgBattleForceClose>((Func<Promise<WebAPI.Response.GvgBattleForceClose>, IEnumerator>) (promise => WebAPI.LoadGvgBattleForceClose(promise, battle_uuid, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgBattleForceClose(
    Promise<WebAPI.Response.GvgBattleForceClose> promise,
    string battle_uuid,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgBattleForceClose\u003Ec__IteratorE4()
    {
      battle_uuid = battle_uuid,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebattle_uuid = battle_uuid,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgBattleForceClose(
    string battle_uuid,
    Action<WebAPI.Response.GvgBattleForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gvg/battle/force-close", new Dictionary<string, object>()
    {
      [nameof (battle_uuid)] = (object) battle_uuid
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgBattleForceClose) null);
      }
      else
        callback(new WebAPI.Response.GvgBattleForceClose(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgBattleResume> GvgBattleResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgBattleResume>((Func<Promise<WebAPI.Response.GvgBattleResume>, IEnumerator>) (promise => WebAPI.LoadGvgBattleResume(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgBattleResume(
    Promise<WebAPI.Response.GvgBattleResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgBattleResume\u003Ec__IteratorE5()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgBattleResume(
    Action<WebAPI.Response.GvgBattleResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/gvg/battle/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgBattleResume) null);
      }
      else
        callback(new WebAPI.Response.GvgBattleResume(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgBattleStart> GvgBattleStart(
    string support_player_id,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgBattleStart>((Func<Promise<WebAPI.Response.GvgBattleStart>, IEnumerator>) (promise => WebAPI.LoadGvgBattleStart(promise, support_player_id, target_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgBattleStart(
    Promise<WebAPI.Response.GvgBattleStart> promise,
    string support_player_id,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgBattleStart\u003Ec__IteratorE6()
    {
      support_player_id = support_player_id,
      target_player_id = target_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Esupport_player_id = support_player_id,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgBattleStart(
    string support_player_id,
    string target_player_id,
    Action<WebAPI.Response.GvgBattleStart> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gvg/battle/start", new Dictionary<string, object>()
    {
      [nameof (support_player_id)] = (object) support_player_id,
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgBattleStart) null);
      }
      else
        callback(new WebAPI.Response.GvgBattleStart(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgDeckAttackEdit> GvgDeckAttackEdit(
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgDeckAttackEdit>((Func<Promise<WebAPI.Response.GvgDeckAttackEdit>, IEnumerator>) (promise => WebAPI.LoadGvgDeckAttackEdit(promise, player_unit_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgDeckAttackEdit(
    Promise<WebAPI.Response.GvgDeckAttackEdit> promise,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgDeckAttackEdit\u003Ec__IteratorE7()
    {
      player_unit_ids = player_unit_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eplayer_unit_ids = player_unit_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgDeckAttackEdit(
    int[] player_unit_ids,
    Action<WebAPI.Response.GvgDeckAttackEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gvg/deck/attack-edit", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckAttackEdit) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckAttackEdit(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgDeckAttackShow> GvgDeckAttackShow(
    string guild_id,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgDeckAttackShow>((Func<Promise<WebAPI.Response.GvgDeckAttackShow>, IEnumerator>) (promise => WebAPI.LoadGvgDeckAttackShow(promise, guild_id, player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgDeckAttackShow(
    Promise<WebAPI.Response.GvgDeckAttackShow> promise,
    string guild_id,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgDeckAttackShow\u003Ec__IteratorE8()
    {
      guild_id = guild_id,
      player_id = player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eguild_id = guild_id,
      \u003C\u0024\u003Eplayer_id = player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgDeckAttackShow(
    string guild_id,
    string player_id,
    Action<WebAPI.Response.GvgDeckAttackShow> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gvg/deck/attack-show", new Dictionary<string, object>()
    {
      [nameof (guild_id)] = (object) guild_id,
      [nameof (player_id)] = (object) player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckAttackShow) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckAttackShow(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgDeckDefenseEdit> GvgDeckDefenseEdit(
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgDeckDefenseEdit>((Func<Promise<WebAPI.Response.GvgDeckDefenseEdit>, IEnumerator>) (promise => WebAPI.LoadGvgDeckDefenseEdit(promise, player_unit_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgDeckDefenseEdit(
    Promise<WebAPI.Response.GvgDeckDefenseEdit> promise,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgDeckDefenseEdit\u003Ec__IteratorE9()
    {
      player_unit_ids = player_unit_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eplayer_unit_ids = player_unit_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgDeckDefenseEdit(
    int[] player_unit_ids,
    Action<WebAPI.Response.GvgDeckDefenseEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gvg/deck/defense-edit", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckDefenseEdit) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckDefenseEdit(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgDeckDefenseReinforcement> GvgDeckDefenseReinforcement(
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgDeckDefenseReinforcement>((Func<Promise<WebAPI.Response.GvgDeckDefenseReinforcement>, IEnumerator>) (promise => WebAPI.LoadGvgDeckDefenseReinforcement(promise, player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgDeckDefenseReinforcement(
    Promise<WebAPI.Response.GvgDeckDefenseReinforcement> promise,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgDeckDefenseReinforcement\u003Ec__IteratorEA()
    {
      player_id = player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eplayer_id = player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgDeckDefenseReinforcement(
    string player_id,
    Action<WebAPI.Response.GvgDeckDefenseReinforcement> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gvg/deck/defense-reinforcement", new Dictionary<string, object>()
    {
      [nameof (player_id)] = (object) player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckDefenseReinforcement) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckDefenseReinforcement(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgDeckDefenseRemoveReinforcement> GvgDeckDefenseRemoveReinforcement(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgDeckDefenseRemoveReinforcement>((Func<Promise<WebAPI.Response.GvgDeckDefenseRemoveReinforcement>, IEnumerator>) (promise => WebAPI.LoadGvgDeckDefenseRemoveReinforcement(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgDeckDefenseRemoveReinforcement(
    Promise<WebAPI.Response.GvgDeckDefenseRemoveReinforcement> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgDeckDefenseRemoveReinforcement\u003Ec__IteratorEB()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgDeckDefenseRemoveReinforcement(
    Action<WebAPI.Response.GvgDeckDefenseRemoveReinforcement> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/gvg/deck/defense-remove-reinforcement", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckDefenseRemoveReinforcement) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckDefenseRemoveReinforcement(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgDeckDefenseShow> GvgDeckDefenseShow(
    string guild_id,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgDeckDefenseShow>((Func<Promise<WebAPI.Response.GvgDeckDefenseShow>, IEnumerator>) (promise => WebAPI.LoadGvgDeckDefenseShow(promise, guild_id, player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgDeckDefenseShow(
    Promise<WebAPI.Response.GvgDeckDefenseShow> promise,
    string guild_id,
    string player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgDeckDefenseShow\u003Ec__IteratorEC()
    {
      guild_id = guild_id,
      player_id = player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eguild_id = guild_id,
      \u003C\u0024\u003Eplayer_id = player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgDeckDefenseShow(
    string guild_id,
    string player_id,
    Action<WebAPI.Response.GvgDeckDefenseShow> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gvg/deck/defense-show", new Dictionary<string, object>()
    {
      [nameof (guild_id)] = (object) guild_id,
      [nameof (player_id)] = (object) player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckDefenseShow) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckDefenseShow(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgDeckReinforcementCandidates> GvgDeckReinforcementCandidates(
    bool for_defense,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgDeckReinforcementCandidates>((Func<Promise<WebAPI.Response.GvgDeckReinforcementCandidates>, IEnumerator>) (promise => WebAPI.LoadGvgDeckReinforcementCandidates(promise, for_defense, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgDeckReinforcementCandidates(
    Promise<WebAPI.Response.GvgDeckReinforcementCandidates> promise,
    bool for_defense,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgDeckReinforcementCandidates\u003Ec__IteratorED()
    {
      for_defense = for_defense,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Efor_defense = for_defense,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgDeckReinforcementCandidates(
    bool for_defense,
    Action<WebAPI.Response.GvgDeckReinforcementCandidates> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gvg/deck/reinforcement-candidates", new Dictionary<string, object>()
    {
      [nameof (for_defense)] = (object) for_defense
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgDeckReinforcementCandidates) null);
      }
      else
        callback(new WebAPI.Response.GvgDeckReinforcementCandidates(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgHistoryHistoryGet> GvgHistoryHistoryGet(
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgHistoryHistoryGet>((Func<Promise<WebAPI.Response.GvgHistoryHistoryGet>, IEnumerator>) (promise => WebAPI.LoadGvgHistoryHistoryGet(promise, mock, target_guild_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgHistoryHistoryGet(
    Promise<WebAPI.Response.GvgHistoryHistoryGet> promise,
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgHistoryHistoryGet\u003Ec__IteratorEE()
    {
      mock = mock,
      target_guild_id = target_guild_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Emock = mock,
      \u003C\u0024\u003Etarget_guild_id = target_guild_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgHistoryHistoryGet(
    bool mock,
    string target_guild_id,
    Action<WebAPI.Response.GvgHistoryHistoryGet> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/gvg/history/history-get", new Dictionary<string, object>()
    {
      [nameof (mock)] = (object) mock,
      [nameof (target_guild_id)] = (object) target_guild_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgHistoryHistoryGet) null);
      }
      else
        callback(new WebAPI.Response.GvgHistoryHistoryGet(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgMatchingCancel> GvgMatchingCancel(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgMatchingCancel>((Func<Promise<WebAPI.Response.GvgMatchingCancel>, IEnumerator>) (promise => WebAPI.LoadGvgMatchingCancel(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgMatchingCancel(
    Promise<WebAPI.Response.GvgMatchingCancel> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgMatchingCancel\u003Ec__IteratorEF()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgMatchingCancel(
    Action<WebAPI.Response.GvgMatchingCancel> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/gvg/matching/cancel", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgMatchingCancel) null);
      }
      else
        callback(new WebAPI.Response.GvgMatchingCancel(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgMatchingEntry> GvgMatchingEntry(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgMatchingEntry>((Func<Promise<WebAPI.Response.GvgMatchingEntry>, IEnumerator>) (promise => WebAPI.LoadGvgMatchingEntry(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgMatchingEntry(
    Promise<WebAPI.Response.GvgMatchingEntry> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgMatchingEntry\u003Ec__IteratorF0()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgMatchingEntry(
    Action<WebAPI.Response.GvgMatchingEntry> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/gvg/matching/entry", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgMatchingEntry) null);
      }
      else
        callback(new WebAPI.Response.GvgMatchingEntry(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GvgResult> GvgResult(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.GvgResult>((Func<Promise<WebAPI.Response.GvgResult>, IEnumerator>) (promise => WebAPI.LoadGvgResult(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadGvgResult(
    Promise<WebAPI.Response.GvgResult> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadGvgResult\u003Ec__IteratorF1()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalGvgResult(
    Action<WebAPI.Response.GvgResult> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/gvg/result", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GvgResult) null);
      }
      else
        callback(new WebAPI.Response.GvgResult(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.Heartbeat> Heartbeat(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.Heartbeat>((Func<Promise<WebAPI.Response.Heartbeat>, IEnumerator>) (promise => WebAPI.LoadHeartbeat(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadHeartbeat(
    Promise<WebAPI.Response.Heartbeat> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadHeartbeat\u003Ec__IteratorF2()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalHeartbeat(
    Action<WebAPI.Response.Heartbeat> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/heartbeat/", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Heartbeat) null);
      }
      else
        callback(new WebAPI.Response.Heartbeat(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.HomeColosseumUnlockLev> HomeColosseumUnlockLev(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.HomeColosseumUnlockLev>((Func<Promise<WebAPI.Response.HomeColosseumUnlockLev>, IEnumerator>) (promise => WebAPI.LoadHomeColosseumUnlockLev(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadHomeColosseumUnlockLev(
    Promise<WebAPI.Response.HomeColosseumUnlockLev> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadHomeColosseumUnlockLev\u003Ec__IteratorF3()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalHomeColosseumUnlockLev(
    Action<WebAPI.Response.HomeColosseumUnlockLev> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/home/colosseum_unlockLev", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeColosseumUnlockLev) null);
      }
      else
        callback(new WebAPI.Response.HomeColosseumUnlockLev(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.HomeHome> HomeHome(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.HomeHome>((Func<Promise<WebAPI.Response.HomeHome>, IEnumerator>) (promise => WebAPI.LoadHomeHome(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadHomeHome(
    Promise<WebAPI.Response.HomeHome> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadHomeHome\u003Ec__IteratorF4()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalHomeHome(
    Action<WebAPI.Response.HomeHome> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/home/home", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeHome) null);
      }
      else
        callback(new WebAPI.Response.HomeHome(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.HomeNow> HomeNow(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.HomeNow>((Func<Promise<WebAPI.Response.HomeNow>, IEnumerator>) (promise => WebAPI.LoadHomeNow(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadHomeNow(
    Promise<WebAPI.Response.HomeNow> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadHomeNow\u003Ec__IteratorF5()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalHomeNow(
    Action<WebAPI.Response.HomeNow> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/home/now", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeNow) null);
      }
      else
        callback(new WebAPI.Response.HomeNow(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.HomeStartUp> HomeStartUp(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.HomeStartUp>((Func<Promise<WebAPI.Response.HomeStartUp>, IEnumerator>) (promise => WebAPI.LoadHomeStartUp(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadHomeStartUp(
    Promise<WebAPI.Response.HomeStartUp> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadHomeStartUp\u003Ec__IteratorF6()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalHomeStartUp(
    Action<WebAPI.Response.HomeStartUp> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/home/start_up", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeStartUp) null);
      }
      else
        callback(new WebAPI.Response.HomeStartUp(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.HomeStartUp2> HomeStartUp2(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.HomeStartUp2>((Func<Promise<WebAPI.Response.HomeStartUp2>, IEnumerator>) (promise => WebAPI.LoadHomeStartUp2(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadHomeStartUp2(
    Promise<WebAPI.Response.HomeStartUp2> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadHomeStartUp2\u003Ec__IteratorF7()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalHomeStartUp2(
    Action<WebAPI.Response.HomeStartUp2> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/home/start_up2", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeStartUp2) null);
      }
      else
        callback(new WebAPI.Response.HomeStartUp2(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.HomeUpdateAllData> HomeUpdateAllData(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.HomeUpdateAllData>((Func<Promise<WebAPI.Response.HomeUpdateAllData>, IEnumerator>) (promise => WebAPI.LoadHomeUpdateAllData(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadHomeUpdateAllData(
    Promise<WebAPI.Response.HomeUpdateAllData> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadHomeUpdateAllData\u003Ec__IteratorF8()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalHomeUpdateAllData(
    Action<WebAPI.Response.HomeUpdateAllData> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/home/update_all_data", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.HomeUpdateAllData) null);
      }
      else
        callback(new WebAPI.Response.HomeUpdateAllData(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.InvitationAccept> InvitationAccept(
    string invitation_code,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.InvitationAccept>((Func<Promise<WebAPI.Response.InvitationAccept>, IEnumerator>) (promise => WebAPI.LoadInvitationAccept(promise, invitation_code, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadInvitationAccept(
    Promise<WebAPI.Response.InvitationAccept> promise,
    string invitation_code,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadInvitationAccept\u003Ec__IteratorF9()
    {
      invitation_code = invitation_code,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Einvitation_code = invitation_code,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalInvitationAccept(
    string invitation_code,
    Action<WebAPI.Response.InvitationAccept> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/invitation/accept", new Dictionary<string, object>()
    {
      [nameof (invitation_code)] = (object) invitation_code
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.InvitationAccept) null);
      }
      else
        callback(new WebAPI.Response.InvitationAccept(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.InvitationInvite> InvitationInvite(
    string[] invitations,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.InvitationInvite>((Func<Promise<WebAPI.Response.InvitationInvite>, IEnumerator>) (promise => WebAPI.LoadInvitationInvite(promise, invitations, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadInvitationInvite(
    Promise<WebAPI.Response.InvitationInvite> promise,
    string[] invitations,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadInvitationInvite\u003Ec__IteratorFA()
    {
      invitations = invitations,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Einvitations = invitations,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalInvitationInvite(
    string[] invitations,
    Action<WebAPI.Response.InvitationInvite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/invitation/invite", new Dictionary<string, object>()
    {
      [nameof (invitations)] = (object) invitations
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.InvitationInvite) null);
      }
      else
        callback(new WebAPI.Response.InvitationInvite(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ItemGearBuildup> ItemGearBuildup(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ItemGearBuildup>((Func<Promise<WebAPI.Response.ItemGearBuildup>, IEnumerator>) (promise => WebAPI.LoadItemGearBuildup(promise, base_player_gear_id, material_player_gear_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadItemGearBuildup(
    Promise<WebAPI.Response.ItemGearBuildup> promise,
    int base_player_gear_id,
    int[] material_player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadItemGearBuildup\u003Ec__IteratorFB()
    {
      base_player_gear_id = base_player_gear_id,
      material_player_gear_ids = material_player_gear_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebase_player_gear_id = base_player_gear_id,
      \u003C\u0024\u003Ematerial_player_gear_ids = material_player_gear_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalItemGearBuildup(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    Action<WebAPI.Response.ItemGearBuildup> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/item/gear/buildup", new Dictionary<string, object>()
    {
      [nameof (base_player_gear_id)] = (object) base_player_gear_id,
      [nameof (material_player_gear_ids)] = (object) material_player_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearBuildup) null);
      }
      else
        callback(new WebAPI.Response.ItemGearBuildup(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ItemGearCombine> ItemGearCombine(
    int[] player_gear_ids,
    int[] player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ItemGearCombine>((Func<Promise<WebAPI.Response.ItemGearCombine>, IEnumerator>) (promise => WebAPI.LoadItemGearCombine(promise, player_gear_ids, player_material_gear_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadItemGearCombine(
    Promise<WebAPI.Response.ItemGearCombine> promise,
    int[] player_gear_ids,
    int[] player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadItemGearCombine\u003Ec__IteratorFC()
    {
      player_gear_ids = player_gear_ids,
      player_material_gear_ids = player_material_gear_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eplayer_gear_ids = player_gear_ids,
      \u003C\u0024\u003Eplayer_material_gear_ids = player_material_gear_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalItemGearCombine(
    int[] player_gear_ids,
    int[] player_material_gear_ids,
    Action<WebAPI.Response.ItemGearCombine> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/item/gear/combine", new Dictionary<string, object>()
    {
      [nameof (player_gear_ids)] = (object) player_gear_ids,
      [nameof (player_material_gear_ids)] = (object) player_material_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearCombine) null);
      }
      else
        callback(new WebAPI.Response.ItemGearCombine(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ItemGearDrilling> ItemGearDrilling(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ItemGearDrilling>((Func<Promise<WebAPI.Response.ItemGearDrilling>, IEnumerator>) (promise => WebAPI.LoadItemGearDrilling(promise, base_player_gear_id, material_player_gear_ids, material_player_material_gear_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadItemGearDrilling(
    Promise<WebAPI.Response.ItemGearDrilling> promise,
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadItemGearDrilling\u003Ec__IteratorFD()
    {
      base_player_gear_id = base_player_gear_id,
      material_player_gear_ids = material_player_gear_ids,
      material_player_material_gear_ids = material_player_material_gear_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebase_player_gear_id = base_player_gear_id,
      \u003C\u0024\u003Ematerial_player_gear_ids = material_player_gear_ids,
      \u003C\u0024\u003Ematerial_player_material_gear_ids = material_player_material_gear_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalItemGearDrilling(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.ItemGearDrilling> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/item/gear/drilling", new Dictionary<string, object>()
    {
      [nameof (base_player_gear_id)] = (object) base_player_gear_id,
      [nameof (material_player_gear_ids)] = (object) material_player_gear_ids,
      [nameof (material_player_material_gear_ids)] = (object) material_player_material_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearDrilling) null);
      }
      else
        callback(new WebAPI.Response.ItemGearDrilling(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ItemGearDrillingConfirm> ItemGearDrillingConfirm(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ItemGearDrillingConfirm>((Func<Promise<WebAPI.Response.ItemGearDrillingConfirm>, IEnumerator>) (promise => WebAPI.LoadItemGearDrillingConfirm(promise, base_player_gear_id, material_player_gear_ids, material_player_material_gear_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadItemGearDrillingConfirm(
    Promise<WebAPI.Response.ItemGearDrillingConfirm> promise,
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadItemGearDrillingConfirm\u003Ec__IteratorFE()
    {
      base_player_gear_id = base_player_gear_id,
      material_player_gear_ids = material_player_gear_ids,
      material_player_material_gear_ids = material_player_material_gear_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebase_player_gear_id = base_player_gear_id,
      \u003C\u0024\u003Ematerial_player_gear_ids = material_player_gear_ids,
      \u003C\u0024\u003Ematerial_player_material_gear_ids = material_player_material_gear_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalItemGearDrillingConfirm(
    int base_player_gear_id,
    int[] material_player_gear_ids,
    int[] material_player_material_gear_ids,
    Action<WebAPI.Response.ItemGearDrillingConfirm> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/item/gear/drilling/confirm", new Dictionary<string, object>()
    {
      [nameof (base_player_gear_id)] = (object) base_player_gear_id,
      [nameof (material_player_gear_ids)] = (object) material_player_gear_ids,
      [nameof (material_player_material_gear_ids)] = (object) material_player_material_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearDrillingConfirm) null);
      }
      else
        callback(new WebAPI.Response.ItemGearDrillingConfirm(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ItemGearFavorite> ItemGearFavorite(
    int[] favorite_player_gear_ids,
    int[] un_favorite_player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ItemGearFavorite>((Func<Promise<WebAPI.Response.ItemGearFavorite>, IEnumerator>) (promise => WebAPI.LoadItemGearFavorite(promise, favorite_player_gear_ids, un_favorite_player_gear_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadItemGearFavorite(
    Promise<WebAPI.Response.ItemGearFavorite> promise,
    int[] favorite_player_gear_ids,
    int[] un_favorite_player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadItemGearFavorite\u003Ec__IteratorFF()
    {
      favorite_player_gear_ids = favorite_player_gear_ids,
      un_favorite_player_gear_ids = un_favorite_player_gear_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Efavorite_player_gear_ids = favorite_player_gear_ids,
      \u003C\u0024\u003Eun_favorite_player_gear_ids = un_favorite_player_gear_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalItemGearFavorite(
    int[] favorite_player_gear_ids,
    int[] un_favorite_player_gear_ids,
    Action<WebAPI.Response.ItemGearFavorite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/item/gear/favorite", new Dictionary<string, object>()
    {
      [nameof (favorite_player_gear_ids)] = (object) favorite_player_gear_ids,
      [nameof (un_favorite_player_gear_ids)] = (object) un_favorite_player_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearFavorite) null);
      }
      else
        callback(new WebAPI.Response.ItemGearFavorite(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ItemGearPoweredRepair> ItemGearPoweredRepair(
    int bet,
    int medal,
    int player_gear_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ItemGearPoweredRepair>((Func<Promise<WebAPI.Response.ItemGearPoweredRepair>, IEnumerator>) (promise => WebAPI.LoadItemGearPoweredRepair(promise, bet, medal, player_gear_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadItemGearPoweredRepair(
    Promise<WebAPI.Response.ItemGearPoweredRepair> promise,
    int bet,
    int medal,
    int player_gear_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadItemGearPoweredRepair\u003Ec__Iterator100()
    {
      bet = bet,
      medal = medal,
      player_gear_id = player_gear_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebet = bet,
      \u003C\u0024\u003Emedal = medal,
      \u003C\u0024\u003Eplayer_gear_id = player_gear_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalItemGearPoweredRepair(
    int bet,
    int medal,
    int player_gear_id,
    Action<WebAPI.Response.ItemGearPoweredRepair> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/item/gear/powered/repair", new Dictionary<string, object>()
    {
      [nameof (bet)] = (object) bet,
      [nameof (medal)] = (object) medal,
      [nameof (player_gear_id)] = (object) player_gear_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearPoweredRepair) null);
      }
      else
        callback(new WebAPI.Response.ItemGearPoweredRepair(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ItemGearRepair> ItemGearRepair(
    int[] player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ItemGearRepair>((Func<Promise<WebAPI.Response.ItemGearRepair>, IEnumerator>) (promise => WebAPI.LoadItemGearRepair(promise, player_gear_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadItemGearRepair(
    Promise<WebAPI.Response.ItemGearRepair> promise,
    int[] player_gear_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadItemGearRepair\u003Ec__Iterator101()
    {
      player_gear_ids = player_gear_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eplayer_gear_ids = player_gear_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalItemGearRepair(
    int[] player_gear_ids,
    Action<WebAPI.Response.ItemGearRepair> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/item/gear/repair", new Dictionary<string, object>()
    {
      [nameof (player_gear_ids)] = (object) player_gear_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemGearRepair) null);
      }
      else
        callback(new WebAPI.Response.ItemGearRepair(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ItemSell> ItemSell(
    int[] material_gear_ids,
    int[] material_gear_quantities,
    int[] player_gear_ids,
    int[] supply_ids,
    int[] supply_quantities,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ItemSell>((Func<Promise<WebAPI.Response.ItemSell>, IEnumerator>) (promise => WebAPI.LoadItemSell(promise, material_gear_ids, material_gear_quantities, player_gear_ids, supply_ids, supply_quantities, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadItemSell(
    Promise<WebAPI.Response.ItemSell> promise,
    int[] material_gear_ids,
    int[] material_gear_quantities,
    int[] player_gear_ids,
    int[] supply_ids,
    int[] supply_quantities,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadItemSell\u003Ec__Iterator102()
    {
      material_gear_ids = material_gear_ids,
      material_gear_quantities = material_gear_quantities,
      player_gear_ids = player_gear_ids,
      supply_ids = supply_ids,
      supply_quantities = supply_quantities,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ematerial_gear_ids = material_gear_ids,
      \u003C\u0024\u003Ematerial_gear_quantities = material_gear_quantities,
      \u003C\u0024\u003Eplayer_gear_ids = player_gear_ids,
      \u003C\u0024\u003Esupply_ids = supply_ids,
      \u003C\u0024\u003Esupply_quantities = supply_quantities,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalItemSell(
    int[] material_gear_ids,
    int[] material_gear_quantities,
    int[] player_gear_ids,
    int[] supply_ids,
    int[] supply_quantities,
    Action<WebAPI.Response.ItemSell> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/item/sell", new Dictionary<string, object>()
    {
      [nameof (material_gear_ids)] = (object) material_gear_ids,
      [nameof (material_gear_quantities)] = (object) material_gear_quantities,
      [nameof (player_gear_ids)] = (object) player_gear_ids,
      [nameof (supply_ids)] = (object) supply_ids,
      [nameof (supply_quantities)] = (object) supply_quantities
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemSell) null);
      }
      else
        callback(new WebAPI.Response.ItemSell(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ItemSupplyDeckEdit> ItemSupplyDeckEdit(
    int[] deck_quantities,
    int[] deck_supply_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ItemSupplyDeckEdit>((Func<Promise<WebAPI.Response.ItemSupplyDeckEdit>, IEnumerator>) (promise => WebAPI.LoadItemSupplyDeckEdit(promise, deck_quantities, deck_supply_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadItemSupplyDeckEdit(
    Promise<WebAPI.Response.ItemSupplyDeckEdit> promise,
    int[] deck_quantities,
    int[] deck_supply_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadItemSupplyDeckEdit\u003Ec__Iterator103()
    {
      deck_quantities = deck_quantities,
      deck_supply_ids = deck_supply_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Edeck_quantities = deck_quantities,
      \u003C\u0024\u003Edeck_supply_ids = deck_supply_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalItemSupplyDeckEdit(
    int[] deck_quantities,
    int[] deck_supply_ids,
    Action<WebAPI.Response.ItemSupplyDeckEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/item/supply/deck/edit", new Dictionary<string, object>()
    {
      [nameof (deck_quantities)] = (object) deck_quantities,
      [nameof (deck_supply_ids)] = (object) deck_supply_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ItemSupplyDeckEdit) null);
      }
      else
        callback(new WebAPI.Response.ItemSupplyDeckEdit(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.KomelogAdd> KomelogAdd(
    string tag,
    string uid,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.KomelogAdd>((Func<Promise<WebAPI.Response.KomelogAdd>, IEnumerator>) (promise => WebAPI.LoadKomelogAdd(promise, tag, uid, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadKomelogAdd(
    Promise<WebAPI.Response.KomelogAdd> promise,
    string tag,
    string uid,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadKomelogAdd\u003Ec__Iterator104()
    {
      tag = tag,
      uid = uid,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etag = tag,
      \u003C\u0024\u003Euid = uid,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalKomelogAdd(
    string tag,
    string uid,
    Action<WebAPI.Response.KomelogAdd> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/komelog/add", new Dictionary<string, object>()
    {
      [nameof (tag)] = (object) tag,
      [nameof (uid)] = (object) uid
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.KomelogAdd) null);
      }
      else
        callback(new WebAPI.Response.KomelogAdd(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.Officialinfo> Officialinfo(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.Officialinfo>((Func<Promise<WebAPI.Response.Officialinfo>, IEnumerator>) (promise => WebAPI.LoadOfficialinfo(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadOfficialinfo(
    Promise<WebAPI.Response.Officialinfo> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadOfficialinfo\u003Ec__Iterator105()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalOfficialinfo(
    Action<WebAPI.Response.Officialinfo> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/officialinfo", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Officialinfo) null);
      }
      else
        callback(new WebAPI.Response.Officialinfo(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.OfficialinfoMaintenance> OfficialinfoMaintenance(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.OfficialinfoMaintenance>((Func<Promise<WebAPI.Response.OfficialinfoMaintenance>, IEnumerator>) (promise => WebAPI.LoadOfficialinfoMaintenance(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadOfficialinfoMaintenance(
    Promise<WebAPI.Response.OfficialinfoMaintenance> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadOfficialinfoMaintenance\u003Ec__Iterator106()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalOfficialinfoMaintenance(
    Action<WebAPI.Response.OfficialinfoMaintenance> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/officialinfo/maintenance", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.OfficialinfoMaintenance) null);
      }
      else
        callback(new WebAPI.Response.OfficialinfoMaintenance(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.Pay> Pay(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.Pay>((Func<Promise<WebAPI.Response.Pay>, IEnumerator>) (promise => WebAPI.LoadPay(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPay(
    Promise<WebAPI.Response.Pay> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPay\u003Ec__Iterator107()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPay(
    Action<WebAPI.Response.Pay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/pay/", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
      }
      else
        callback(new WebAPI.Response.Pay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PlayerBoot> PlayerBoot(
    string application_version,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PlayerBoot>((Func<Promise<WebAPI.Response.PlayerBoot>, IEnumerator>) (promise => WebAPI.LoadPlayerBoot(promise, application_version, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPlayerBoot(
    Promise<WebAPI.Response.PlayerBoot> promise,
    string application_version,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPlayerBoot\u003Ec__Iterator108()
    {
      application_version = application_version,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eapplication_version = application_version,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPlayerBoot(
    string application_version,
    Action<WebAPI.Response.PlayerBoot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/player/boot", new Dictionary<string, object>()
    {
      [nameof (application_version)] = (object) application_version
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerBoot) null);
      }
      else
        callback(new WebAPI.Response.PlayerBoot(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PlayerBootRelease> PlayerBootRelease(
    string application_version,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PlayerBootRelease>((Func<Promise<WebAPI.Response.PlayerBootRelease>, IEnumerator>) (promise => WebAPI.LoadPlayerBootRelease(promise, application_version, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPlayerBootRelease(
    Promise<WebAPI.Response.PlayerBootRelease> promise,
    string application_version,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPlayerBootRelease\u003Ec__Iterator109()
    {
      application_version = application_version,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eapplication_version = application_version,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPlayerBootRelease(
    string application_version,
    Action<WebAPI.Response.PlayerBootRelease> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/player/boot/release", new Dictionary<string, object>()
    {
      [nameof (application_version)] = (object) application_version
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerBootRelease) null);
      }
      else
        callback(new WebAPI.Response.PlayerBootRelease(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PlayerCommentEdit> PlayerCommentEdit(
    string comment,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PlayerCommentEdit>((Func<Promise<WebAPI.Response.PlayerCommentEdit>, IEnumerator>) (promise => WebAPI.LoadPlayerCommentEdit(promise, comment, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPlayerCommentEdit(
    Promise<WebAPI.Response.PlayerCommentEdit> promise,
    string comment,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPlayerCommentEdit\u003Ec__Iterator10A()
    {
      comment = comment,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ecomment = comment,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPlayerCommentEdit(
    string comment,
    Action<WebAPI.Response.PlayerCommentEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/player/comment/edit", new Dictionary<string, object>()
    {
      [nameof (comment)] = (object) comment
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerCommentEdit) null);
      }
      else
        callback(new WebAPI.Response.PlayerCommentEdit(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PlayerHelpers> PlayerHelpers(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PlayerHelpers>((Func<Promise<WebAPI.Response.PlayerHelpers>, IEnumerator>) (promise => WebAPI.LoadPlayerHelpers(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPlayerHelpers(
    Promise<WebAPI.Response.PlayerHelpers> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPlayerHelpers\u003Ec__Iterator10B()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPlayerHelpers(
    Action<WebAPI.Response.PlayerHelpers> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/player/helpers", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerHelpers) null);
      }
      else
        callback(new WebAPI.Response.PlayerHelpers(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PlayerNameEdit> PlayerNameEdit(
    string name,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PlayerNameEdit>((Func<Promise<WebAPI.Response.PlayerNameEdit>, IEnumerator>) (promise => WebAPI.LoadPlayerNameEdit(promise, name, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPlayerNameEdit(
    Promise<WebAPI.Response.PlayerNameEdit> promise,
    string name,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPlayerNameEdit\u003Ec__Iterator10C()
    {
      name = name,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ename = name,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPlayerNameEdit(
    string name,
    Action<WebAPI.Response.PlayerNameEdit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/player/name/edit", new Dictionary<string, object>()
    {
      [nameof (name)] = (object) name
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerNameEdit) null);
      }
      else
        callback(new WebAPI.Response.PlayerNameEdit(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PlayerSearch> PlayerSearch(
    string target_player_short_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PlayerSearch>((Func<Promise<WebAPI.Response.PlayerSearch>, IEnumerator>) (promise => WebAPI.LoadPlayerSearch(promise, target_player_short_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPlayerSearch(
    Promise<WebAPI.Response.PlayerSearch> promise,
    string target_player_short_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPlayerSearch\u003Ec__Iterator10D()
    {
      target_player_short_id = target_player_short_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_player_short_id = target_player_short_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPlayerSearch(
    string target_player_short_id,
    Action<WebAPI.Response.PlayerSearch> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/player/search", new Dictionary<string, object>()
    {
      [nameof (target_player_short_id)] = (object) target_player_short_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerSearch) null);
      }
      else
        callback(new WebAPI.Response.PlayerSearch(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PlayerSignin> PlayerSignin(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PlayerSignin>((Func<Promise<WebAPI.Response.PlayerSignin>, IEnumerator>) (promise => WebAPI.LoadPlayerSignin(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPlayerSignin(
    Promise<WebAPI.Response.PlayerSignin> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPlayerSignin\u003Ec__Iterator10E()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPlayerSignin(
    Action<WebAPI.Response.PlayerSignin> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/player/signin", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerSignin) null);
      }
      else
        callback(new WebAPI.Response.PlayerSignin(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PlayerSignup> PlayerSignup(
    int killing_count,
    string name,
    int unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PlayerSignup>((Func<Promise<WebAPI.Response.PlayerSignup>, IEnumerator>) (promise => WebAPI.LoadPlayerSignup(promise, killing_count, name, unit_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPlayerSignup(
    Promise<WebAPI.Response.PlayerSignup> promise,
    int killing_count,
    string name,
    int unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPlayerSignup\u003Ec__Iterator10F()
    {
      killing_count = killing_count,
      name = name,
      unit_id = unit_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ekilling_count = killing_count,
      \u003C\u0024\u003Ename = name,
      \u003C\u0024\u003Eunit_id = unit_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPlayerSignup(
    int killing_count,
    string name,
    int unit_id,
    Action<WebAPI.Response.PlayerSignup> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/player/signup", new Dictionary<string, object>()
    {
      [nameof (killing_count)] = (object) killing_count,
      [nameof (name)] = (object) name,
      [nameof (unit_id)] = (object) unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerSignup) null);
      }
      else
        callback(new WebAPI.Response.PlayerSignup(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PlayerStatus> PlayerStatus(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PlayerStatus>((Func<Promise<WebAPI.Response.PlayerStatus>, IEnumerator>) (promise => WebAPI.LoadPlayerStatus(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPlayerStatus(
    Promise<WebAPI.Response.PlayerStatus> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPlayerStatus\u003Ec__Iterator110()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPlayerStatus(
    Action<WebAPI.Response.PlayerStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/player/status", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PlayerStatus) null);
      }
      else
        callback(new WebAPI.Response.PlayerStatus(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PresentDelete> PresentDelete(
    int[] present_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PresentDelete>((Func<Promise<WebAPI.Response.PresentDelete>, IEnumerator>) (promise => WebAPI.LoadPresentDelete(promise, present_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPresentDelete(
    Promise<WebAPI.Response.PresentDelete> promise,
    int[] present_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPresentDelete\u003Ec__Iterator111()
    {
      present_ids = present_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Epresent_ids = present_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPresentDelete(
    int[] present_ids,
    Action<WebAPI.Response.PresentDelete> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/present/delete", new Dictionary<string, object>()
    {
      [nameof (present_ids)] = (object) present_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PresentDelete) null);
      }
      else
        callback(new WebAPI.Response.PresentDelete(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PresentRead> PresentRead(
    int[] present_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PresentRead>((Func<Promise<WebAPI.Response.PresentRead>, IEnumerator>) (promise => WebAPI.LoadPresentRead(promise, present_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPresentRead(
    Promise<WebAPI.Response.PresentRead> promise,
    int[] present_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPresentRead\u003Ec__Iterator112()
    {
      present_ids = present_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Epresent_ids = present_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPresentRead(
    int[] present_ids,
    Action<WebAPI.Response.PresentRead> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/present/read", new Dictionary<string, object>()
    {
      [nameof (present_ids)] = (object) present_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PresentRead) null);
      }
      else
        callback(new WebAPI.Response.PresentRead(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PresentReadLump> PresentReadLump(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PresentReadLump>((Func<Promise<WebAPI.Response.PresentReadLump>, IEnumerator>) (promise => WebAPI.LoadPresentReadLump(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPresentReadLump(
    Promise<WebAPI.Response.PresentReadLump> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPresentReadLump\u003Ec__Iterator113()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPresentReadLump(
    Action<WebAPI.Response.PresentReadLump> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/present/read/lump", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PresentReadLump) null);
      }
      else
        callback(new WebAPI.Response.PresentReadLump(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpBoot> PvpBoot(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpBoot>((Func<Promise<WebAPI.Response.PvpBoot>, IEnumerator>) (promise => WebAPI.LoadPvpBoot(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpBoot(
    Promise<WebAPI.Response.PvpBoot> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpBoot\u003Ec__Iterator114()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpBoot(
    Action<WebAPI.Response.PvpBoot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/pvp/boot", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpBoot) null);
      }
      else
        callback(new WebAPI.Response.PvpBoot(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpForceClose> PvpForceClose(
    bool is_lose,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpForceClose>((Func<Promise<WebAPI.Response.PvpForceClose>, IEnumerator>) (promise => WebAPI.LoadPvpForceClose(promise, is_lose, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpForceClose(
    Promise<WebAPI.Response.PvpForceClose> promise,
    bool is_lose,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpForceClose\u003Ec__Iterator115()
    {
      is_lose = is_lose,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eis_lose = is_lose,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpForceClose(
    bool is_lose,
    Action<WebAPI.Response.PvpForceClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/pvp/force-close", new Dictionary<string, object>()
    {
      [nameof (is_lose)] = (object) is_lose
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpForceClose) null);
      }
      else
        callback(new WebAPI.Response.PvpForceClose(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpFriend> PvpFriend(
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpFriend>((Func<Promise<WebAPI.Response.PvpFriend>, IEnumerator>) (promise => WebAPI.LoadPvpFriend(promise, target_player_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpFriend(
    Promise<WebAPI.Response.PvpFriend> promise,
    string target_player_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpFriend\u003Ec__Iterator116()
    {
      target_player_id = target_player_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Etarget_player_id = target_player_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpFriend(
    string target_player_id,
    Action<WebAPI.Response.PvpFriend> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/pvp/friend", new Dictionary<string, object>()
    {
      [nameof (target_player_id)] = (object) target_player_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpFriend) null);
      }
      else
        callback(new WebAPI.Response.PvpFriend(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpLiteBoot> PvpLiteBoot(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpLiteBoot>((Func<Promise<WebAPI.Response.PvpLiteBoot>, IEnumerator>) (promise => WebAPI.LoadPvpLiteBoot(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpLiteBoot(
    Promise<WebAPI.Response.PvpLiteBoot> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpLiteBoot\u003Ec__Iterator117()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpLiteBoot(
    Action<WebAPI.Response.PvpLiteBoot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/pvp/lite/boot", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpLiteBoot) null);
      }
      else
        callback(new WebAPI.Response.PvpLiteBoot(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpPlayerFinish> PvpPlayerFinish(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpPlayerFinish>((Func<Promise<WebAPI.Response.PvpPlayerFinish>, IEnumerator>) (promise => WebAPI.LoadPvpPlayerFinish(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpPlayerFinish(
    Promise<WebAPI.Response.PvpPlayerFinish> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpPlayerFinish\u003Ec__Iterator118()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpPlayerFinish(
    Action<WebAPI.Response.PvpPlayerFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/pvp/player/finish", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpPlayerFinish) null);
      }
      else
        callback(new WebAPI.Response.PvpPlayerFinish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpPlayerStatus> PvpPlayerStatus(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpPlayerStatus>((Func<Promise<WebAPI.Response.PvpPlayerStatus>, IEnumerator>) (promise => WebAPI.LoadPvpPlayerStatus(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpPlayerStatus(
    Promise<WebAPI.Response.PvpPlayerStatus> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpPlayerStatus\u003Ec__Iterator119()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpPlayerStatus(
    Action<WebAPI.Response.PvpPlayerStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/pvp/player/status", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpPlayerStatus) null);
      }
      else
        callback(new WebAPI.Response.PvpPlayerStatus(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpRanking> PvpRanking(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpRanking>((Func<Promise<WebAPI.Response.PvpRanking>, IEnumerator>) (promise => WebAPI.LoadPvpRanking(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpRanking(
    Promise<WebAPI.Response.PvpRanking> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpRanking\u003Ec__Iterator11A()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpRanking(
    Action<WebAPI.Response.PvpRanking> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/pvp/ranking", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpRanking) null);
      }
      else
        callback(new WebAPI.Response.PvpRanking(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpRankingClose> PvpRankingClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpRankingClose>((Func<Promise<WebAPI.Response.PvpRankingClose>, IEnumerator>) (promise => WebAPI.LoadPvpRankingClose(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpRankingClose(
    Promise<WebAPI.Response.PvpRankingClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpRankingClose\u003Ec__Iterator11B()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpRankingClose(
    Action<WebAPI.Response.PvpRankingClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/pvp/ranking-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpRankingClose) null);
      }
      else
        callback(new WebAPI.Response.PvpRankingClose(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpResume> PvpResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpResume>((Func<Promise<WebAPI.Response.PvpResume>, IEnumerator>) (promise => WebAPI.LoadPvpResume(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpResume(
    Promise<WebAPI.Response.PvpResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpResume\u003Ec__Iterator11C()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpResume(
    Action<WebAPI.Response.PvpResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/pvp/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpResume) null);
      }
      else
        callback(new WebAPI.Response.PvpResume(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpSeasonClose> PvpSeasonClose(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpSeasonClose>((Func<Promise<WebAPI.Response.PvpSeasonClose>, IEnumerator>) (promise => WebAPI.LoadPvpSeasonClose(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpSeasonClose(
    Promise<WebAPI.Response.PvpSeasonClose> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpSeasonClose\u003Ec__Iterator11D()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpSeasonClose(
    Action<WebAPI.Response.PvpSeasonClose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/pvp/season-close", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpSeasonClose) null);
      }
      else
        callback(new WebAPI.Response.PvpSeasonClose(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpTutorialPlayerFinish> PvpTutorialPlayerFinish(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpTutorialPlayerFinish>((Func<Promise<WebAPI.Response.PvpTutorialPlayerFinish>, IEnumerator>) (promise => WebAPI.LoadPvpTutorialPlayerFinish(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpTutorialPlayerFinish(
    Promise<WebAPI.Response.PvpTutorialPlayerFinish> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpTutorialPlayerFinish\u003Ec__Iterator11E()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpTutorialPlayerFinish(
    Action<WebAPI.Response.PvpTutorialPlayerFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/pvp/tutorial/player/finish", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpTutorialPlayerFinish) null);
      }
      else
        callback(new WebAPI.Response.PvpTutorialPlayerFinish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.PvpTutorialProgressFinish> PvpTutorialProgressFinish(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.PvpTutorialProgressFinish>((Func<Promise<WebAPI.Response.PvpTutorialProgressFinish>, IEnumerator>) (promise => WebAPI.LoadPvpTutorialProgressFinish(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPvpTutorialProgressFinish(
    Promise<WebAPI.Response.PvpTutorialProgressFinish> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPvpTutorialProgressFinish\u003Ec__Iterator11F()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPvpTutorialProgressFinish(
    Action<WebAPI.Response.PvpTutorialProgressFinish> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/pvp/tutorial/progress/finish", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.PvpTutorialProgressFinish) null);
      }
      else
        callback(new WebAPI.Response.PvpTutorialProgressFinish(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestHistoryExtra> QuestHistoryExtra(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestHistoryExtra>((Func<Promise<WebAPI.Response.QuestHistoryExtra>, IEnumerator>) (promise => WebAPI.LoadQuestHistoryExtra(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestHistoryExtra(
    Promise<WebAPI.Response.QuestHistoryExtra> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestHistoryExtra\u003Ec__Iterator120()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestHistoryExtra(
    Action<WebAPI.Response.QuestHistoryExtra> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/quest/history/extra", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestHistoryExtra) null);
      }
      else
        callback(new WebAPI.Response.QuestHistoryExtra(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestLimitationCharacter> QuestLimitationCharacter(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestLimitationCharacter>((Func<Promise<WebAPI.Response.QuestLimitationCharacter>, IEnumerator>) (promise => WebAPI.LoadQuestLimitationCharacter(promise, quest_s_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestLimitationCharacter(
    Promise<WebAPI.Response.QuestLimitationCharacter> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestLimitationCharacter\u003Ec__Iterator121()
    {
      quest_s_id = quest_s_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestLimitationCharacter(
    int quest_s_id,
    Action<WebAPI.Response.QuestLimitationCharacter> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/quest/limitation/character", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestLimitationCharacter) null);
      }
      else
        callback(new WebAPI.Response.QuestLimitationCharacter(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestLimitationExtra> QuestLimitationExtra(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestLimitationExtra>((Func<Promise<WebAPI.Response.QuestLimitationExtra>, IEnumerator>) (promise => WebAPI.LoadQuestLimitationExtra(promise, quest_s_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestLimitationExtra(
    Promise<WebAPI.Response.QuestLimitationExtra> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestLimitationExtra\u003Ec__Iterator122()
    {
      quest_s_id = quest_s_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestLimitationExtra(
    int quest_s_id,
    Action<WebAPI.Response.QuestLimitationExtra> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/quest/limitation/extra", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestLimitationExtra) null);
      }
      else
        callback(new WebAPI.Response.QuestLimitationExtra(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestLimitationHarmony> QuestLimitationHarmony(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestLimitationHarmony>((Func<Promise<WebAPI.Response.QuestLimitationHarmony>, IEnumerator>) (promise => WebAPI.LoadQuestLimitationHarmony(promise, quest_s_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestLimitationHarmony(
    Promise<WebAPI.Response.QuestLimitationHarmony> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestLimitationHarmony\u003Ec__Iterator123()
    {
      quest_s_id = quest_s_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestLimitationHarmony(
    int quest_s_id,
    Action<WebAPI.Response.QuestLimitationHarmony> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/quest/limitation/harmony", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestLimitationHarmony) null);
      }
      else
        callback(new WebAPI.Response.QuestLimitationHarmony(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestLimitationStory> QuestLimitationStory(
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestLimitationStory>((Func<Promise<WebAPI.Response.QuestLimitationStory>, IEnumerator>) (promise => WebAPI.LoadQuestLimitationStory(promise, quest_s_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestLimitationStory(
    Promise<WebAPI.Response.QuestLimitationStory> promise,
    int quest_s_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestLimitationStory\u003Ec__Iterator124()
    {
      quest_s_id = quest_s_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Equest_s_id = quest_s_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestLimitationStory(
    int quest_s_id,
    Action<WebAPI.Response.QuestLimitationStory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/quest/limitation/story", new Dictionary<string, object>()
    {
      [nameof (quest_s_id)] = (object) quest_s_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestLimitationStory) null);
      }
      else
        callback(new WebAPI.Response.QuestLimitationStory(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestProgressCharacter> QuestProgressCharacter(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestProgressCharacter>((Func<Promise<WebAPI.Response.QuestProgressCharacter>, IEnumerator>) (promise => WebAPI.LoadQuestProgressCharacter(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestProgressCharacter(
    Promise<WebAPI.Response.QuestProgressCharacter> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestProgressCharacter\u003Ec__Iterator125()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestProgressCharacter(
    Action<WebAPI.Response.QuestProgressCharacter> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/quest/progress/character", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestProgressCharacter) null);
      }
      else
        callback(new WebAPI.Response.QuestProgressCharacter(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestProgressExtra> QuestProgressExtra(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestProgressExtra>((Func<Promise<WebAPI.Response.QuestProgressExtra>, IEnumerator>) (promise => WebAPI.LoadQuestProgressExtra(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestProgressExtra(
    Promise<WebAPI.Response.QuestProgressExtra> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestProgressExtra\u003Ec__Iterator126()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestProgressExtra(
    Action<WebAPI.Response.QuestProgressExtra> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/quest/progress/extra", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestProgressExtra) null);
      }
      else
        callback(new WebAPI.Response.QuestProgressExtra(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestProgressHarmony> QuestProgressHarmony(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestProgressHarmony>((Func<Promise<WebAPI.Response.QuestProgressHarmony>, IEnumerator>) (promise => WebAPI.LoadQuestProgressHarmony(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestProgressHarmony(
    Promise<WebAPI.Response.QuestProgressHarmony> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestProgressHarmony\u003Ec__Iterator127()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestProgressHarmony(
    Action<WebAPI.Response.QuestProgressHarmony> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/quest/progress/harmony", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestProgressHarmony) null);
      }
      else
        callback(new WebAPI.Response.QuestProgressHarmony(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestProgressStory> QuestProgressStory(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestProgressStory>((Func<Promise<WebAPI.Response.QuestProgressStory>, IEnumerator>) (promise => WebAPI.LoadQuestProgressStory(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestProgressStory(
    Promise<WebAPI.Response.QuestProgressStory> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestProgressStory\u003Ec__Iterator128()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestProgressStory(
    Action<WebAPI.Response.QuestProgressStory> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/quest/progress/story", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestProgressStory) null);
      }
      else
        callback(new WebAPI.Response.QuestProgressStory(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestRankingExtra> QuestRankingExtra(
    int score_campaign_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestRankingExtra>((Func<Promise<WebAPI.Response.QuestRankingExtra>, IEnumerator>) (promise => WebAPI.LoadQuestRankingExtra(promise, score_campaign_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestRankingExtra(
    Promise<WebAPI.Response.QuestRankingExtra> promise,
    int score_campaign_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestRankingExtra\u003Ec__Iterator129()
    {
      score_campaign_id = score_campaign_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Escore_campaign_id = score_campaign_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestRankingExtra(
    int score_campaign_id,
    Action<WebAPI.Response.QuestRankingExtra> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/quest/ranking/extra", new Dictionary<string, object>()
    {
      [nameof (score_campaign_id)] = (object) score_campaign_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestRankingExtra) null);
      }
      else
        callback(new WebAPI.Response.QuestRankingExtra(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestkeyIndex> QuestkeyIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestkeyIndex>((Func<Promise<WebAPI.Response.QuestkeyIndex>, IEnumerator>) (promise => WebAPI.LoadQuestkeyIndex(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestkeyIndex(
    Promise<WebAPI.Response.QuestkeyIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestkeyIndex\u003Ec__Iterator12A()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestkeyIndex(
    Action<WebAPI.Response.QuestkeyIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/questkey/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestkeyIndex) null);
      }
      else
        callback(new WebAPI.Response.QuestkeyIndex(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestkeySpend> QuestkeySpend(
    int key_id,
    int quantity,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestkeySpend>((Func<Promise<WebAPI.Response.QuestkeySpend>, IEnumerator>) (promise => WebAPI.LoadQuestkeySpend(promise, key_id, quantity, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestkeySpend(
    Promise<WebAPI.Response.QuestkeySpend> promise,
    int key_id,
    int quantity,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestkeySpend\u003Ec__Iterator12B()
    {
      key_id = key_id,
      quantity = quantity,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ekey_id = key_id,
      \u003C\u0024\u003Equantity = quantity,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestkeySpend(
    int key_id,
    int quantity,
    Action<WebAPI.Response.QuestkeySpend> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/questkey/spend", new Dictionary<string, object>()
    {
      [nameof (key_id)] = (object) key_id,
      [nameof (quantity)] = (object) quantity
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestkeySpend) null);
      }
      else
        callback(new WebAPI.Response.QuestkeySpend(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.QuestscoreReward> QuestscoreReward(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.QuestscoreReward>((Func<Promise<WebAPI.Response.QuestscoreReward>, IEnumerator>) (promise => WebAPI.LoadQuestscoreReward(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadQuestscoreReward(
    Promise<WebAPI.Response.QuestscoreReward> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadQuestscoreReward\u003Ec__Iterator12C()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalQuestscoreReward(
    Action<WebAPI.Response.QuestscoreReward> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/questscore/reward", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.QuestscoreReward) null);
      }
      else
        callback(new WebAPI.Response.QuestscoreReward(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ReviewCancel> ReviewCancel(
    string review_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ReviewCancel>((Func<Promise<WebAPI.Response.ReviewCancel>, IEnumerator>) (promise => WebAPI.LoadReviewCancel(promise, review_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadReviewCancel(
    Promise<WebAPI.Response.ReviewCancel> promise,
    string review_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadReviewCancel\u003Ec__Iterator12D()
    {
      review_id = review_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ereview_id = review_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalReviewCancel(
    string review_id,
    Action<WebAPI.Response.ReviewCancel> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/review/cancel", new Dictionary<string, object>()
    {
      [nameof (review_id)] = (object) review_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ReviewCancel) null);
      }
      else
        callback(new WebAPI.Response.ReviewCancel(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ReviewContribute> ReviewContribute(
    string review_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ReviewContribute>((Func<Promise<WebAPI.Response.ReviewContribute>, IEnumerator>) (promise => WebAPI.LoadReviewContribute(promise, review_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadReviewContribute(
    Promise<WebAPI.Response.ReviewContribute> promise,
    string review_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadReviewContribute\u003Ec__Iterator12E()
    {
      review_id = review_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ereview_id = review_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalReviewContribute(
    string review_id,
    Action<WebAPI.Response.ReviewContribute> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/review/contribute", new Dictionary<string, object>()
    {
      [nameof (review_id)] = (object) review_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ReviewContribute) null);
      }
      else
        callback(new WebAPI.Response.ReviewContribute(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.RpcSubmitEnv> RpcSubmitEnv(
    string application_version,
    string platform,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.RpcSubmitEnv>((Func<Promise<WebAPI.Response.RpcSubmitEnv>, IEnumerator>) (promise => WebAPI.LoadRpcSubmitEnv(promise, application_version, platform, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadRpcSubmitEnv(
    Promise<WebAPI.Response.RpcSubmitEnv> promise,
    string application_version,
    string platform,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadRpcSubmitEnv\u003Ec__Iterator12F()
    {
      application_version = application_version,
      platform = platform,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eapplication_version = application_version,
      \u003C\u0024\u003Eplatform = platform,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalRpcSubmitEnv(
    string application_version,
    string platform,
    Action<WebAPI.Response.RpcSubmitEnv> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/rpc/submit/env", new Dictionary<string, object>()
    {
      [nameof (application_version)] = (object) application_version,
      [nameof (platform)] = (object) platform
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.RpcSubmitEnv) null);
      }
      else
        callback(new WebAPI.Response.RpcSubmitEnv(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.SeasonticketIndex> SeasonticketIndex(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.SeasonticketIndex>((Func<Promise<WebAPI.Response.SeasonticketIndex>, IEnumerator>) (promise => WebAPI.LoadSeasonticketIndex(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadSeasonticketIndex(
    Promise<WebAPI.Response.SeasonticketIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadSeasonticketIndex\u003Ec__Iterator130()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalSeasonticketIndex(
    Action<WebAPI.Response.SeasonticketIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/seasonticket/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeasonticketIndex) null);
      }
      else
        callback(new WebAPI.Response.SeasonticketIndex(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.SeasonticketSpend> SeasonticketSpend(
    int quantity,
    int ticket_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.SeasonticketSpend>((Func<Promise<WebAPI.Response.SeasonticketSpend>, IEnumerator>) (promise => WebAPI.LoadSeasonticketSpend(promise, quantity, ticket_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadSeasonticketSpend(
    Promise<WebAPI.Response.SeasonticketSpend> promise,
    int quantity,
    int ticket_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadSeasonticketSpend\u003Ec__Iterator131()
    {
      quantity = quantity,
      ticket_id = ticket_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Equantity = quantity,
      \u003C\u0024\u003Eticket_id = ticket_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalSeasonticketSpend(
    int quantity,
    int ticket_id,
    Action<WebAPI.Response.SeasonticketSpend> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/seasonticket/spend", new Dictionary<string, object>()
    {
      [nameof (quantity)] = (object) quantity,
      [nameof (ticket_id)] = (object) ticket_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SeasonticketSpend) null);
      }
      else
        callback(new WebAPI.Response.SeasonticketSpend(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.SerialList> SerialList(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.SerialList>((Func<Promise<WebAPI.Response.SerialList>, IEnumerator>) (promise => WebAPI.LoadSerialList(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadSerialList(
    Promise<WebAPI.Response.SerialList> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadSerialList\u003Ec__Iterator132()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalSerialList(
    Action<WebAPI.Response.SerialList> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/serial/list", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SerialList) null);
      }
      else
        callback(new WebAPI.Response.SerialList(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.SerialRegister> SerialRegister(
    int campaign_id,
    string serial_code,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.SerialRegister>((Func<Promise<WebAPI.Response.SerialRegister>, IEnumerator>) (promise => WebAPI.LoadSerialRegister(promise, campaign_id, serial_code, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadSerialRegister(
    Promise<WebAPI.Response.SerialRegister> promise,
    int campaign_id,
    string serial_code,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadSerialRegister\u003Ec__Iterator133()
    {
      campaign_id = campaign_id,
      serial_code = serial_code,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ecampaign_id = campaign_id,
      \u003C\u0024\u003Eserial_code = serial_code,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalSerialRegister(
    int campaign_id,
    string serial_code,
    Action<WebAPI.Response.SerialRegister> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/serial/register", new Dictionary<string, object>()
    {
      [nameof (campaign_id)] = (object) campaign_id,
      [nameof (serial_code)] = (object) serial_code
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SerialRegister) null);
      }
      else
        callback(new WebAPI.Response.SerialRegister(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ShopBuy> ShopBuy(
    int article_id,
    int quantity,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ShopBuy>((Func<Promise<WebAPI.Response.ShopBuy>, IEnumerator>) (promise => WebAPI.LoadShopBuy(promise, article_id, quantity, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadShopBuy(
    Promise<WebAPI.Response.ShopBuy> promise,
    int article_id,
    int quantity,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadShopBuy\u003Ec__Iterator134()
    {
      article_id = article_id,
      quantity = quantity,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Earticle_id = article_id,
      \u003C\u0024\u003Equantity = quantity,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalShopBuy(
    int article_id,
    int quantity,
    Action<WebAPI.Response.ShopBuy> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/shop/buy", new Dictionary<string, object>()
    {
      [nameof (article_id)] = (object) article_id,
      [nameof (quantity)] = (object) quantity
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ShopBuy) null);
      }
      else
        callback(new WebAPI.Response.ShopBuy(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ShopStatus> ShopStatus(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ShopStatus>((Func<Promise<WebAPI.Response.ShopStatus>, IEnumerator>) (promise => WebAPI.LoadShopStatus(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadShopStatus(
    Promise<WebAPI.Response.ShopStatus> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadShopStatus\u003Ec__Iterator135()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalShopStatus(
    Action<WebAPI.Response.ShopStatus> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/shop/status", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ShopStatus) null);
      }
      else
        callback(new WebAPI.Response.ShopStatus(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.Slot> Slot(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.Slot>((Func<Promise<WebAPI.Response.Slot>, IEnumerator>) (promise => WebAPI.LoadSlot(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadSlot(
    Promise<WebAPI.Response.Slot> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadSlot\u003Ec__Iterator136()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalSlot(
    Action<WebAPI.Response.Slot> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/slot", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.Slot) null);
      }
      else
        callback(new WebAPI.Response.Slot(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.SlotS001MedalPay> SlotS001MedalPay(
    int slot_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.SlotS001MedalPay>((Func<Promise<WebAPI.Response.SlotS001MedalPay>, IEnumerator>) (promise => WebAPI.LoadSlotS001MedalPay(promise, slot_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadSlotS001MedalPay(
    Promise<WebAPI.Response.SlotS001MedalPay> promise,
    int slot_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadSlotS001MedalPay\u003Ec__Iterator137()
    {
      slot_id = slot_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eslot_id = slot_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalSlotS001MedalPay(
    int slot_id,
    Action<WebAPI.Response.SlotS001MedalPay> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/slot/s001_medal/pay", new Dictionary<string, object>()
    {
      [nameof (slot_id)] = (object) slot_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.SlotS001MedalPay) null);
      }
      else
        callback(new WebAPI.Response.SlotS001MedalPay(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.TutorialTutorialResume> TutorialTutorialResume(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.TutorialTutorialResume>((Func<Promise<WebAPI.Response.TutorialTutorialResume>, IEnumerator>) (promise => WebAPI.LoadTutorialTutorialResume(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadTutorialTutorialResume(
    Promise<WebAPI.Response.TutorialTutorialResume> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadTutorialTutorialResume\u003Ec__Iterator138()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalTutorialTutorialResume(
    Action<WebAPI.Response.TutorialTutorialResume> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/tutorial/tutorial/resume", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TutorialTutorialResume) null);
      }
      else
        callback(new WebAPI.Response.TutorialTutorialResume(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.TutorialTutorialValid> TutorialTutorialValid(
    string name,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.TutorialTutorialValid>((Func<Promise<WebAPI.Response.TutorialTutorialValid>, IEnumerator>) (promise => WebAPI.LoadTutorialTutorialValid(promise, name, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadTutorialTutorialValid(
    Promise<WebAPI.Response.TutorialTutorialValid> promise,
    string name,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadTutorialTutorialValid\u003Ec__Iterator139()
    {
      name = name,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ename = name,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalTutorialTutorialValid(
    string name,
    Action<WebAPI.Response.TutorialTutorialValid> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/tutorial/tutorial/valid", new Dictionary<string, object>()
    {
      [nameof (name)] = (object) name
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.TutorialTutorialValid) null);
      }
      else
        callback(new WebAPI.Response.TutorialTutorialValid(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.UnitCompose> UnitCompose(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.UnitCompose>((Func<Promise<WebAPI.Response.UnitCompose>, IEnumerator>) (promise => WebAPI.LoadUnitCompose(promise, base_player_unit_id, material_player_material_unit_ids, material_player_unit_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadUnitCompose(
    Promise<WebAPI.Response.UnitCompose> promise,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadUnitCompose\u003Ec__Iterator13A()
    {
      base_player_unit_id = base_player_unit_id,
      material_player_material_unit_ids = material_player_material_unit_ids,
      material_player_unit_ids = material_player_unit_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebase_player_unit_id = base_player_unit_id,
      \u003C\u0024\u003Ematerial_player_material_unit_ids = material_player_material_unit_ids,
      \u003C\u0024\u003Ematerial_player_unit_ids = material_player_unit_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalUnitCompose(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    Action<WebAPI.Response.UnitCompose> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/unit/compose", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (material_player_material_unit_ids)] = (object) material_player_material_unit_ids,
      [nameof (material_player_unit_ids)] = (object) material_player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitCompose) null);
      }
      else
        callback(new WebAPI.Response.UnitCompose(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.UnitEquip> UnitEquip(
    int number,
    int? player_gear_id,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.UnitEquip>((Func<Promise<WebAPI.Response.UnitEquip>, IEnumerator>) (promise => WebAPI.LoadUnitEquip(promise, number, player_gear_id, player_unit_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadUnitEquip(
    Promise<WebAPI.Response.UnitEquip> promise,
    int number,
    int? player_gear_id,
    int player_unit_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadUnitEquip\u003Ec__Iterator13B()
    {
      number = number,
      player_gear_id = player_gear_id,
      player_unit_id = player_unit_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Enumber = number,
      \u003C\u0024\u003Eplayer_gear_id = player_gear_id,
      \u003C\u0024\u003Eplayer_unit_id = player_unit_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalUnitEquip(
    int number,
    int? player_gear_id,
    int player_unit_id,
    Action<WebAPI.Response.UnitEquip> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/unit/equip", new Dictionary<string, object>()
    {
      [nameof (number)] = (object) number,
      [nameof (player_gear_id)] = (object) player_gear_id,
      [nameof (player_unit_id)] = (object) player_unit_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitEquip) null);
      }
      else
        callback(new WebAPI.Response.UnitEquip(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.UnitEvolution> UnitEvolution(
    int base_player_material_unit_id,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.UnitEvolution>((Func<Promise<WebAPI.Response.UnitEvolution>, IEnumerator>) (promise => WebAPI.LoadUnitEvolution(promise, base_player_material_unit_id, base_player_unit_id, material_player_material_unit_ids, material_player_unit_ids, pattern_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadUnitEvolution(
    Promise<WebAPI.Response.UnitEvolution> promise,
    int base_player_material_unit_id,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadUnitEvolution\u003Ec__Iterator13C()
    {
      base_player_material_unit_id = base_player_material_unit_id,
      base_player_unit_id = base_player_unit_id,
      material_player_material_unit_ids = material_player_material_unit_ids,
      material_player_unit_ids = material_player_unit_ids,
      pattern_id = pattern_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebase_player_material_unit_id = base_player_material_unit_id,
      \u003C\u0024\u003Ebase_player_unit_id = base_player_unit_id,
      \u003C\u0024\u003Ematerial_player_material_unit_ids = material_player_material_unit_ids,
      \u003C\u0024\u003Ematerial_player_unit_ids = material_player_unit_ids,
      \u003C\u0024\u003Epattern_id = pattern_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalUnitEvolution(
    int base_player_material_unit_id,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UnitEvolution> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/unit/evolution", new Dictionary<string, object>()
    {
      [nameof (base_player_material_unit_id)] = (object) base_player_material_unit_id,
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (material_player_material_unit_ids)] = (object) material_player_material_unit_ids,
      [nameof (material_player_unit_ids)] = (object) material_player_unit_ids,
      [nameof (pattern_id)] = (object) pattern_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitEvolution) null);
      }
      else
        callback(new WebAPI.Response.UnitEvolution(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.UnitEvolutionParameter> UnitEvolutionParameter(
    int base_player_material_unit_id,
    int base_player_unit_id,
    int pattern_id,
    int[] pattern_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.UnitEvolutionParameter>((Func<Promise<WebAPI.Response.UnitEvolutionParameter>, IEnumerator>) (promise => WebAPI.LoadUnitEvolutionParameter(promise, base_player_material_unit_id, base_player_unit_id, pattern_id, pattern_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadUnitEvolutionParameter(
    Promise<WebAPI.Response.UnitEvolutionParameter> promise,
    int base_player_material_unit_id,
    int base_player_unit_id,
    int pattern_id,
    int[] pattern_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadUnitEvolutionParameter\u003Ec__Iterator13D()
    {
      base_player_material_unit_id = base_player_material_unit_id,
      base_player_unit_id = base_player_unit_id,
      pattern_id = pattern_id,
      pattern_ids = pattern_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebase_player_material_unit_id = base_player_material_unit_id,
      \u003C\u0024\u003Ebase_player_unit_id = base_player_unit_id,
      \u003C\u0024\u003Epattern_id = pattern_id,
      \u003C\u0024\u003Epattern_ids = pattern_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalUnitEvolutionParameter(
    int base_player_material_unit_id,
    int base_player_unit_id,
    int pattern_id,
    int[] pattern_ids,
    Action<WebAPI.Response.UnitEvolutionParameter> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/unit/evolution-parameter", new Dictionary<string, object>()
    {
      [nameof (base_player_material_unit_id)] = (object) base_player_material_unit_id,
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (pattern_id)] = (object) pattern_id,
      [nameof (pattern_ids)] = (object) pattern_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitEvolutionParameter) null);
      }
      else
        callback(new WebAPI.Response.UnitEvolutionParameter(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.UnitFavorite> UnitFavorite(
    int[] player_unit_ids,
    int[] unlock_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.UnitFavorite>((Func<Promise<WebAPI.Response.UnitFavorite>, IEnumerator>) (promise => WebAPI.LoadUnitFavorite(promise, player_unit_ids, unlock_player_unit_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadUnitFavorite(
    Promise<WebAPI.Response.UnitFavorite> promise,
    int[] player_unit_ids,
    int[] unlock_player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadUnitFavorite\u003Ec__Iterator13E()
    {
      player_unit_ids = player_unit_ids,
      unlock_player_unit_ids = unlock_player_unit_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eplayer_unit_ids = player_unit_ids,
      \u003C\u0024\u003Eunlock_player_unit_ids = unlock_player_unit_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalUnitFavorite(
    int[] player_unit_ids,
    int[] unlock_player_unit_ids,
    Action<WebAPI.Response.UnitFavorite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/unit/favorite", new Dictionary<string, object>()
    {
      [nameof (player_unit_ids)] = (object) player_unit_ids,
      [nameof (unlock_player_unit_ids)] = (object) unlock_player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitFavorite) null);
      }
      else
        callback(new WebAPI.Response.UnitFavorite(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.UnitSell> UnitSell(
    int[] player_material_unit_ids,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.UnitSell>((Func<Promise<WebAPI.Response.UnitSell>, IEnumerator>) (promise => WebAPI.LoadUnitSell(promise, player_material_unit_ids, player_unit_ids, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadUnitSell(
    Promise<WebAPI.Response.UnitSell> promise,
    int[] player_material_unit_ids,
    int[] player_unit_ids,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadUnitSell\u003Ec__Iterator13F()
    {
      player_material_unit_ids = player_material_unit_ids,
      player_unit_ids = player_unit_ids,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eplayer_material_unit_ids = player_material_unit_ids,
      \u003C\u0024\u003Eplayer_unit_ids = player_unit_ids,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalUnitSell(
    int[] player_material_unit_ids,
    int[] player_unit_ids,
    Action<WebAPI.Response.UnitSell> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/unit/sell", new Dictionary<string, object>()
    {
      [nameof (player_material_unit_ids)] = (object) player_material_unit_ids,
      [nameof (player_unit_ids)] = (object) player_unit_ids
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitSell) null);
      }
      else
        callback(new WebAPI.Response.UnitSell(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.UnitTransmigrate> UnitTransmigrate(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.UnitTransmigrate>((Func<Promise<WebAPI.Response.UnitTransmigrate>, IEnumerator>) (promise => WebAPI.LoadUnitTransmigrate(promise, base_player_unit_id, material_player_material_unit_ids, material_player_unit_ids, pattern_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadUnitTransmigrate(
    Promise<WebAPI.Response.UnitTransmigrate> promise,
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadUnitTransmigrate\u003Ec__Iterator140()
    {
      base_player_unit_id = base_player_unit_id,
      material_player_material_unit_ids = material_player_material_unit_ids,
      material_player_unit_ids = material_player_unit_ids,
      pattern_id = pattern_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebase_player_unit_id = base_player_unit_id,
      \u003C\u0024\u003Ematerial_player_material_unit_ids = material_player_material_unit_ids,
      \u003C\u0024\u003Ematerial_player_unit_ids = material_player_unit_ids,
      \u003C\u0024\u003Epattern_id = pattern_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalUnitTransmigrate(
    int base_player_unit_id,
    int[] material_player_material_unit_ids,
    int[] material_player_unit_ids,
    int pattern_id,
    Action<WebAPI.Response.UnitTransmigrate> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/unit/transmigrate", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (material_player_material_unit_ids)] = (object) material_player_material_unit_ids,
      [nameof (material_player_unit_ids)] = (object) material_player_unit_ids,
      [nameof (pattern_id)] = (object) pattern_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitTransmigrate) null);
      }
      else
        callback(new WebAPI.Response.UnitTransmigrate(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.UnitTransmigrateParameter> UnitTransmigrateParameter(
    int base_player_unit_id,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.UnitTransmigrateParameter>((Func<Promise<WebAPI.Response.UnitTransmigrateParameter>, IEnumerator>) (promise => WebAPI.LoadUnitTransmigrateParameter(promise, base_player_unit_id, pattern_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadUnitTransmigrateParameter(
    Promise<WebAPI.Response.UnitTransmigrateParameter> promise,
    int base_player_unit_id,
    int pattern_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadUnitTransmigrateParameter\u003Ec__Iterator141()
    {
      base_player_unit_id = base_player_unit_id,
      pattern_id = pattern_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Ebase_player_unit_id = base_player_unit_id,
      \u003C\u0024\u003Epattern_id = pattern_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalUnitTransmigrateParameter(
    int base_player_unit_id,
    int pattern_id,
    Action<WebAPI.Response.UnitTransmigrateParameter> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/unit/transmigrate-parameter", new Dictionary<string, object>()
    {
      [nameof (base_player_unit_id)] = (object) base_player_unit_id,
      [nameof (pattern_id)] = (object) pattern_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitTransmigrateParameter) null);
      }
      else
        callback(new WebAPI.Response.UnitTransmigrateParameter(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.UnitticketSpend> UnitticketSpend(
    int unit_ticket_choice,
    int unit_type,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.UnitticketSpend>((Func<Promise<WebAPI.Response.UnitticketSpend>, IEnumerator>) (promise => WebAPI.LoadUnitticketSpend(promise, unit_ticket_choice, unit_type, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadUnitticketSpend(
    Promise<WebAPI.Response.UnitticketSpend> promise,
    int unit_ticket_choice,
    int unit_type,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadUnitticketSpend\u003Ec__Iterator142()
    {
      unit_ticket_choice = unit_ticket_choice,
      unit_type = unit_type,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eunit_ticket_choice = unit_ticket_choice,
      \u003C\u0024\u003Eunit_type = unit_type,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalUnitticketSpend(
    int unit_ticket_choice,
    int unit_type,
    Action<WebAPI.Response.UnitticketSpend> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/unitticket/spend", new Dictionary<string, object>()
    {
      [nameof (unit_ticket_choice)] = (object) unit_ticket_choice,
      [nameof (unit_type)] = (object) unit_type
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.UnitticketSpend) null);
      }
      else
        callback(new WebAPI.Response.UnitticketSpend(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ZeroLoad> ZeroLoad(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ZeroLoad>((Func<Promise<WebAPI.Response.ZeroLoad>, IEnumerator>) (promise => WebAPI.LoadZeroLoad(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadZeroLoad(
    Promise<WebAPI.Response.ZeroLoad> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadZeroLoad\u003Ec__Iterator143()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalZeroLoad(
    Action<WebAPI.Response.ZeroLoad> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/zero/load", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZeroLoad) null);
      }
      else
        callback(new WebAPI.Response.ZeroLoad(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ZeroReset> ZeroReset(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ZeroReset>((Func<Promise<WebAPI.Response.ZeroReset>, IEnumerator>) (promise => WebAPI.LoadZeroReset(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadZeroReset(
    Promise<WebAPI.Response.ZeroReset> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadZeroReset\u003Ec__Iterator144()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalZeroReset(
    Action<WebAPI.Response.ZeroReset> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/zero/reset", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZeroReset) null);
      }
      else
        callback(new WebAPI.Response.ZeroReset(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ZeroSave> ZeroSave(
    string player_data,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ZeroSave>((Func<Promise<WebAPI.Response.ZeroSave>, IEnumerator>) (promise => WebAPI.LoadZeroSave(promise, player_data, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadZeroSave(
    Promise<WebAPI.Response.ZeroSave> promise,
    string player_data,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadZeroSave\u003Ec__Iterator145()
    {
      player_data = player_data,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Eplayer_data = player_data,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalZeroSave(
    string player_data,
    Action<WebAPI.Response.ZeroSave> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/zero/save", new Dictionary<string, object>()
    {
      [nameof (player_data)] = (object) player_data
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZeroSave) null);
      }
      else
        callback(new WebAPI.Response.ZeroSave(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ZukanDefeatRewardEnemy> ZukanDefeatRewardEnemy(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ZukanDefeatRewardEnemy>((Func<Promise<WebAPI.Response.ZukanDefeatRewardEnemy>, IEnumerator>) (promise => WebAPI.LoadZukanDefeatRewardEnemy(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadZukanDefeatRewardEnemy(
    Promise<WebAPI.Response.ZukanDefeatRewardEnemy> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadZukanDefeatRewardEnemy\u003Ec__Iterator146()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalZukanDefeatRewardEnemy(
    Action<WebAPI.Response.ZukanDefeatRewardEnemy> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/zukan/defeat_reward/enemy", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZukanDefeatRewardEnemy) null);
      }
      else
        callback(new WebAPI.Response.ZukanDefeatRewardEnemy(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ZukanDefeatRewardReceive> ZukanDefeatRewardReceive(
    int defeat_reward_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ZukanDefeatRewardReceive>((Func<Promise<WebAPI.Response.ZukanDefeatRewardReceive>, IEnumerator>) (promise => WebAPI.LoadZukanDefeatRewardReceive(promise, defeat_reward_id, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadZukanDefeatRewardReceive(
    Promise<WebAPI.Response.ZukanDefeatRewardReceive> promise,
    int defeat_reward_id,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadZukanDefeatRewardReceive\u003Ec__Iterator147()
    {
      defeat_reward_id = defeat_reward_id,
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003Edefeat_reward_id = defeat_reward_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalZukanDefeatRewardReceive(
    int defeat_reward_id,
    Action<WebAPI.Response.ZukanDefeatRewardReceive> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Post("/zukan/defeat_reward/receive", new Dictionary<string, object>()
    {
      [nameof (defeat_reward_id)] = (object) defeat_reward_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZukanDefeatRewardReceive) null);
      }
      else
        callback(new WebAPI.Response.ZukanDefeatRewardReceive(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ZukanEnemy> ZukanEnemy(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ZukanEnemy>((Func<Promise<WebAPI.Response.ZukanEnemy>, IEnumerator>) (promise => WebAPI.LoadZukanEnemy(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadZukanEnemy(
    Promise<WebAPI.Response.ZukanEnemy> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadZukanEnemy\u003Ec__Iterator148()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalZukanEnemy(
    Action<WebAPI.Response.ZukanEnemy> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/zukan/enemy", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZukanEnemy) null);
      }
      else
        callback(new WebAPI.Response.ZukanEnemy(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ZukanGear> ZukanGear(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ZukanGear>((Func<Promise<WebAPI.Response.ZukanGear>, IEnumerator>) (promise => WebAPI.LoadZukanGear(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadZukanGear(
    Promise<WebAPI.Response.ZukanGear> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadZukanGear\u003Ec__Iterator149()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalZukanGear(
    Action<WebAPI.Response.ZukanGear> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/zukan/gear", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZukanGear) null);
      }
      else
        callback(new WebAPI.Response.ZukanGear(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.ZukanUnit> ZukanUnit(
    Action<WebAPI.Response.UserError> userErrorCallback = null,
    int loadingType = 0)
  {
    return new Future<WebAPI.Response.ZukanUnit>((Func<Promise<WebAPI.Response.ZukanUnit>, IEnumerator>) (promise => WebAPI.LoadZukanUnit(promise, userErrorCallback, loadingType)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadZukanUnit(
    Promise<WebAPI.Response.ZukanUnit> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadZukanUnit\u003Ec__Iterator14A()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalZukanUnit(
    Action<WebAPI.Response.ZukanUnit> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/zukan/unit", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.ZukanUnit) null);
      }
      else
        callback(new WebAPI.Response.ZukanUnit(json.Json));
    }), loadingType);
  }

  public static Future<WebAPI.Response.GuildlogAutoupdate> SilentGuildlogAutoupdate(
    string current_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogAutoupdate>((Func<Promise<WebAPI.Response.GuildlogAutoupdate>, IEnumerator>) (promise => WebAPI.SilentLoadGuildlogAutoupdate(promise, current_log_id, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator SilentLoadGuildlogAutoupdate(
    Promise<WebAPI.Response.GuildlogAutoupdate> promise,
    string current_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CSilentLoadGuildlogAutoupdate\u003Ec__Iterator14B()
    {
      current_log_id = current_log_id,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Ecurrent_log_id = current_log_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void SilentInternalGuildlogAutoupdate(
    string current_log_id,
    Action<WebAPI.Response.GuildlogAutoupdate> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SilentPost("/guildlog/autoupdate", new Dictionary<string, object>()
    {
      [nameof (current_log_id)] = (object) current_log_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogAutoupdate) null);
      }
      else
        callback(new WebAPI.Response.GuildlogAutoupdate(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogSendStamp> SilentGuildlogSendStamp(
    int stamp_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogSendStamp>((Func<Promise<WebAPI.Response.GuildlogSendStamp>, IEnumerator>) (promise => WebAPI.SilentLoadGuildlogSendStamp(promise, stamp_id, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator SilentLoadGuildlogSendStamp(
    Promise<WebAPI.Response.GuildlogSendStamp> promise,
    int stamp_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CSilentLoadGuildlogSendStamp\u003Ec__Iterator14C()
    {
      stamp_id = stamp_id,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Estamp_id = stamp_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void SilentInternalGuildlogSendStamp(
    int stamp_id,
    Action<WebAPI.Response.GuildlogSendStamp> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SilentPost("/guildlog/send/stamp", new Dictionary<string, object>()
    {
      [nameof (stamp_id)] = (object) stamp_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogSendStamp) null);
      }
      else
        callback(new WebAPI.Response.GuildlogSendStamp(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogShowPast> SilentGuildlogShowPast(
    string oldest_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogShowPast>((Func<Promise<WebAPI.Response.GuildlogShowPast>, IEnumerator>) (promise => WebAPI.SilentLoadGuildlogShowPast(promise, oldest_log_id, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator SilentLoadGuildlogShowPast(
    Promise<WebAPI.Response.GuildlogShowPast> promise,
    string oldest_log_id,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CSilentLoadGuildlogShowPast\u003Ec__Iterator14D()
    {
      oldest_log_id = oldest_log_id,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Eoldest_log_id = oldest_log_id,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void SilentInternalGuildlogShowPast(
    string oldest_log_id,
    Action<WebAPI.Response.GuildlogShowPast> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SilentPost("/guildlog/show/past", new Dictionary<string, object>()
    {
      [nameof (oldest_log_id)] = (object) oldest_log_id
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogShowPast) null);
      }
      else
        callback(new WebAPI.Response.GuildlogShowPast(json.Json));
    }));
  }

  public static Future<WebAPI.Response.GuildlogWrite> SilentGuildlogWrite(
    string log_text,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.GuildlogWrite>((Func<Promise<WebAPI.Response.GuildlogWrite>, IEnumerator>) (promise => WebAPI.SilentLoadGuildlogWrite(promise, log_text, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator SilentLoadGuildlogWrite(
    Promise<WebAPI.Response.GuildlogWrite> promise,
    string log_text,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CSilentLoadGuildlogWrite\u003Ec__Iterator14E()
    {
      log_text = log_text,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Elog_text = log_text,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void SilentInternalGuildlogWrite(
    string log_text,
    Action<WebAPI.Response.GuildlogWrite> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.SilentPost("/guildlog/write", new Dictionary<string, object>()
    {
      [nameof (log_text)] = (object) log_text
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.GuildlogWrite) null);
      }
      else
        callback(new WebAPI.Response.GuildlogWrite(json.Json));
    }));
  }

  public static bool IsResponsedAtRecent(string methodName, double thresholdSeconds = 60f)
  {
    return WebAPI.latestResponsedAt.ContainsKey(methodName) && (DateTime.Now - WebAPI.latestResponsedAt[methodName]).TotalSeconds <= thresholdSeconds;
  }

  public static void SetLatestResponsedAt(string methodName)
  {
    WebAPI.latestResponsedAt[methodName] = DateTime.Now;
  }

  public static WebAPI.Response.PlayerBootRelease LastPlayerBoot { get; private set; }

  public static Future<WebAPI.Response.PlayerBootRelease> PlayerBoot(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return WebAPI.PlayerBootRelease(Revision.ApplicationVersion, userErrorCallback).Then<WebAPI.Response.PlayerBootRelease>((Func<WebAPI.Response.PlayerBootRelease, WebAPI.Response.PlayerBootRelease>) (x =>
    {
      WebAPI.LastPlayerBoot = x;
      return x;
    }));
  }

  public static Future<T> PunitiveExpeditionEventTop<T>(
    string url,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<T>((Func<Promise<T>, IEnumerator>) (promise => WebAPI.LoadPunitiveExpeditionEventTop<T>(promise, url, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadPunitiveExpeditionEventTop<T>(
    Promise<T> promise,
    string url,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadPunitiveExpeditionEventTop\u003Ec__Iterator14F<T>()
    {
      url = url,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Eurl = url,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalPunitiveExpeditionEventTop<T>(
    string url,
    Action<T> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    Dictionary<string, object> post = new Dictionary<string, object>();
    WebQueue.Post(url, post, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        ((Action<T>) callback)((T) typeof (T).GetConstructor(new System.Type[1]
        {
          typeof (Dictionary<string, object>)
        }).Invoke(new object[1]));
      }
      else
        ((Action<T>) callback)((T) typeof (T).GetConstructor(new System.Type[1]
        {
          typeof (Dictionary<string, object>)
        }).Invoke(new object[1]{ (object) json.Json }));
    }));
  }

  public static Future<WebAPI.Response.RpcSubmitEnv> RawRpcSubmitEnv(
    string application_version,
    string platform,
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.RpcSubmitEnv>((Func<Promise<WebAPI.Response.RpcSubmitEnv>, IEnumerator>) (promise => WebAPI.LoadRawRpcSubmitEnv(promise, application_version, platform, userErrorCallback)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadRawRpcSubmitEnv(
    Promise<WebAPI.Response.RpcSubmitEnv> promise,
    string application_version,
    string platform,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadRawRpcSubmitEnv\u003Ec__Iterator150()
    {
      application_version = application_version,
      platform = platform,
      userErrorCallback = userErrorCallback,
      promise = promise,
      \u003C\u0024\u003Eapplication_version = application_version,
      \u003C\u0024\u003Eplatform = platform,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalRawRpcSubmitEnv(
    string application_version,
    string platform,
    Action<WebAPI.Response.RpcSubmitEnv> callback,
    Action<WebAPI.Response.UserError> userErrorCallback)
  {
    WebQueue.RawPost("/rpc/submit/env", new Dictionary<string, object>()
    {
      [nameof (application_version)] = (object) application_version,
      [nameof (platform)] = (object) platform
    }, (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
        callback((WebAPI.Response.RpcSubmitEnv) null);
      }
      else
        callback(new WebAPI.Response.RpcSubmitEnv(json.Json));
    }));
  }

  public static Future<WebAPI.Response.SeasonticketIndex> SeasonticketIndexWithSimpleLoading(
    Action<WebAPI.Response.UserError> userErrorCallback = null)
  {
    return new Future<WebAPI.Response.SeasonticketIndex>((Func<Promise<WebAPI.Response.SeasonticketIndex>, IEnumerator>) (promise => WebAPI.LoadSeasonticketIndexWithSimpleLoading(promise, userErrorCallback, 1)));
  }

  [DebuggerHidden]
  private static IEnumerator LoadSeasonticketIndexWithSimpleLoading(
    Promise<WebAPI.Response.SeasonticketIndex> promise,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CLoadSeasonticketIndexWithSimpleLoading\u003Ec__Iterator151()
    {
      userErrorCallback = userErrorCallback,
      loadingType = loadingType,
      promise = promise,
      \u003C\u0024\u003EuserErrorCallback = userErrorCallback,
      \u003C\u0024\u003EloadingType = loadingType,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalSeasonticketIndexWithSimpleLoading(
    Action<WebAPI.Response.SeasonticketIndex> callback,
    Action<WebAPI.Response.UserError> userErrorCallback,
    int loadingType = 0)
  {
    WebQueue.Get("/seasonticket/index", (Action<WebResponse>) (json =>
    {
      object obj;
      if (json.Json.TryGetValue("is_error", out obj) && (bool) obj)
      {
        userErrorCallback = userErrorCallback ?? WebAPI.DefaultUserErrorCallback;
        userErrorCallback(new WebAPI.Response.UserError(json.Json));
      }
      else
        callback(new WebAPI.Response.SeasonticketIndex(json.Json));
    }), loadingType);
  }

  private static Dictionary<string, object> ToDictionary(
    string condition,
    string stacktrace,
    LogType type,
    string deviceId,
    Player player)
  {
    Dictionary<string, object> dictionary1 = new Dictionary<string, object>();
    string[] strArray = condition.Split(WebAPI.SENTRY_MESSAGE_DELIMITERS, 2, StringSplitOptions.None);
    string str = condition;
    string empty = string.Empty;
    if (strArray.Length == 2)
    {
      str = strArray[0];
      empty = strArray[1];
    }
    condition = "[Android] " + str;
    dictionary1.Add("message", (object) str);
    dictionary1.Add("exception", (object) new Dictionary<string, object>()
    {
      {
        nameof (type),
        (object) ((Enum) (object) type).ToString()
      },
      {
        "value",
        (object) (str + "\n\n" + stacktrace)
      }
    });
    if (!string.IsNullOrEmpty(deviceId))
    {
      Dictionary<string, object> dictionary2 = new Dictionary<string, object>();
      dictionary2.Add("id", (object) deviceId);
      if (player != null)
        dictionary2.Add("username", (object) player.name);
      dictionary1.Add("user", (object) dictionary2);
    }
    Dictionary<string, object> dictionary3 = new Dictionary<string, object>();
    dictionary3.Add("message", (object) str);
    if (!string.IsNullOrEmpty(empty))
      dictionary3.Add("message_parameter", (object) empty);
    dictionary3.Add(nameof (stacktrace), (object) stacktrace);
    if (player != null)
    {
      dictionary3.Add("id", (object) player.id);
      dictionary3.Add("short_id", (object) player.short_id);
      dictionary3.Add("level", (object) player.level);
      dictionary3.Add("money", (object) player.money);
      dictionary3.Add("medal", (object) player.medal);
      dictionary3.Add("paid_coin", (object) player.paid_coin);
      dictionary3.Add("free_coin", (object) player.free_coin);
    }
    dictionary3.Add("application_version", (object) Revision.ApplicationVersion);
    dictionary3.Add("dlc_version", (object) Revision.DLCVersion);
    dictionary1.Add("extra", (object) dictionary3);
    return dictionary1;
  }

  public static Future<WebResponse> SendError(string condition, string stacktrace, LogType type)
  {
    return new Future<WebResponse>((Func<Promise<WebResponse>, IEnumerator>) (promise => WebAPI.SendErrorE(promise, condition, stacktrace, type)));
  }

  [DebuggerHidden]
  private static IEnumerator SendErrorE(
    Promise<WebResponse> promise,
    string condition,
    string stacktrace,
    LogType type)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CSendErrorE\u003Ec__Iterator152()
    {
      condition = condition,
      stacktrace = stacktrace,
      type = type,
      promise = promise,
      \u003C\u0024\u003Econdition = condition,
      \u003C\u0024\u003Estacktrace = stacktrace,
      \u003C\u0024\u003Etype = type,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalSendError(
    string condition,
    string stacktrace,
    LogType type,
    Action<WebResponse> callback)
  {
    HTTP.Request req = WebQueue.makeRawRequest(new WebRequest("api/v2/client/error", WebRequest.RequestMethod.POST, Json.Serialize((object) WebAPI.ToDictionary(condition, stacktrace, type, Persist.auth.Data.DeviceID, SMManager.Get<Player>())), (Action<WebResponse>) null));
    if (!Object.op_Inequality((Object) UniWeb.Instance, (Object) null))
      return;
    UniWeb.Instance.StartCoroutine(WebAPI._Send(req, callback));
  }

  [DebuggerHidden]
  private static IEnumerator _Send(HTTP.Request req, Action<WebResponse> callback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003C_Send\u003Ec__Iterator153()
    {
      req = req,
      callback = callback,
      \u003C\u0024\u003Ereq = req,
      \u003C\u0024\u003Ecallback = callback
    };
  }

  public static Future<Dictionary<string, object>> SendEvent(
    string tag,
    string uid,
    int level,
    string remark = null,
    string des = null)
  {
    return new Future<Dictionary<string, object>>((Func<Promise<Dictionary<string, object>>, IEnumerator>) (promise => WebAPI.SendEventE(promise, tag, uid, level, remark, des)));
  }

  [DebuggerHidden]
  private static IEnumerator SendEventE(
    Promise<Dictionary<string, object>> promise,
    string tag,
    string uid,
    int level,
    string remark,
    string des)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CSendEventE\u003Ec__Iterator154()
    {
      tag = tag,
      uid = uid,
      level = level,
      remark = remark,
      des = des,
      promise = promise,
      \u003C\u0024\u003Etag = tag,
      \u003C\u0024\u003Euid = uid,
      \u003C\u0024\u003Elevel = level,
      \u003C\u0024\u003Eremark = remark,
      \u003C\u0024\u003Edes = des,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalSendEvent(
    string tag,
    string uid,
    int level,
    string remark,
    string des,
    Action<Dictionary<string, object>> callback)
  {
    Dictionary<string, object> dictionary = new Dictionary<string, object>();
    if (des != null)
      dictionary[nameof (des)] = (object) des;
    if (remark != null)
      dictionary[nameof (remark)] = (object) remark;
    dictionary[nameof (level)] = (object) level;
    dictionary[nameof (tag)] = (object) tag;
    dictionary[nameof (uid)] = (object) uid;
    HTTP.Request req = WebQueue.makeRawRequest(new WebRequest("api/v2/komelog/add", WebRequest.RequestMethod.POST, Json.Serialize((object) dictionary), (Action<WebResponse>) null));
    if (!Object.op_Inequality((Object) UniWeb.Instance, (Object) null))
      return;
    UniWeb.Instance.StartCoroutine(WebAPI._SendEvent(req, callback));
  }

  [DebuggerHidden]
  private static IEnumerator _SendEvent(HTTP.Request req, Action<Dictionary<string, object>> callback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003C_SendEvent\u003Ec__Iterator155()
    {
      req = req,
      callback = callback,
      \u003C\u0024\u003Ereq = req,
      \u003C\u0024\u003Ecallback = callback
    };
  }

  public static Future<Dictionary<string, object>> SendHeart()
  {
    return new Future<Dictionary<string, object>>((Func<Promise<Dictionary<string, object>>, IEnumerator>) (promise => WebAPI.SendHeartE(promise)));
  }

  [DebuggerHidden]
  private static IEnumerator SendHeartE(Promise<Dictionary<string, object>> promise)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003CSendHeartE\u003Ec__Iterator156()
    {
      promise = promise,
      \u003C\u0024\u003Epromise = promise
    };
  }

  private static void InternalSendHeart(Action<Dictionary<string, object>> callback)
  {
    string token = SDK.instance.GetToken();
    if (!SDK.instance.IsLogined() || string.IsNullOrEmpty(token))
    {
      Debug.Log((object) "heart authtoken is null or islogout");
    }
    else
    {
      Dictionary<string, object> dictionary = new Dictionary<string, object>();
      HTTP.Request req = WebQueue.makeRawRequest(new WebRequest("api/v2/heartbeat/", WebRequest.RequestMethod.GET, (string) null, (Action<WebResponse>) null));
      if (!Object.op_Inequality((Object) UniWeb.Instance, (Object) null))
        return;
      UniWeb.Instance.StartCoroutine(WebAPI._SendHeart(req, callback));
    }
  }

  [DebuggerHidden]
  private static IEnumerator _SendHeart(HTTP.Request req, Action<Dictionary<string, object>> callback)
  {
    // ISSUE: object of a compiler-generated type is created
    return (IEnumerator) new WebAPI.\u003C_SendHeart\u003Ec__Iterator157()
    {
      req = req,
      callback = callback,
      \u003C\u0024\u003Ereq = req,
      \u003C\u0024\u003Ecallback = callback
    };
  }

  private static void defaultUserErrorCallback(WebAPI.Response.UserError error)
  {
    throw new Exception(error.Reason);
  }

  public class Response
  {
    [Serializable]
    public class BattleWaveFinish : KeyCompare
    {
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerHelper[] player_helpers;
      public PlayerUnit[] player_units;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public BattleEnd battle_finish;
      public PlayerPresent[] player_presents;
      public PlayerStoryQuestS[] player_story_quests;

      public BattleWaveFinish()
      {
      }

      public BattleWaveFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json1 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json1 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json1) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json2 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json2 != null ? new PlayerHelper((Dictionary<string, object>) json2) : (PlayerHelper) null);
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json4 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json4) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 != null ? new PlayerItem((Dictionary<string, object>) json5) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json6 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json6 != null ? new PlayerMissionHistory((Dictionary<string, object>) json6) : (PlayerMissionHistory) null);
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json7 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json7 != null ? new QuestScoreBonusTimetable((Dictionary<string, object>) json7) : (QuestScoreBonusTimetable) null);
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.battle_finish = json[nameof (battle_finish)] != null ? new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]) : (BattleEnd) null;
        SMManager.Change<BattleEnd>(this.battle_finish);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json9 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json9 != null ? new PlayerStoryQuestS((Dictionary<string, object>) json9) : (PlayerStoryQuestS) null);
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests);
        if (json.ContainsKey("player_presents:delete"))
          SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class AchievementApiAuth : KeyCompare
    {
      public string auth_url;
      public int auth_status;

      public AchievementApiAuth()
      {
      }

      public AchievementApiAuth(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.auth_url = (string) json[nameof (auth_url)];
        this.auth_status = (int) (long) json[nameof (auth_status)];
      }
    }

    [Serializable]
    public class ActivityBuyFund : KeyCompare
    {
      public Player player;
      public PlayerCount[] player_counts;
      public PlayerValue player_value;

      public ActivityBuyFund()
      {
      }

      public ActivityBuyFund(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerCount> playerCountList = new List<PlayerCount>();
        foreach (object json1 in (List<object>) json[nameof (player_counts)])
          playerCountList.Add(json1 != null ? new PlayerCount((Dictionary<string, object>) json1) : (PlayerCount) null);
        this.player_counts = playerCountList.ToArray();
        SMManager.UpdateList<PlayerCount>(this.player_counts);
        this.player_value = json[nameof (player_value)] != null ? new PlayerValue((Dictionary<string, object>) json[nameof (player_value)]) : (PlayerValue) null;
        SMManager.Change<PlayerValue>(this.player_value);
      }
    }

    [Serializable]
    public class ActivityList : KeyCompare
    {
      public Activity[] activities;
      public PlayerCount[] player_counts;
      public PlayerReward[] player_rewards;
      public BonusCount[] activity_bonus;
      public PlayerValue player_value;

      public ActivityList()
      {
      }

      public ActivityList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<Activity> activityList = new List<Activity>();
        foreach (object json1 in (List<object>) json[nameof (activities)])
          activityList.Add(json1 != null ? new Activity((Dictionary<string, object>) json1) : (Activity) null);
        this.activities = activityList.ToArray();
        SMManager.UpdateList<Activity>(this.activities);
        List<PlayerCount> playerCountList = new List<PlayerCount>();
        foreach (object json2 in (List<object>) json[nameof (player_counts)])
          playerCountList.Add(json2 != null ? new PlayerCount((Dictionary<string, object>) json2) : (PlayerCount) null);
        this.player_counts = playerCountList.ToArray();
        SMManager.UpdateList<PlayerCount>(this.player_counts);
        List<PlayerReward> playerRewardList = new List<PlayerReward>();
        foreach (object json3 in (List<object>) json[nameof (player_rewards)])
          playerRewardList.Add(json3 != null ? new PlayerReward((Dictionary<string, object>) json3) : (PlayerReward) null);
        this.player_rewards = playerRewardList.ToArray();
        SMManager.UpdateList<PlayerReward>(this.player_rewards);
        List<BonusCount> bonusCountList = new List<BonusCount>();
        foreach (object json4 in (List<object>) json[nameof (activity_bonus)])
          bonusCountList.Add(json4 != null ? new BonusCount((Dictionary<string, object>) json4) : (BonusCount) null);
        this.activity_bonus = bonusCountList.ToArray();
        SMManager.UpdateList<BonusCount>(this.activity_bonus);
        this.player_value = json[nameof (player_value)] != null ? new PlayerValue((Dictionary<string, object>) json[nameof (player_value)]) : (PlayerValue) null;
        SMManager.Change<PlayerValue>(this.player_value);
      }
    }

    [Serializable]
    public class ActivityReceive : KeyCompare
    {
      public Player player;
      public PlayerReward[] player_rewards;
      public PlayerPresent[] player_presents;

      public ActivityReceive()
      {
      }

      public ActivityReceive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerReward> playerRewardList = new List<PlayerReward>();
        foreach (object json1 in (List<object>) json[nameof (player_rewards)])
          playerRewardList.Add(json1 != null ? new PlayerReward((Dictionary<string, object>) json1) : (PlayerReward) null);
        this.player_rewards = playerRewardList.ToArray();
        SMManager.UpdateList<PlayerReward>(this.player_rewards);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 != null ? new PlayerPresent((Dictionary<string, object>) json2) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
      }
    }

    [Serializable]
    public class Agreement : KeyCompare
    {
      public string agreement_title;
      public string not_agreement_title;
      public string agreement_header;
      public string agreement;
      public string not_agreement;

      public Agreement()
      {
      }

      public Agreement(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.agreement_title = (string) json[nameof (agreement_title)];
        this.not_agreement_title = (string) json[nameof (not_agreement_title)];
        this.agreement_header = (string) json[nameof (agreement_header)];
        this.agreement = (string) json[nameof (agreement)];
        this.not_agreement = (string) json[nameof (not_agreement)];
      }
    }

    [Serializable]
    public class BattleCharacterFinish : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerHelper[] player_helpers;
      public PlayerUnit[] player_units;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public BattleEnd battle_finish;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerStoryQuestS[] player_story_quests;

      public BattleCharacterFinish()
      {
      }

      public BattleCharacterFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json2 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json2) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json3 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json3 != null ? new PlayerHelper((Dictionary<string, object>) json3) : (PlayerHelper) null);
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 != null ? new PlayerItem((Dictionary<string, object>) json5) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json6 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json6 != null ? new PlayerMissionHistory((Dictionary<string, object>) json6) : (PlayerMissionHistory) null);
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json7 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json7 != null ? new QuestScoreBonusTimetable((Dictionary<string, object>) json7) : (QuestScoreBonusTimetable) null);
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.battle_finish = json[nameof (battle_finish)] != null ? new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]) : (BattleEnd) null;
        SMManager.Change<BattleEnd>(this.battle_finish);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json10 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json10 != null ? new PlayerStoryQuestS((Dictionary<string, object>) json10) : (PlayerStoryQuestS) null);
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_presents:delete"))
          SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class BattleCharacterQuestDetail : KeyCompare
    {
      public WebAPI.Response.BattleCharacterQuestDetailDrop_items[] drop_items;
      public bool drop_info_display_flag;
      public WebAPI.Response.BattleCharacterQuestDetailEnemy_info_list enemy_info_list;
      public string quest_name;
      public string recommend_strength;

      public BattleCharacterQuestDetail()
      {
      }

      public BattleCharacterQuestDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleCharacterQuestDetailDrop_items> questDetailDropItemsList = new List<WebAPI.Response.BattleCharacterQuestDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          questDetailDropItemsList.Add(json1 != null ? new WebAPI.Response.BattleCharacterQuestDetailDrop_items((Dictionary<string, object>) json1) : (WebAPI.Response.BattleCharacterQuestDetailDrop_items) null);
        this.drop_items = questDetailDropItemsList.ToArray();
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.enemy_info_list = json[nameof (enemy_info_list)] != null ? new WebAPI.Response.BattleCharacterQuestDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]) : (WebAPI.Response.BattleCharacterQuestDetailEnemy_info_list) null;
        this.quest_name = (string) json[nameof (quest_name)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
      }
    }

    [Serializable]
    public class BattleCharacterQuestDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public BattleCharacterQuestDetailEnemy_info_list()
      {
      }

      public BattleCharacterQuestDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 != null ? new WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1) : (WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_list) null);
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleCharacterQuestDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public BattleCharacterQuestDetailEnemy_info_listUnit_list()
      {
      }

      public BattleCharacterQuestDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] != null ? new WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]) : (WebAPI.Response.BattleCharacterQuestDetailEnemy_info_listUnit_listGear) null;
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class BattleCharacterQuestDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public BattleCharacterQuestDetailEnemy_info_listUnit_listGear()
      {
      }

      public BattleCharacterQuestDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class BattleCharacterQuestDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleCharacterQuestDetailDrop_items()
      {
      }

      public BattleCharacterQuestDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleCharacterStart : KeyCompare
    {
      public int[] enemy;
      public int deck_type_id;
      public int quest_s_id;
      public int[] user_deck_enemy;
      public WebAPI.Response.BattleCharacterStartPanel_item[] panel_item;
      public string battle_uuid;
      public string support_player_id;
      public WebAPI.Response.BattleCharacterStartUser_deck_enemy_item[] user_deck_enemy_item;
      public bool battle_start;
      public PlayerUnit[] user_deck_units;
      public PlayerUnit[] helper_player_units;
      public int quest_type;
      public Player player;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public PlayerItem[] helper_player_gears;
      public PlayerItem[] user_deck_gears;
      public int quest_loop_count;
      public WebAPI.Response.BattleCharacterStartEnemy_item[] enemy_item;
      public int deck_number;
      public int[] panel;

      public BattleCharacterStart()
      {
      }

      public BattleCharacterStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<WebAPI.Response.BattleCharacterStartPanel_item> characterStartPanelItemList = new List<WebAPI.Response.BattleCharacterStartPanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          characterStartPanelItemList.Add(json1 != null ? new WebAPI.Response.BattleCharacterStartPanel_item((Dictionary<string, object>) json1) : (WebAPI.Response.BattleCharacterStartPanel_item) null);
        this.panel_item = characterStartPanelItemList.ToArray();
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.support_player_id = json[nameof (support_player_id)] != null ? (string) json[nameof (support_player_id)] : (string) null;
        List<WebAPI.Response.BattleCharacterStartUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.BattleCharacterStartUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 != null ? new WebAPI.Response.BattleCharacterStartUser_deck_enemy_item((Dictionary<string, object>) json2) : (WebAPI.Response.BattleCharacterStartUser_deck_enemy_item) null);
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList1.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.user_deck_units = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.helper_player_units = playerUnitList2.ToArray();
        this.quest_type = (int) (long) json[nameof (quest_type)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json5 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json5 != null ? new PlayerHelper((Dictionary<string, object>) json5) : (PlayerHelper) null);
        this.helpers = playerHelperList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json6 != null ? new PlayerItem((Dictionary<string, object>) json6) : (PlayerItem) null);
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json7 != null ? new PlayerItem((Dictionary<string, object>) json7) : (PlayerItem) null);
        this.user_deck_gears = playerItemList2.ToArray();
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<WebAPI.Response.BattleCharacterStartEnemy_item> characterStartEnemyItemList = new List<WebAPI.Response.BattleCharacterStartEnemy_item>();
        foreach (object json8 in (List<object>) json[nameof (enemy_item)])
          characterStartEnemyItemList.Add(json8 != null ? new WebAPI.Response.BattleCharacterStartEnemy_item((Dictionary<string, object>) json8) : (WebAPI.Response.BattleCharacterStartEnemy_item) null);
        this.enemy_item = characterStartEnemyItemList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleCharacterStartEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleCharacterStartEnemy_item()
      {
      }

      public BattleCharacterStartEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleCharacterStartUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleCharacterStartUser_deck_enemy_item()
      {
      }

      public BattleCharacterStartUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleCharacterStartPanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleCharacterStartPanel_item()
      {
      }

      public BattleCharacterStartPanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleContinueCount : KeyCompare
    {
      public bool is_success;

      public BattleContinueCount()
      {
      }

      public BattleContinueCount(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class BattleExtraFinish : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerHelper[] player_helpers;
      public PlayerUnit[] player_units;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public BattleEnd battle_finish;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerStoryQuestS[] player_story_quests;

      public BattleExtraFinish()
      {
      }

      public BattleExtraFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json2 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json2) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json3 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json3 != null ? new PlayerHelper((Dictionary<string, object>) json3) : (PlayerHelper) null);
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 != null ? new PlayerItem((Dictionary<string, object>) json5) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json6 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json6 != null ? new PlayerMissionHistory((Dictionary<string, object>) json6) : (PlayerMissionHistory) null);
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json7 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json7 != null ? new QuestScoreBonusTimetable((Dictionary<string, object>) json7) : (QuestScoreBonusTimetable) null);
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.battle_finish = json[nameof (battle_finish)] != null ? new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]) : (BattleEnd) null;
        SMManager.Change<BattleEnd>(this.battle_finish);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json10 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json10 != null ? new PlayerStoryQuestS((Dictionary<string, object>) json10) : (PlayerStoryQuestS) null);
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_presents:delete"))
          SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class BattleExtraQuestDetail : KeyCompare
    {
      public WebAPI.Response.BattleExtraQuestDetailDrop_items[] drop_items;
      public bool drop_info_display_flag;
      public WebAPI.Response.BattleExtraQuestDetailEnemy_info_list enemy_info_list;
      public string quest_name;
      public string recommend_strength;

      public BattleExtraQuestDetail()
      {
      }

      public BattleExtraQuestDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleExtraQuestDetailDrop_items> questDetailDropItemsList = new List<WebAPI.Response.BattleExtraQuestDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          questDetailDropItemsList.Add(json1 != null ? new WebAPI.Response.BattleExtraQuestDetailDrop_items((Dictionary<string, object>) json1) : (WebAPI.Response.BattleExtraQuestDetailDrop_items) null);
        this.drop_items = questDetailDropItemsList.ToArray();
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.enemy_info_list = json[nameof (enemy_info_list)] != null ? new WebAPI.Response.BattleExtraQuestDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]) : (WebAPI.Response.BattleExtraQuestDetailEnemy_info_list) null;
        this.quest_name = (string) json[nameof (quest_name)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
      }
    }

    [Serializable]
    public class BattleExtraQuestDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public BattleExtraQuestDetailEnemy_info_list()
      {
      }

      public BattleExtraQuestDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 != null ? new WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1) : (WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_list) null);
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleExtraQuestDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public BattleExtraQuestDetailEnemy_info_listUnit_list()
      {
      }

      public BattleExtraQuestDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] != null ? new WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]) : (WebAPI.Response.BattleExtraQuestDetailEnemy_info_listUnit_listGear) null;
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class BattleExtraQuestDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public BattleExtraQuestDetailEnemy_info_listUnit_listGear()
      {
      }

      public BattleExtraQuestDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class BattleExtraQuestDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleExtraQuestDetailDrop_items()
      {
      }

      public BattleExtraQuestDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleExtraStart : KeyCompare
    {
      public int[] enemy;
      public int deck_type_id;
      public int quest_s_id;
      public int[] user_deck_enemy;
      public WebAPI.Response.BattleExtraStartPanel_item[] panel_item;
      public string battle_uuid;
      public string support_player_id;
      public WebAPI.Response.BattleExtraStartUser_deck_enemy_item[] user_deck_enemy_item;
      public bool battle_start;
      public PlayerUnit[] user_deck_units;
      public PlayerUnit[] helper_player_units;
      public int quest_type;
      public Player player;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public PlayerItem[] helper_player_gears;
      public PlayerItem[] user_deck_gears;
      public int quest_loop_count;
      public WebAPI.Response.BattleExtraStartEnemy_item[] enemy_item;
      public int deck_number;
      public int[] panel;

      public BattleExtraStart()
      {
      }

      public BattleExtraStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<WebAPI.Response.BattleExtraStartPanel_item> extraStartPanelItemList = new List<WebAPI.Response.BattleExtraStartPanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          extraStartPanelItemList.Add(json1 != null ? new WebAPI.Response.BattleExtraStartPanel_item((Dictionary<string, object>) json1) : (WebAPI.Response.BattleExtraStartPanel_item) null);
        this.panel_item = extraStartPanelItemList.ToArray();
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.support_player_id = json[nameof (support_player_id)] != null ? (string) json[nameof (support_player_id)] : (string) null;
        List<WebAPI.Response.BattleExtraStartUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.BattleExtraStartUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 != null ? new WebAPI.Response.BattleExtraStartUser_deck_enemy_item((Dictionary<string, object>) json2) : (WebAPI.Response.BattleExtraStartUser_deck_enemy_item) null);
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList1.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.user_deck_units = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.helper_player_units = playerUnitList2.ToArray();
        this.quest_type = (int) (long) json[nameof (quest_type)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json5 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json5 != null ? new PlayerHelper((Dictionary<string, object>) json5) : (PlayerHelper) null);
        this.helpers = playerHelperList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json6 != null ? new PlayerItem((Dictionary<string, object>) json6) : (PlayerItem) null);
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json7 != null ? new PlayerItem((Dictionary<string, object>) json7) : (PlayerItem) null);
        this.user_deck_gears = playerItemList2.ToArray();
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<WebAPI.Response.BattleExtraStartEnemy_item> extraStartEnemyItemList = new List<WebAPI.Response.BattleExtraStartEnemy_item>();
        foreach (object json8 in (List<object>) json[nameof (enemy_item)])
          extraStartEnemyItemList.Add(json8 != null ? new WebAPI.Response.BattleExtraStartEnemy_item((Dictionary<string, object>) json8) : (WebAPI.Response.BattleExtraStartEnemy_item) null);
        this.enemy_item = extraStartEnemyItemList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleExtraStartEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleExtraStartEnemy_item()
      {
      }

      public BattleExtraStartEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleExtraStartUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleExtraStartUser_deck_enemy_item()
      {
      }

      public BattleExtraStartUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleExtraStartPanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleExtraStartPanel_item()
      {
      }

      public BattleExtraStartPanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleForceClose : KeyCompare
    {
      public BattleForceClose()
      {
      }

      public BattleForceClose(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class BattleHarmonyFinish : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerHelper[] player_helpers;
      public PlayerUnit[] player_units;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public BattleEnd battle_finish;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerStoryQuestS[] player_story_quests;

      public BattleHarmonyFinish()
      {
      }

      public BattleHarmonyFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json2 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json2) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json3 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json3 != null ? new PlayerHelper((Dictionary<string, object>) json3) : (PlayerHelper) null);
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 != null ? new PlayerItem((Dictionary<string, object>) json5) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json6 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json6 != null ? new PlayerMissionHistory((Dictionary<string, object>) json6) : (PlayerMissionHistory) null);
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json7 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json7 != null ? new QuestScoreBonusTimetable((Dictionary<string, object>) json7) : (QuestScoreBonusTimetable) null);
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.battle_finish = json[nameof (battle_finish)] != null ? new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]) : (BattleEnd) null;
        SMManager.Change<BattleEnd>(this.battle_finish);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json10 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json10 != null ? new PlayerStoryQuestS((Dictionary<string, object>) json10) : (PlayerStoryQuestS) null);
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_presents:delete"))
          SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class BattleHarmonyQuestDetail : KeyCompare
    {
      public WebAPI.Response.BattleHarmonyQuestDetailDrop_items[] drop_items;
      public bool drop_info_display_flag;
      public WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_list enemy_info_list;
      public string quest_name;
      public string recommend_strength;

      public BattleHarmonyQuestDetail()
      {
      }

      public BattleHarmonyQuestDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleHarmonyQuestDetailDrop_items> questDetailDropItemsList = new List<WebAPI.Response.BattleHarmonyQuestDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          questDetailDropItemsList.Add(json1 != null ? new WebAPI.Response.BattleHarmonyQuestDetailDrop_items((Dictionary<string, object>) json1) : (WebAPI.Response.BattleHarmonyQuestDetailDrop_items) null);
        this.drop_items = questDetailDropItemsList.ToArray();
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.enemy_info_list = json[nameof (enemy_info_list)] != null ? new WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]) : (WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_list) null;
        this.quest_name = (string) json[nameof (quest_name)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
      }
    }

    [Serializable]
    public class BattleHarmonyQuestDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public BattleHarmonyQuestDetailEnemy_info_list()
      {
      }

      public BattleHarmonyQuestDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 != null ? new WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1) : (WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_list) null);
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleHarmonyQuestDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public BattleHarmonyQuestDetailEnemy_info_listUnit_list()
      {
      }

      public BattleHarmonyQuestDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] != null ? new WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]) : (WebAPI.Response.BattleHarmonyQuestDetailEnemy_info_listUnit_listGear) null;
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class BattleHarmonyQuestDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public BattleHarmonyQuestDetailEnemy_info_listUnit_listGear()
      {
      }

      public BattleHarmonyQuestDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class BattleHarmonyQuestDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleHarmonyQuestDetailDrop_items()
      {
      }

      public BattleHarmonyQuestDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleHarmonyStart : KeyCompare
    {
      public int[] enemy;
      public int deck_type_id;
      public int quest_s_id;
      public int[] user_deck_enemy;
      public WebAPI.Response.BattleHarmonyStartPanel_item[] panel_item;
      public string battle_uuid;
      public string support_player_id;
      public WebAPI.Response.BattleHarmonyStartUser_deck_enemy_item[] user_deck_enemy_item;
      public bool battle_start;
      public PlayerUnit[] user_deck_units;
      public PlayerUnit[] helper_player_units;
      public int quest_type;
      public Player player;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public PlayerItem[] helper_player_gears;
      public PlayerItem[] user_deck_gears;
      public int quest_loop_count;
      public WebAPI.Response.BattleHarmonyStartEnemy_item[] enemy_item;
      public int deck_number;
      public int[] panel;

      public BattleHarmonyStart()
      {
      }

      public BattleHarmonyStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<WebAPI.Response.BattleHarmonyStartPanel_item> harmonyStartPanelItemList = new List<WebAPI.Response.BattleHarmonyStartPanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          harmonyStartPanelItemList.Add(json1 != null ? new WebAPI.Response.BattleHarmonyStartPanel_item((Dictionary<string, object>) json1) : (WebAPI.Response.BattleHarmonyStartPanel_item) null);
        this.panel_item = harmonyStartPanelItemList.ToArray();
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.support_player_id = json[nameof (support_player_id)] != null ? (string) json[nameof (support_player_id)] : (string) null;
        List<WebAPI.Response.BattleHarmonyStartUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.BattleHarmonyStartUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 != null ? new WebAPI.Response.BattleHarmonyStartUser_deck_enemy_item((Dictionary<string, object>) json2) : (WebAPI.Response.BattleHarmonyStartUser_deck_enemy_item) null);
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList1.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.user_deck_units = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.helper_player_units = playerUnitList2.ToArray();
        this.quest_type = (int) (long) json[nameof (quest_type)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json5 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json5 != null ? new PlayerHelper((Dictionary<string, object>) json5) : (PlayerHelper) null);
        this.helpers = playerHelperList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json6 != null ? new PlayerItem((Dictionary<string, object>) json6) : (PlayerItem) null);
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json7 != null ? new PlayerItem((Dictionary<string, object>) json7) : (PlayerItem) null);
        this.user_deck_gears = playerItemList2.ToArray();
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<WebAPI.Response.BattleHarmonyStartEnemy_item> harmonyStartEnemyItemList = new List<WebAPI.Response.BattleHarmonyStartEnemy_item>();
        foreach (object json8 in (List<object>) json[nameof (enemy_item)])
          harmonyStartEnemyItemList.Add(json8 != null ? new WebAPI.Response.BattleHarmonyStartEnemy_item((Dictionary<string, object>) json8) : (WebAPI.Response.BattleHarmonyStartEnemy_item) null);
        this.enemy_item = harmonyStartEnemyItemList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleHarmonyStartEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleHarmonyStartEnemy_item()
      {
      }

      public BattleHarmonyStartEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleHarmonyStartUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleHarmonyStartUser_deck_enemy_item()
      {
      }

      public BattleHarmonyStartUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleHarmonyStartPanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleHarmonyStartPanel_item()
      {
      }

      public BattleHarmonyStartPanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleResume : KeyCompare
    {
      public WebAPI.Response.BattleResumePanel_item[] panel_item;
      public Player player;
      public WebAPI.Response.BattleResumeUser_deck_enemy_item[] user_deck_enemy_item;
      public PlayerItem[] helper_player_gears;
      public BattleWaveStageInfo[] wave_stage;
      public PlayerUnit[] helper_player_units;
      public PlayerCharacterQuestS[] player_character_quests;
      public PlayerExtraQuestS[] player_extra_quests;
      public int quest_loop_count;
      public PlayerItem[] user_deck_gears;
      public WebAPI.Response.BattleResumeEnemy_item[] enemy_item;
      public int deck_number;
      public int deck_type_id;
      public string battle_uuid;
      public bool battle_start;
      public int[] user_deck_enemy;
      public PlayerHarmonyQuestS[] player_harmony_quests;
      public PlayerUnit[] user_deck_units;
      public int[] panel;
      public int[] enemy;
      public int quest_type;
      public string support_player_id;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public int quest_s_id;

      public BattleResume()
      {
      }

      public BattleResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleResumePanel_item> battleResumePanelItemList = new List<WebAPI.Response.BattleResumePanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          battleResumePanelItemList.Add(json1 != null ? new WebAPI.Response.BattleResumePanel_item((Dictionary<string, object>) json1) : (WebAPI.Response.BattleResumePanel_item) null);
        this.panel_item = battleResumePanelItemList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<WebAPI.Response.BattleResumeUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.BattleResumeUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 != null ? new WebAPI.Response.BattleResumeUser_deck_enemy_item((Dictionary<string, object>) json2) : (WebAPI.Response.BattleResumeUser_deck_enemy_item) null);
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json3 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json3 != null ? new PlayerItem((Dictionary<string, object>) json3) : (PlayerItem) null);
        this.helper_player_gears = playerItemList1.ToArray();
        List<BattleWaveStageInfo> battleWaveStageInfoList = new List<BattleWaveStageInfo>();
        foreach (object json4 in (List<object>) json[nameof (wave_stage)])
          battleWaveStageInfoList.Add(json4 != null ? new BattleWaveStageInfo((Dictionary<string, object>) json4) : (BattleWaveStageInfo) null);
        this.wave_stage = battleWaveStageInfoList.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json5 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList1.Add(json5 != null ? new PlayerUnit((Dictionary<string, object>) json5) : (PlayerUnit) null);
        this.helper_player_units = playerUnitList1.ToArray();
        List<PlayerCharacterQuestS> playerCharacterQuestSList = new List<PlayerCharacterQuestS>();
        foreach (object json6 in (List<object>) json[nameof (player_character_quests)])
          playerCharacterQuestSList.Add(json6 != null ? new PlayerCharacterQuestS((Dictionary<string, object>) json6) : (PlayerCharacterQuestS) null);
        this.player_character_quests = playerCharacterQuestSList.ToArray();
        SMManager.UpdateList<PlayerCharacterQuestS>(this.player_character_quests);
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json7 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json7 != null ? new PlayerExtraQuestS((Dictionary<string, object>) json7) : (PlayerExtraQuestS) null);
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests);
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json8 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json8 != null ? new PlayerItem((Dictionary<string, object>) json8) : (PlayerItem) null);
        this.user_deck_gears = playerItemList2.ToArray();
        List<WebAPI.Response.BattleResumeEnemy_item> battleResumeEnemyItemList = new List<WebAPI.Response.BattleResumeEnemy_item>();
        foreach (object json9 in (List<object>) json[nameof (enemy_item)])
          battleResumeEnemyItemList.Add(json9 != null ? new WebAPI.Response.BattleResumeEnemy_item((Dictionary<string, object>) json9) : (WebAPI.Response.BattleResumeEnemy_item) null);
        this.enemy_item = battleResumeEnemyItemList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.battle_start = (bool) json[nameof (battle_start)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHarmonyQuestS> playerHarmonyQuestSList = new List<PlayerHarmonyQuestS>();
        foreach (object json10 in (List<object>) json[nameof (player_harmony_quests)])
          playerHarmonyQuestSList.Add(json10 != null ? new PlayerHarmonyQuestS((Dictionary<string, object>) json10) : (PlayerHarmonyQuestS) null);
        this.player_harmony_quests = playerHarmonyQuestSList.ToArray();
        SMManager.UpdateList<PlayerHarmonyQuestS>(this.player_harmony_quests);
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json11 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList2.Add(json11 != null ? new PlayerUnit((Dictionary<string, object>) json11) : (PlayerUnit) null);
        this.user_deck_units = playerUnitList2.ToArray();
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.quest_type = (int) (long) json[nameof (quest_type)];
        this.support_player_id = json[nameof (support_player_id)] != null ? (string) json[nameof (support_player_id)] : (string) null;
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json12 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json12 != null ? new PlayerHelper((Dictionary<string, object>) json12) : (PlayerHelper) null);
        this.helpers = playerHelperList.ToArray();
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class BattleResumeEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleResumeEnemy_item()
      {
      }

      public BattleResumeEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleResumeUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleResumeUser_deck_enemy_item()
      {
      }

      public BattleResumeUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleResumePanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleResumePanel_item()
      {
      }

      public BattleResumePanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleRetire : KeyCompare
    {
      public BattleRetire()
      {
      }

      public BattleRetire(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class BattleStoryFinish : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerHelper[] player_helpers;
      public PlayerUnit[] player_units;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public BattleEnd battle_finish;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerStoryQuestS[] player_story_quests;

      public BattleStoryFinish()
      {
      }

      public BattleStoryFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json2 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json2) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json3 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json3 != null ? new PlayerHelper((Dictionary<string, object>) json3) : (PlayerHelper) null);
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 != null ? new PlayerItem((Dictionary<string, object>) json5) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json6 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json6 != null ? new PlayerMissionHistory((Dictionary<string, object>) json6) : (PlayerMissionHistory) null);
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json7 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json7 != null ? new QuestScoreBonusTimetable((Dictionary<string, object>) json7) : (QuestScoreBonusTimetable) null);
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        this.battle_finish = json[nameof (battle_finish)] != null ? new BattleEnd((Dictionary<string, object>) json[nameof (battle_finish)]) : (BattleEnd) null;
        SMManager.Change<BattleEnd>(this.battle_finish);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json10 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json10 != null ? new PlayerStoryQuestS((Dictionary<string, object>) json10) : (PlayerStoryQuestS) null);
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_presents:delete"))
          SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class BattleStoryQuestDetail : KeyCompare
    {
      public WebAPI.Response.BattleStoryQuestDetailDrop_items[] drop_items;
      public bool drop_info_display_flag;
      public WebAPI.Response.BattleStoryQuestDetailEnemy_info_list enemy_info_list;
      public string quest_name;
      public string recommend_strength;

      public BattleStoryQuestDetail()
      {
      }

      public BattleStoryQuestDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleStoryQuestDetailDrop_items> questDetailDropItemsList = new List<WebAPI.Response.BattleStoryQuestDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          questDetailDropItemsList.Add(json1 != null ? new WebAPI.Response.BattleStoryQuestDetailDrop_items((Dictionary<string, object>) json1) : (WebAPI.Response.BattleStoryQuestDetailDrop_items) null);
        this.drop_items = questDetailDropItemsList.ToArray();
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.enemy_info_list = json[nameof (enemy_info_list)] != null ? new WebAPI.Response.BattleStoryQuestDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]) : (WebAPI.Response.BattleStoryQuestDetailEnemy_info_list) null;
        this.quest_name = (string) json[nameof (quest_name)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
      }
    }

    [Serializable]
    public class BattleStoryQuestDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public BattleStoryQuestDetailEnemy_info_list()
      {
      }

      public BattleStoryQuestDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 != null ? new WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1) : (WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_list) null);
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleStoryQuestDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public BattleStoryQuestDetailEnemy_info_listUnit_list()
      {
      }

      public BattleStoryQuestDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] != null ? new WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]) : (WebAPI.Response.BattleStoryQuestDetailEnemy_info_listUnit_listGear) null;
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class BattleStoryQuestDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public BattleStoryQuestDetailEnemy_info_listUnit_listGear()
      {
      }

      public BattleStoryQuestDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class BattleStoryQuestDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleStoryQuestDetailDrop_items()
      {
      }

      public BattleStoryQuestDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleStoryStart : KeyCompare
    {
      public int[] enemy;
      public int deck_type_id;
      public int quest_s_id;
      public int[] user_deck_enemy;
      public WebAPI.Response.BattleStoryStartPanel_item[] panel_item;
      public string battle_uuid;
      public string support_player_id;
      public WebAPI.Response.BattleStoryStartUser_deck_enemy_item[] user_deck_enemy_item;
      public bool battle_start;
      public PlayerUnit[] user_deck_units;
      public PlayerUnit[] helper_player_units;
      public int quest_type;
      public Player player;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public PlayerItem[] helper_player_gears;
      public PlayerItem[] user_deck_gears;
      public int quest_loop_count;
      public WebAPI.Response.BattleStoryStartEnemy_item[] enemy_item;
      public int deck_number;
      public int[] panel;

      public BattleStoryStart()
      {
      }

      public BattleStoryStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.enemy = ((IEnumerable<object>) json[nameof (enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
        this.user_deck_enemy = ((IEnumerable<object>) json[nameof (user_deck_enemy)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<WebAPI.Response.BattleStoryStartPanel_item> storyStartPanelItemList = new List<WebAPI.Response.BattleStoryStartPanel_item>();
        foreach (object json1 in (List<object>) json[nameof (panel_item)])
          storyStartPanelItemList.Add(json1 != null ? new WebAPI.Response.BattleStoryStartPanel_item((Dictionary<string, object>) json1) : (WebAPI.Response.BattleStoryStartPanel_item) null);
        this.panel_item = storyStartPanelItemList.ToArray();
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.support_player_id = json[nameof (support_player_id)] != null ? (string) json[nameof (support_player_id)] : (string) null;
        List<WebAPI.Response.BattleStoryStartUser_deck_enemy_item> userDeckEnemyItemList = new List<WebAPI.Response.BattleStoryStartUser_deck_enemy_item>();
        foreach (object json2 in (List<object>) json[nameof (user_deck_enemy_item)])
          userDeckEnemyItemList.Add(json2 != null ? new WebAPI.Response.BattleStoryStartUser_deck_enemy_item((Dictionary<string, object>) json2) : (WebAPI.Response.BattleStoryStartUser_deck_enemy_item) null);
        this.user_deck_enemy_item = userDeckEnemyItemList.ToArray();
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (user_deck_units)])
          playerUnitList1.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.user_deck_units = playerUnitList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList2.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.helper_player_units = playerUnitList2.ToArray();
        this.quest_type = (int) (long) json[nameof (quest_type)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json5 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json5 != null ? new PlayerHelper((Dictionary<string, object>) json5) : (PlayerHelper) null);
        this.helpers = playerHelperList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList1.Add(json6 != null ? new PlayerItem((Dictionary<string, object>) json6) : (PlayerItem) null);
        this.helper_player_gears = playerItemList1.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (user_deck_gears)])
          playerItemList2.Add(json7 != null ? new PlayerItem((Dictionary<string, object>) json7) : (PlayerItem) null);
        this.user_deck_gears = playerItemList2.ToArray();
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<WebAPI.Response.BattleStoryStartEnemy_item> storyStartEnemyItemList = new List<WebAPI.Response.BattleStoryStartEnemy_item>();
        foreach (object json8 in (List<object>) json[nameof (enemy_item)])
          storyStartEnemyItemList.Add(json8 != null ? new WebAPI.Response.BattleStoryStartEnemy_item((Dictionary<string, object>) json8) : (WebAPI.Response.BattleStoryStartEnemy_item) null);
        this.enemy_item = storyStartEnemyItemList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.panel = ((IEnumerable<object>) json[nameof (panel)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleStoryStartEnemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleStoryStartEnemy_item()
      {
      }

      public BattleStoryStartEnemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleStoryStartUser_deck_enemy_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleStoryStartUser_deck_enemy_item()
      {
      }

      public BattleStoryStartUser_deck_enemy_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleStoryStartPanel_item : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleStoryStartPanel_item()
      {
      }

      public BattleStoryStartPanel_item(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleWaveQuestDetail : KeyCompare
    {
      public WebAPI.Response.BattleWaveQuestDetailDrop_items[] drop_items;
      public bool drop_info_display_flag;
      public WebAPI.Response.BattleWaveQuestDetailEnemy_info_list enemy_info_list;
      public string quest_name;
      public string recommend_strength;

      public BattleWaveQuestDetail()
      {
      }

      public BattleWaveQuestDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleWaveQuestDetailDrop_items> questDetailDropItemsList = new List<WebAPI.Response.BattleWaveQuestDetailDrop_items>();
        foreach (object json1 in (List<object>) json[nameof (drop_items)])
          questDetailDropItemsList.Add(json1 != null ? new WebAPI.Response.BattleWaveQuestDetailDrop_items((Dictionary<string, object>) json1) : (WebAPI.Response.BattleWaveQuestDetailDrop_items) null);
        this.drop_items = questDetailDropItemsList.ToArray();
        this.drop_info_display_flag = (bool) json[nameof (drop_info_display_flag)];
        this.enemy_info_list = json[nameof (enemy_info_list)] != null ? new WebAPI.Response.BattleWaveQuestDetailEnemy_info_list((Dictionary<string, object>) json[nameof (enemy_info_list)]) : (WebAPI.Response.BattleWaveQuestDetailEnemy_info_list) null;
        this.quest_name = (string) json[nameof (quest_name)];
        this.recommend_strength = (string) json[nameof (recommend_strength)];
      }
    }

    [Serializable]
    public class BattleWaveQuestDetailEnemy_info_list : KeyCompare
    {
      public WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_list[] unit_list;
      public int[] kind_ids;

      public BattleWaveQuestDetailEnemy_info_list()
      {
      }

      public BattleWaveQuestDetailEnemy_info_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_list> infoListUnitListList = new List<WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_list>();
        foreach (object json1 in (List<object>) json[nameof (unit_list)])
          infoListUnitListList.Add(json1 != null ? new WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_list((Dictionary<string, object>) json1) : (WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_list) null);
        this.unit_list = infoListUnitListList.ToArray();
        this.kind_ids = ((IEnumerable<object>) json[nameof (kind_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class BattleWaveQuestDetailEnemy_info_listUnit_list : KeyCompare
    {
      public int[] skill_ids;
      public WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_listGear gear;
      public int unit_id;

      public BattleWaveQuestDetailEnemy_info_listUnit_list()
      {
      }

      public BattleWaveQuestDetailEnemy_info_listUnit_list(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.skill_ids = ((IEnumerable<object>) json[nameof (skill_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.gear = json[nameof (gear)] != null ? new WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_listGear((Dictionary<string, object>) json[nameof (gear)]) : (WebAPI.Response.BattleWaveQuestDetailEnemy_info_listUnit_listGear) null;
        this.unit_id = (int) (long) json[nameof (unit_id)];
      }
    }

    [Serializable]
    public class BattleWaveQuestDetailEnemy_info_listUnit_listGear : KeyCompare
    {
      public int gear_id;
      public int rank;

      public BattleWaveQuestDetailEnemy_info_listUnit_listGear()
      {
      }

      public BattleWaveQuestDetailEnemy_info_listUnit_listGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gear_id = (int) (long) json[nameof (gear_id)];
        this.rank = (int) (long) json[nameof (rank)];
      }
    }

    [Serializable]
    public class BattleWaveQuestDetailDrop_items : KeyCompare
    {
      public int reward_quantity;
      public int id;
      public int reward_id;
      public int reward_type_id;

      public BattleWaveQuestDetailDrop_items()
      {
      }

      public BattleWaveQuestDetailDrop_items(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.id = (int) (long) json[nameof (id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class BattleWaveStart : KeyCompare
    {
      public int deck_type_id;
      public BattleWaveStageInfo[] wave_stage;
      public int quest_s_id;
      public string battle_uuid;
      public string support_player_id;
      public bool battle_start;
      public PlayerUnit[] helper_player_units;
      public int quest_type;
      public Player player;
      public int[] guest_ids;
      public PlayerHelper[] helpers;
      public int deck_number;
      public int quest_loop_count;
      public PlayerItem[] helper_player_gears;

      public BattleWaveStart()
      {
      }

      public BattleWaveStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.deck_type_id = (int) (long) json[nameof (deck_type_id)];
        List<BattleWaveStageInfo> battleWaveStageInfoList = new List<BattleWaveStageInfo>();
        foreach (object json1 in (List<object>) json[nameof (wave_stage)])
          battleWaveStageInfoList.Add(json1 != null ? new BattleWaveStageInfo((Dictionary<string, object>) json1) : (BattleWaveStageInfo) null);
        this.wave_stage = battleWaveStageInfoList.ToArray();
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.support_player_id = json[nameof (support_player_id)] != null ? (string) json[nameof (support_player_id)] : (string) null;
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (helper_player_units)])
          playerUnitList.Add(json2 != null ? new PlayerUnit((Dictionary<string, object>) json2) : (PlayerUnit) null);
        this.helper_player_units = playerUnitList.ToArray();
        this.quest_type = (int) (long) json[nameof (quest_type)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.guest_ids = ((IEnumerable<object>) json[nameof (guest_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json3 in (List<object>) json[nameof (helpers)])
          playerHelperList.Add(json3 != null ? new PlayerHelper((Dictionary<string, object>) json3) : (PlayerHelper) null);
        this.helpers = playerHelperList.ToArray();
        this.deck_number = (int) (long) json[nameof (deck_number)];
        this.quest_loop_count = (int) (long) json[nameof (quest_loop_count)];
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (helper_player_gears)])
          playerItemList.Add(json4 != null ? new PlayerItem((Dictionary<string, object>) json4) : (PlayerItem) null);
        this.helper_player_gears = playerItemList.ToArray();
      }
    }

    [Serializable]
    public class BingoIndex : KeyCompare
    {
      public Player player;
      public PlayerBingo[] player_bingo;

      public BingoIndex()
      {
      }

      public BingoIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerBingo> playerBingoList = new List<PlayerBingo>();
        foreach (object json1 in (List<object>) json[nameof (player_bingo)])
          playerBingoList.Add(json1 != null ? new PlayerBingo((Dictionary<string, object>) json1) : (PlayerBingo) null);
        this.player_bingo = playerBingoList.ToArray();
        SMManager.UpdateList<PlayerBingo>(this.player_bingo);
      }
    }

    [Serializable]
    public class BingoOpenCheck : KeyCompare
    {
      public PlayerBingo[] player_bingo;

      public BingoOpenCheck()
      {
      }

      public BingoOpenCheck(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerBingo> playerBingoList = new List<PlayerBingo>();
        foreach (object json1 in (List<object>) json[nameof (player_bingo)])
          playerBingoList.Add(json1 != null ? new PlayerBingo((Dictionary<string, object>) json1) : (PlayerBingo) null);
        this.player_bingo = playerBingoList.ToArray();
        SMManager.UpdateList<PlayerBingo>(this.player_bingo);
      }
    }

    [Serializable]
    public class BingoReceiveReward : KeyCompare
    {
      public bool is_complete_receive;
      public bool is_receive;
      public Player player;
      public PlayerBingo[] player_bingo;
      public PlayerPresent[] player_presents;

      public BingoReceiveReward()
      {
      }

      public BingoReceiveReward(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_complete_receive = (bool) json[nameof (is_complete_receive)];
        this.is_receive = (bool) json[nameof (is_receive)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerBingo> playerBingoList = new List<PlayerBingo>();
        foreach (object json1 in (List<object>) json[nameof (player_bingo)])
          playerBingoList.Add(json1 != null ? new PlayerBingo((Dictionary<string, object>) json1) : (PlayerBingo) null);
        this.player_bingo = playerBingoList.ToArray();
        SMManager.UpdateList<PlayerBingo>(this.player_bingo);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 != null ? new PlayerPresent((Dictionary<string, object>) json2) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class BingoReview : KeyCompare
    {
      public Player player;
      public PlayerBingo[] player_bingo;

      public BingoReview()
      {
      }

      public BingoReview(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerBingo> playerBingoList = new List<PlayerBingo>();
        foreach (object json1 in (List<object>) json[nameof (player_bingo)])
          playerBingoList.Add(json1 != null ? new PlayerBingo((Dictionary<string, object>) json1) : (PlayerBingo) null);
        this.player_bingo = playerBingoList.ToArray();
        SMManager.UpdateList<PlayerBingo>(this.player_bingo);
      }
    }

    [Serializable]
    public class BingoSelectComplete : KeyCompare
    {
      public PlayerBingo[] player_bingo;

      public BingoSelectComplete()
      {
      }

      public BingoSelectComplete(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerBingo> playerBingoList = new List<PlayerBingo>();
        foreach (object json1 in (List<object>) json[nameof (player_bingo)])
          playerBingoList.Add(json1 != null ? new PlayerBingo((Dictionary<string, object>) json1) : (PlayerBingo) null);
        this.player_bingo = playerBingoList.ToArray();
        SMManager.UpdateList<PlayerBingo>(this.player_bingo);
      }
    }

    [Serializable]
    public class CoinbonusHistory : KeyCompare
    {
      public Player player;
      public CoinBonus[] coin_bonuses;
      public CoinBonusReward[] coin_bonus_rewards;
      public PlayerCoinBonusHistory[] player_coin_bonus_history;

      public CoinbonusHistory()
      {
      }

      public CoinbonusHistory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json1 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json1 != null ? new CoinBonus((Dictionary<string, object>) json1) : (CoinBonus) null);
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        List<CoinBonusReward> coinBonusRewardList = new List<CoinBonusReward>();
        foreach (object json2 in (List<object>) json[nameof (coin_bonus_rewards)])
          coinBonusRewardList.Add(json2 != null ? new CoinBonusReward((Dictionary<string, object>) json2) : (CoinBonusReward) null);
        this.coin_bonus_rewards = coinBonusRewardList.ToArray();
        SMManager.UpdateList<CoinBonusReward>(this.coin_bonus_rewards);
        List<PlayerCoinBonusHistory> coinBonusHistoryList = new List<PlayerCoinBonusHistory>();
        foreach (object json3 in (List<object>) json[nameof (player_coin_bonus_history)])
          coinBonusHistoryList.Add(json3 != null ? new PlayerCoinBonusHistory((Dictionary<string, object>) json3) : (PlayerCoinBonusHistory) null);
        this.player_coin_bonus_history = coinBonusHistoryList.ToArray();
        SMManager.UpdateList<PlayerCoinBonusHistory>(this.player_coin_bonus_history);
      }
    }

    [Serializable]
    public class CoinbonusPresent : KeyCompare
    {
      public PlayerCoinBonusHistory[] player_coin_bonus_history;
      public CoinBonus[] coin_bonuses;
      public Player player;
      public CoinBonusReward[] coin_bonus_rewards;
      public PlayerPresent[] player_presents;

      public CoinbonusPresent()
      {
      }

      public CoinbonusPresent(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCoinBonusHistory> coinBonusHistoryList = new List<PlayerCoinBonusHistory>();
        foreach (object json1 in (List<object>) json[nameof (player_coin_bonus_history)])
          coinBonusHistoryList.Add(json1 != null ? new PlayerCoinBonusHistory((Dictionary<string, object>) json1) : (PlayerCoinBonusHistory) null);
        this.player_coin_bonus_history = coinBonusHistoryList.ToArray();
        SMManager.UpdateList<PlayerCoinBonusHistory>(this.player_coin_bonus_history);
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json2 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json2 != null ? new CoinBonus((Dictionary<string, object>) json2) : (CoinBonus) null);
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<CoinBonusReward> coinBonusRewardList = new List<CoinBonusReward>();
        foreach (object json3 in (List<object>) json[nameof (coin_bonus_rewards)])
          coinBonusRewardList.Add(json3 != null ? new CoinBonusReward((Dictionary<string, object>) json3) : (CoinBonusReward) null);
        this.coin_bonus_rewards = coinBonusRewardList.ToArray();
        SMManager.UpdateList<CoinBonusReward>(this.coin_bonus_rewards);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json4 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json4 != null ? new PlayerPresent((Dictionary<string, object>) json4) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ColosseumBoot : KeyCompare
    {
      public bool is_battle;
      public int next_battle_type;
      public Bonus[] bonus;
      public bool is_tutorial;
      public Campaign[] campaigns;
      public Player player;
      public ColosseumRecord colosseum_record;
      public Gladiator[] gladiators;

      public ColosseumBoot()
      {
      }

      public ColosseumBoot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.next_battle_type = (int) (long) json[nameof (next_battle_type)];
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json1 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json1 != null ? new Bonus((Dictionary<string, object>) json1) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json2 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json2 != null ? new Campaign((Dictionary<string, object>) json2) : (Campaign) null);
        this.campaigns = campaignList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.colosseum_record = json[nameof (colosseum_record)] != null ? new ColosseumRecord((Dictionary<string, object>) json[nameof (colosseum_record)]) : (ColosseumRecord) null;
        List<Gladiator> gladiatorList = new List<Gladiator>();
        foreach (object json3 in (List<object>) json[nameof (gladiators)])
          gladiatorList.Add(json3 != null ? new Gladiator((Dictionary<string, object>) json3) : (Gladiator) null);
        this.gladiators = gladiatorList.ToArray();
      }
    }

    [Serializable]
    public class ColosseumFinish : KeyCompare
    {
      public bool is_battle;
      public int next_battle_type;
      public bool is_tutorial;
      public Player player;
      public ColosseumEnd colosseum_finish;
      public WebAPI.Response.ColosseumFinishCampaign_next_rewards[] campaign_next_rewards;
      public ColosseumRecord colosseum_record;
      public bool target_player_is_friend;
      public RankUpInfo colosseum_result_rank_up;
      public WebAPI.Response.ColosseumFinishBonus_rewards[] bonus_rewards;
      public PlayerUnit[] player_units;
      public Bonus[] bonus;
      public PlayerItem[] player_items;
      public Campaign[] campaigns;
      public int battle_type;
      public WebAPI.Response.ColosseumFinishCampaign_rewards[] campaign_rewards;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public Gladiator[] gladiators;

      public ColosseumFinish()
      {
      }

      public ColosseumFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.next_battle_type = (int) (long) json[nameof (next_battle_type)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.colosseum_finish = json[nameof (colosseum_finish)] != null ? new ColosseumEnd((Dictionary<string, object>) json[nameof (colosseum_finish)]) : (ColosseumEnd) null;
        List<WebAPI.Response.ColosseumFinishCampaign_next_rewards> campaignNextRewardsList = new List<WebAPI.Response.ColosseumFinishCampaign_next_rewards>();
        foreach (object json1 in (List<object>) json[nameof (campaign_next_rewards)])
          campaignNextRewardsList.Add(json1 != null ? new WebAPI.Response.ColosseumFinishCampaign_next_rewards((Dictionary<string, object>) json1) : (WebAPI.Response.ColosseumFinishCampaign_next_rewards) null);
        this.campaign_next_rewards = campaignNextRewardsList.ToArray();
        this.colosseum_record = json[nameof (colosseum_record)] != null ? new ColosseumRecord((Dictionary<string, object>) json[nameof (colosseum_record)]) : (ColosseumRecord) null;
        this.target_player_is_friend = (bool) json[nameof (target_player_is_friend)];
        this.colosseum_result_rank_up = json[nameof (colosseum_result_rank_up)] != null ? new RankUpInfo((Dictionary<string, object>) json[nameof (colosseum_result_rank_up)]) : (RankUpInfo) null;
        List<WebAPI.Response.ColosseumFinishBonus_rewards> finishBonusRewardsList = new List<WebAPI.Response.ColosseumFinishBonus_rewards>();
        foreach (object json2 in (List<object>) json[nameof (bonus_rewards)])
          finishBonusRewardsList.Add(json2 != null ? new WebAPI.Response.ColosseumFinishBonus_rewards((Dictionary<string, object>) json2) : (WebAPI.Response.ColosseumFinishBonus_rewards) null);
        this.bonus_rewards = finishBonusRewardsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json4 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json4 != null ? new Bonus((Dictionary<string, object>) json4) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 != null ? new PlayerItem((Dictionary<string, object>) json5) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json6 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json6 != null ? new Campaign((Dictionary<string, object>) json6) : (Campaign) null);
        this.campaigns = campaignList.ToArray();
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<WebAPI.Response.ColosseumFinishCampaign_rewards> finishCampaignRewardsList = new List<WebAPI.Response.ColosseumFinishCampaign_rewards>();
        foreach (object json7 in (List<object>) json[nameof (campaign_rewards)])
          finishCampaignRewardsList.Add(json7 != null ? new WebAPI.Response.ColosseumFinishCampaign_rewards((Dictionary<string, object>) json7) : (WebAPI.Response.ColosseumFinishCampaign_rewards) null);
        this.campaign_rewards = finishCampaignRewardsList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json10 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json10 != null ? new PlayerMaterialGear((Dictionary<string, object>) json10) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json11 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json11 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json11) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<Gladiator> gladiatorList = new List<Gladiator>();
        foreach (object json12 in (List<object>) json[nameof (gladiators)])
          gladiatorList.Add(json12 != null ? new Gladiator((Dictionary<string, object>) json12) : (Gladiator) null);
        this.gladiators = gladiatorList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ColosseumFinishCampaign_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public int reward_type_id;
      public int campaign_id;
      public string show_title;
      public string show_text;
      public int reward_id;

      public ColosseumFinishCampaign_rewards()
      {
      }

      public ColosseumFinishCampaign_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.show_title = (string) json[nameof (show_title)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class ColosseumFinishBonus_rewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public ColosseumFinishBonus_rewards()
      {
      }

      public ColosseumFinishBonus_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class ColosseumFinishCampaign_next_rewards : KeyCompare
    {
      public string next_reward_title;
      public int campaign_id;
      public string next_reward_text;

      public ColosseumFinishCampaign_next_rewards()
      {
      }

      public ColosseumFinishCampaign_next_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.next_reward_title = (string) json[nameof (next_reward_title)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.next_reward_text = (string) json[nameof (next_reward_text)];
      }
    }

    [Serializable]
    public class ColosseumForceClose : KeyCompare
    {
      public bool result;

      public ColosseumForceClose()
      {
      }

      public ColosseumForceClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class ColosseumRanking : KeyCompare
    {
      public RankingPlayer my_ranking;
      public RankingPlayer[] colosseum_ranking;
      public RankingPlayer[] colosseum_friend_ranking;

      public ColosseumRanking()
      {
      }

      public ColosseumRanking(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.my_ranking = json[nameof (my_ranking)] != null ? new RankingPlayer((Dictionary<string, object>) json[nameof (my_ranking)]) : (RankingPlayer) null;
        List<RankingPlayer> rankingPlayerList1 = new List<RankingPlayer>();
        foreach (object json1 in (List<object>) json[nameof (colosseum_ranking)])
          rankingPlayerList1.Add(json1 != null ? new RankingPlayer((Dictionary<string, object>) json1) : (RankingPlayer) null);
        this.colosseum_ranking = rankingPlayerList1.ToArray();
        List<RankingPlayer> rankingPlayerList2 = new List<RankingPlayer>();
        foreach (object json2 in (List<object>) json[nameof (colosseum_friend_ranking)])
          rankingPlayerList2.Add(json2 != null ? new RankingPlayer((Dictionary<string, object>) json2) : (RankingPlayer) null);
        this.colosseum_friend_ranking = rankingPlayerList2.ToArray();
      }
    }

    [Serializable]
    public class ColosseumResume : KeyCompare
    {
      public DateTime now;
      public Player player;
      public Bonus[] bonus;
      public PlayerItem[] colosseum_target_player_items;
      public PlayerUnit[] colosseum_player_units;
      public string arena_transaction_id;
      public int battle_type;
      public PlayerUnit[] colosseum_target_player_units;
      public PlayerItem[] colosseum_player_items;
      public Gladiator gladiator;

      public ColosseumResume()
      {
      }

      public ColosseumResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.now = DateTime.Parse((string) json[nameof (now)]);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json1 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json1 != null ? new Bonus((Dictionary<string, object>) json1) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (colosseum_target_player_items)])
          playerItemList1.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.colosseum_target_player_items = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (colosseum_player_units)])
          playerUnitList1.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.colosseum_player_units = playerUnitList1.ToArray();
        this.arena_transaction_id = (string) json[nameof (arena_transaction_id)];
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (colosseum_target_player_units)])
          playerUnitList2.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.colosseum_target_player_units = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (colosseum_player_items)])
          playerItemList2.Add(json5 != null ? new PlayerItem((Dictionary<string, object>) json5) : (PlayerItem) null);
        this.colosseum_player_items = playerItemList2.ToArray();
        this.gladiator = json[nameof (gladiator)] != null ? new Gladiator((Dictionary<string, object>) json[nameof (gladiator)]) : (Gladiator) null;
      }
    }

    [Serializable]
    public class ColosseumStart : KeyCompare
    {
      public DateTime now;
      public Player player;
      public Bonus[] bonus;
      public PlayerItem[] colosseum_target_player_items;
      public PlayerUnit[] colosseum_player_units;
      public string arena_transaction_id;
      public int battle_type;
      public PlayerUnit[] colosseum_target_player_units;
      public PlayerItem[] colosseum_player_items;
      public Gladiator gladiator;

      public ColosseumStart()
      {
      }

      public ColosseumStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.now = DateTime.Parse((string) json[nameof (now)]);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json1 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json1 != null ? new Bonus((Dictionary<string, object>) json1) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (colosseum_target_player_items)])
          playerItemList1.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.colosseum_target_player_items = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (colosseum_player_units)])
          playerUnitList1.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.colosseum_player_units = playerUnitList1.ToArray();
        this.arena_transaction_id = (string) json[nameof (arena_transaction_id)];
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (colosseum_target_player_units)])
          playerUnitList2.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.colosseum_target_player_units = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (colosseum_player_items)])
          playerItemList2.Add(json5 != null ? new PlayerItem((Dictionary<string, object>) json5) : (PlayerItem) null);
        this.colosseum_player_items = playerItemList2.ToArray();
        this.gladiator = json[nameof (gladiator)] != null ? new Gladiator((Dictionary<string, object>) json[nameof (gladiator)]) : (Gladiator) null;
      }
    }

    [Serializable]
    public class ColosseumTutorialBoot : KeyCompare
    {
      public bool is_battle;
      public int next_battle_type;
      public Bonus[] bonus;
      public bool is_tutorial;
      public Campaign[] campaigns;
      public Player player;
      public ColosseumRecord colosseum_record;
      public Gladiator[] gladiators;

      public ColosseumTutorialBoot()
      {
      }

      public ColosseumTutorialBoot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.next_battle_type = (int) (long) json[nameof (next_battle_type)];
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json1 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json1 != null ? new Bonus((Dictionary<string, object>) json1) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json2 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json2 != null ? new Campaign((Dictionary<string, object>) json2) : (Campaign) null);
        this.campaigns = campaignList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.colosseum_record = json[nameof (colosseum_record)] != null ? new ColosseumRecord((Dictionary<string, object>) json[nameof (colosseum_record)]) : (ColosseumRecord) null;
        List<Gladiator> gladiatorList = new List<Gladiator>();
        foreach (object json3 in (List<object>) json[nameof (gladiators)])
          gladiatorList.Add(json3 != null ? new Gladiator((Dictionary<string, object>) json3) : (Gladiator) null);
        this.gladiators = gladiatorList.ToArray();
      }
    }

    [Serializable]
    public class ColosseumTutorialFinish : KeyCompare
    {
      public bool is_battle;
      public int next_battle_type;
      public bool is_tutorial;
      public Player player;
      public bool result;
      public ColosseumEnd colosseum_finish;
      public WebAPI.Response.ColosseumTutorialFinishCampaign_next_rewards[] campaign_next_rewards;
      public ColosseumRecord colosseum_record;
      public bool target_player_is_friend;
      public RankUpInfo colosseum_result_rank_up;
      public WebAPI.Response.ColosseumTutorialFinishBonus_rewards[] bonus_rewards;
      public PlayerUnit[] player_units;
      public Bonus[] bonus;
      public PlayerItem[] player_items;
      public Campaign[] campaigns;
      public int battle_type;
      public WebAPI.Response.ColosseumTutorialFinishCampaign_rewards[] campaign_rewards;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public Gladiator[] gladiators;

      public ColosseumTutorialFinish()
      {
      }

      public ColosseumTutorialFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.next_battle_type = (int) (long) json[nameof (next_battle_type)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.result = (bool) json[nameof (result)];
        this.colosseum_finish = json[nameof (colosseum_finish)] != null ? new ColosseumEnd((Dictionary<string, object>) json[nameof (colosseum_finish)]) : (ColosseumEnd) null;
        List<WebAPI.Response.ColosseumTutorialFinishCampaign_next_rewards> campaignNextRewardsList = new List<WebAPI.Response.ColosseumTutorialFinishCampaign_next_rewards>();
        foreach (object json1 in (List<object>) json[nameof (campaign_next_rewards)])
          campaignNextRewardsList.Add(json1 != null ? new WebAPI.Response.ColosseumTutorialFinishCampaign_next_rewards((Dictionary<string, object>) json1) : (WebAPI.Response.ColosseumTutorialFinishCampaign_next_rewards) null);
        this.campaign_next_rewards = campaignNextRewardsList.ToArray();
        this.colosseum_record = json[nameof (colosseum_record)] != null ? new ColosseumRecord((Dictionary<string, object>) json[nameof (colosseum_record)]) : (ColosseumRecord) null;
        this.target_player_is_friend = (bool) json[nameof (target_player_is_friend)];
        this.colosseum_result_rank_up = json[nameof (colosseum_result_rank_up)] != null ? new RankUpInfo((Dictionary<string, object>) json[nameof (colosseum_result_rank_up)]) : (RankUpInfo) null;
        List<WebAPI.Response.ColosseumTutorialFinishBonus_rewards> finishBonusRewardsList = new List<WebAPI.Response.ColosseumTutorialFinishBonus_rewards>();
        foreach (object json2 in (List<object>) json[nameof (bonus_rewards)])
          finishBonusRewardsList.Add(json2 != null ? new WebAPI.Response.ColosseumTutorialFinishBonus_rewards((Dictionary<string, object>) json2) : (WebAPI.Response.ColosseumTutorialFinishBonus_rewards) null);
        this.bonus_rewards = finishBonusRewardsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json4 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json4 != null ? new Bonus((Dictionary<string, object>) json4) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json5 != null ? new PlayerItem((Dictionary<string, object>) json5) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json6 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json6 != null ? new Campaign((Dictionary<string, object>) json6) : (Campaign) null);
        this.campaigns = campaignList.ToArray();
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<WebAPI.Response.ColosseumTutorialFinishCampaign_rewards> finishCampaignRewardsList = new List<WebAPI.Response.ColosseumTutorialFinishCampaign_rewards>();
        foreach (object json7 in (List<object>) json[nameof (campaign_rewards)])
          finishCampaignRewardsList.Add(json7 != null ? new WebAPI.Response.ColosseumTutorialFinishCampaign_rewards((Dictionary<string, object>) json7) : (WebAPI.Response.ColosseumTutorialFinishCampaign_rewards) null);
        this.campaign_rewards = finishCampaignRewardsList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json10 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json10 != null ? new PlayerMaterialGear((Dictionary<string, object>) json10) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json11 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json11 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json11) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<Gladiator> gladiatorList = new List<Gladiator>();
        foreach (object json12 in (List<object>) json[nameof (gladiators)])
          gladiatorList.Add(json12 != null ? new Gladiator((Dictionary<string, object>) json12) : (Gladiator) null);
        this.gladiators = gladiatorList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ColosseumTutorialFinishCampaign_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public int reward_type_id;
      public int campaign_id;
      public string show_title;
      public string show_text;
      public int reward_id;

      public ColosseumTutorialFinishCampaign_rewards()
      {
      }

      public ColosseumTutorialFinishCampaign_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.show_title = (string) json[nameof (show_title)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class ColosseumTutorialFinishBonus_rewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public ColosseumTutorialFinishBonus_rewards()
      {
      }

      public ColosseumTutorialFinishBonus_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class ColosseumTutorialFinishCampaign_next_rewards : KeyCompare
    {
      public string next_reward_title;
      public int campaign_id;
      public string next_reward_text;

      public ColosseumTutorialFinishCampaign_next_rewards()
      {
      }

      public ColosseumTutorialFinishCampaign_next_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.next_reward_title = (string) json[nameof (next_reward_title)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.next_reward_text = (string) json[nameof (next_reward_text)];
      }
    }

    [Serializable]
    public class ColosseumTutorialForceClose : KeyCompare
    {
      public bool result;

      public ColosseumTutorialForceClose()
      {
      }

      public ColosseumTutorialForceClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class ColosseumTutorialResume : KeyCompare
    {
      public DateTime now;
      public Player player;
      public Bonus[] bonus;
      public PlayerItem[] colosseum_target_player_items;
      public PlayerUnit[] colosseum_player_units;
      public string arena_transaction_id;
      public int battle_type;
      public PlayerUnit[] colosseum_target_player_units;
      public PlayerItem[] colosseum_player_items;
      public Gladiator gladiator;

      public ColosseumTutorialResume()
      {
      }

      public ColosseumTutorialResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.now = DateTime.Parse((string) json[nameof (now)]);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json1 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json1 != null ? new Bonus((Dictionary<string, object>) json1) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (colosseum_target_player_items)])
          playerItemList1.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.colosseum_target_player_items = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (colosseum_player_units)])
          playerUnitList1.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.colosseum_player_units = playerUnitList1.ToArray();
        this.arena_transaction_id = (string) json[nameof (arena_transaction_id)];
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (colosseum_target_player_units)])
          playerUnitList2.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.colosseum_target_player_units = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (colosseum_player_items)])
          playerItemList2.Add(json5 != null ? new PlayerItem((Dictionary<string, object>) json5) : (PlayerItem) null);
        this.colosseum_player_items = playerItemList2.ToArray();
        this.gladiator = json[nameof (gladiator)] != null ? new Gladiator((Dictionary<string, object>) json[nameof (gladiator)]) : (Gladiator) null;
      }
    }

    [Serializable]
    public class ColosseumTutorialStart : KeyCompare
    {
      public DateTime now;
      public Player player;
      public Bonus[] bonus;
      public PlayerItem[] colosseum_target_player_items;
      public PlayerUnit[] colosseum_player_units;
      public string arena_transaction_id;
      public int battle_type;
      public PlayerUnit[] colosseum_target_player_units;
      public PlayerItem[] colosseum_player_items;
      public Gladiator gladiator;

      public ColosseumTutorialStart()
      {
      }

      public ColosseumTutorialStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.now = DateTime.Parse((string) json[nameof (now)]);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json1 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json1 != null ? new Bonus((Dictionary<string, object>) json1) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (colosseum_target_player_items)])
          playerItemList1.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.colosseum_target_player_items = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (colosseum_player_units)])
          playerUnitList1.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.colosseum_player_units = playerUnitList1.ToArray();
        this.arena_transaction_id = (string) json[nameof (arena_transaction_id)];
        this.battle_type = (int) (long) json[nameof (battle_type)];
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (colosseum_target_player_units)])
          playerUnitList2.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.colosseum_target_player_units = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json5 in (List<object>) json[nameof (colosseum_player_items)])
          playerItemList2.Add(json5 != null ? new PlayerItem((Dictionary<string, object>) json5) : (PlayerItem) null);
        this.colosseum_player_items = playerItemList2.ToArray();
        this.gladiator = json[nameof (gladiator)] != null ? new Gladiator((Dictionary<string, object>) json[nameof (gladiator)]) : (Gladiator) null;
      }
    }

    [Serializable]
    public class CrossfestaDetail : KeyCompare
    {
      public CrossFestaAchieve[] achieves;
      public CrossFestaCampaign campaign;
      public PlayerCrossFestaSerial[] player_serials;

      public CrossfestaDetail()
      {
      }

      public CrossfestaDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<CrossFestaAchieve> crossFestaAchieveList = new List<CrossFestaAchieve>();
        foreach (object json1 in (List<object>) json[nameof (achieves)])
          crossFestaAchieveList.Add(json1 != null ? new CrossFestaAchieve((Dictionary<string, object>) json1) : (CrossFestaAchieve) null);
        this.achieves = crossFestaAchieveList.ToArray();
        this.campaign = json[nameof (campaign)] != null ? new CrossFestaCampaign((Dictionary<string, object>) json[nameof (campaign)]) : (CrossFestaCampaign) null;
        List<PlayerCrossFestaSerial> crossFestaSerialList = new List<PlayerCrossFestaSerial>();
        foreach (object json2 in (List<object>) json[nameof (player_serials)])
          crossFestaSerialList.Add(json2 != null ? new PlayerCrossFestaSerial((Dictionary<string, object>) json2) : (PlayerCrossFestaSerial) null);
        this.player_serials = crossFestaSerialList.ToArray();
      }
    }

    [Serializable]
    public class CrossfestaIndex : KeyCompare
    {
      public CrossFestaCampaign[] campaigns;

      public CrossfestaIndex()
      {
      }

      public CrossfestaIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<CrossFestaCampaign> crossFestaCampaignList = new List<CrossFestaCampaign>();
        foreach (object json1 in (List<object>) json[nameof (campaigns)])
          crossFestaCampaignList.Add(json1 != null ? new CrossFestaCampaign((Dictionary<string, object>) json1) : (CrossFestaCampaign) null);
        this.campaigns = crossFestaCampaignList.ToArray();
      }
    }

    [Serializable]
    public class CrossfestaSerial : KeyCompare
    {
      public PlayerCrossFestaSerial player_serial;
      public CrossFestaAchieve campaign_achieve;
      public CrossFestaCampaign campaign;
      public string serial_code;

      public CrossfestaSerial()
      {
      }

      public CrossfestaSerial(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_serial = json[nameof (player_serial)] != null ? new PlayerCrossFestaSerial((Dictionary<string, object>) json[nameof (player_serial)]) : (PlayerCrossFestaSerial) null;
        this.campaign_achieve = json[nameof (campaign_achieve)] != null ? new CrossFestaAchieve((Dictionary<string, object>) json[nameof (campaign_achieve)]) : (CrossFestaAchieve) null;
        this.campaign = json[nameof (campaign)] != null ? new CrossFestaCampaign((Dictionary<string, object>) json[nameof (campaign)]) : (CrossFestaCampaign) null;
        this.serial_code = (string) json[nameof (serial_code)];
      }
    }

    [Serializable]
    public class DailymissionExternalLink : KeyCompare
    {
      public Player player;

      public DailymissionExternalLink()
      {
      }

      public DailymissionExternalLink(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
      }
    }

    [Serializable]
    public class DailymissionIndex : KeyCompare
    {
      public Player player;
      public PlayerDailyMissionAchievement[] player_daily_missions;

      public DailymissionIndex()
      {
      }

      public DailymissionIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerDailyMissionAchievement> missionAchievementList = new List<PlayerDailyMissionAchievement>();
        foreach (object json1 in (List<object>) json[nameof (player_daily_missions)])
          missionAchievementList.Add(json1 != null ? new PlayerDailyMissionAchievement((Dictionary<string, object>) json1) : (PlayerDailyMissionAchievement) null);
        this.player_daily_missions = missionAchievementList.ToArray();
        SMManager.UpdateList<PlayerDailyMissionAchievement>(this.player_daily_missions);
      }
    }

    [Serializable]
    public class DailymissionReceive : KeyCompare
    {
      public Player player;
      public PlayerDailyMissionAchievement[] player_daily_missions;
      public PlayerPresent[] player_presents;

      public DailymissionReceive()
      {
      }

      public DailymissionReceive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerDailyMissionAchievement> missionAchievementList = new List<PlayerDailyMissionAchievement>();
        foreach (object json1 in (List<object>) json[nameof (player_daily_missions)])
          missionAchievementList.Add(json1 != null ? new PlayerDailyMissionAchievement((Dictionary<string, object>) json1) : (PlayerDailyMissionAchievement) null);
        this.player_daily_missions = missionAchievementList.ToArray();
        SMManager.UpdateList<PlayerDailyMissionAchievement>(this.player_daily_missions);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 != null ? new PlayerPresent((Dictionary<string, object>) json2) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class DailymissionReview : KeyCompare
    {
      public Player player;

      public DailymissionReview()
      {
      }

      public DailymissionReview(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
      }
    }

    [Serializable]
    public class DeckEdit : KeyCompare
    {
      public PlayerDeck[] player_decks;

      public DeckEdit()
      {
      }

      public DeckEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json1 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json1 != null ? new PlayerDeck((Dictionary<string, object>) json1) : (PlayerDeck) null);
        this.player_decks = playerDeckList.ToArray();
        SMManager.UpdateList<PlayerDeck>(this.player_decks);
      }
    }

    [Serializable]
    public class EmblemSet : KeyCompare
    {
      public Player player;

      public EmblemSet()
      {
      }

      public EmblemSet(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
      }
    }

    [Serializable]
    public class EmblemStatus : KeyCompare
    {
      public int current_emblem_id;
      public int[] display_emblem_ids;
      public PlayerEmblem[] emblems;

      public EmblemStatus()
      {
      }

      public EmblemStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.current_emblem_id = (int) (long) json[nameof (current_emblem_id)];
        this.display_emblem_ids = ((IEnumerable<object>) json[nameof (display_emblem_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerEmblem> playerEmblemList = new List<PlayerEmblem>();
        foreach (object json1 in (List<object>) json[nameof (emblems)])
          playerEmblemList.Add(json1 != null ? new PlayerEmblem((Dictionary<string, object>) json1) : (PlayerEmblem) null);
        this.emblems = playerEmblemList.ToArray();
        SMManager.UpdateList<PlayerEmblem>(this.emblems);
      }
    }

    [Serializable]
    public class EventDetail : KeyCompare
    {
      public EnemyDetailInfo enemy_detail_infos;

      public EventDetail()
      {
      }

      public EventDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.enemy_detail_infos = json[nameof (enemy_detail_infos)] != null ? new EnemyDetailInfo((Dictionary<string, object>) json[nameof (enemy_detail_infos)]) : (EnemyDetailInfo) null;
      }
    }

    [Serializable]
    public class EventTop : KeyCompare
    {
      public int[] get_guild_reward_ids;
      public DateTime start_at;
      public Description description;
      public string event_name;
      public EnemyTopInfo[] enemy_infos;
      public int all_player_point;
      public DateTime end_at;
      public DateTime final_at;
      public string top_image_url;
      public bool is_bonus_term;
      public int guild_point;
      public int[] reward_history_ids;
      public int period_id;
      public int[] get_reward_ids;
      public int player_point;
      public PlayerPresent[] player_presents;
      public int[] guild_reward_history_ids;
      public int period_type;

      public EventTop()
      {
      }

      public EventTop(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.get_guild_reward_ids = ((IEnumerable<object>) json[nameof (get_guild_reward_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.start_at = DateTime.Parse((string) json[nameof (start_at)]);
        this.description = json[nameof (description)] != null ? new Description((Dictionary<string, object>) json[nameof (description)]) : (Description) null;
        this.event_name = (string) json[nameof (event_name)];
        List<EnemyTopInfo> enemyTopInfoList = new List<EnemyTopInfo>();
        foreach (object json1 in (List<object>) json[nameof (enemy_infos)])
          enemyTopInfoList.Add(json1 != null ? new EnemyTopInfo((Dictionary<string, object>) json1) : (EnemyTopInfo) null);
        this.enemy_infos = enemyTopInfoList.ToArray();
        this.all_player_point = (int) (long) json[nameof (all_player_point)];
        this.end_at = DateTime.Parse((string) json[nameof (end_at)]);
        this.final_at = DateTime.Parse((string) json[nameof (final_at)]);
        this.top_image_url = (string) json[nameof (top_image_url)];
        this.is_bonus_term = (bool) json[nameof (is_bonus_term)];
        this.guild_point = (int) (long) json[nameof (guild_point)];
        this.reward_history_ids = ((IEnumerable<object>) json[nameof (reward_history_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.period_id = (int) (long) json[nameof (period_id)];
        this.get_reward_ids = ((IEnumerable<object>) json[nameof (get_reward_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.player_point = (int) (long) json[nameof (player_point)];
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 != null ? new PlayerPresent((Dictionary<string, object>) json2) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.guild_reward_history_ids = ((IEnumerable<object>) json[nameof (guild_reward_history_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.period_type = (int) (long) json[nameof (period_type)];
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class FriendAccept : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendAccept()
      {
      }

      public FriendAccept(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 != null ? new PlayerFriend((Dictionary<string, object>) json1) : (PlayerFriend) null);
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendApply : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendApply()
      {
      }

      public FriendApply(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 != null ? new PlayerFriend((Dictionary<string, object>) json1) : (PlayerFriend) null);
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendCancel : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendCancel()
      {
      }

      public FriendCancel(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 != null ? new PlayerFriend((Dictionary<string, object>) json1) : (PlayerFriend) null);
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendDetail : KeyCompare
    {
      public SM.FriendDetail friend_detail;

      public FriendDetail()
      {
      }

      public FriendDetail(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.friend_detail = json[nameof (friend_detail)] != null ? new SM.FriendDetail((Dictionary<string, object>) json[nameof (friend_detail)]) : (SM.FriendDetail) null;
      }
    }

    [Serializable]
    public class FriendFavorite : KeyCompare
    {
      public string[] favorite_friend_list;
      public PlayerFriend[] player_friends;

      public FriendFavorite()
      {
      }

      public FriendFavorite(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.favorite_friend_list = ((IEnumerable<object>) json[nameof (favorite_friend_list)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 != null ? new PlayerFriend((Dictionary<string, object>) json1) : (PlayerFriend) null);
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendFriends : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendFriends()
      {
      }

      public FriendFriends(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 != null ? new PlayerFriend((Dictionary<string, object>) json1) : (PlayerFriend) null);
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends, true);
      }
    }

    [Serializable]
    public class FriendReject : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendReject()
      {
      }

      public FriendReject(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 != null ? new PlayerFriend((Dictionary<string, object>) json1) : (PlayerFriend) null);
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendRemove : KeyCompare
    {
      public PlayerFriend[] player_friends;

      public FriendRemove()
      {
      }

      public FriendRemove(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json1 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json1 != null ? new PlayerFriend((Dictionary<string, object>) json1) : (PlayerFriend) null);
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
      }
    }

    [Serializable]
    public class FriendStatus : KeyCompare
    {
      public PlayerUnit[] target_player_units;
      public PlayerItem[] target_player_items;
      public bool is_friend;
      public PlayerHelper[] player_helpers;
      public PlayerUnit target_leader_unit;
      public Player target_player;

      public FriendStatus()
      {
      }

      public FriendStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (target_player_units)])
          playerUnitList.Add(json1 != null ? new PlayerUnit((Dictionary<string, object>) json1) : (PlayerUnit) null);
        this.target_player_units = playerUnitList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (target_player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.target_player_items = playerItemList.ToArray();
        this.is_friend = (bool) json[nameof (is_friend)];
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json3 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json3 != null ? new PlayerHelper((Dictionary<string, object>) json3) : (PlayerHelper) null);
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers);
        this.target_leader_unit = json[nameof (target_leader_unit)] != null ? new PlayerUnit((Dictionary<string, object>) json[nameof (target_leader_unit)]) : (PlayerUnit) null;
        this.target_player = json[nameof (target_player)] != null ? new Player((Dictionary<string, object>) json[nameof (target_player)]) : (Player) null;
      }
    }

    [Serializable]
    public class Gacha : KeyCompare
    {
      public TicketBanner[] g004_banner_info;
      public CoinBonus[] coin_bonuses;
      public GachaModule[] gacha_modules;

      public Gacha()
      {
      }

      public Gacha(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json1 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json1 != null ? new TicketBanner((Dictionary<string, object>) json1) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json2 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json2 != null ? new CoinBonus((Dictionary<string, object>) json2) : (CoinBonus) null);
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json3 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json3 != null ? new GachaModule((Dictionary<string, object>) json3) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
      }
    }

    [Serializable]
    public class GachaG001ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG001ChargeMultiPayResult[] result;

      public GachaG001ChargeMultiPay()
      {
      }

      public GachaG001ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG001ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG001ChargeMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG001ChargeMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG001ChargeMultiPayResult) null);
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG001ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG001ChargeMultiPayResult()
      {
      }

      public GachaG001ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG001ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG001ChargePayResult[] result;

      public GachaG001ChargePay()
      {
      }

      public GachaG001ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG001ChargePayResult> g001ChargePayResultList = new List<WebAPI.Response.GachaG001ChargePayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g001ChargePayResultList.Add(json9 != null ? new WebAPI.Response.GachaG001ChargePayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG001ChargePayResult) null);
        this.result = g001ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG001ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG001ChargePayResult()
      {
      }

      public GachaG001ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG002FriendpointPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG002FriendpointPayResult[] result;

      public GachaG002FriendpointPay()
      {
      }

      public GachaG002FriendpointPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json4 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json4 != null ? new TicketBanner((Dictionary<string, object>) json4) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json5 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json5 != null ? new GachaModule((Dictionary<string, object>) json5) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json6 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json6) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json7 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json7 != null ? new PlayerPresent((Dictionary<string, object>) json7) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG002FriendpointPayResult> friendpointPayResultList = new List<WebAPI.Response.GachaG002FriendpointPayResult>();
        foreach (object json8 in (List<object>) json[nameof (result)])
          friendpointPayResultList.Add(json8 != null ? new WebAPI.Response.GachaG002FriendpointPayResult((Dictionary<string, object>) json8) : (WebAPI.Response.GachaG002FriendpointPayResult) null);
        this.result = friendpointPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG002FriendpointPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG002FriendpointPayResult()
      {
      }

      public GachaG002FriendpointPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG003ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG003ChargeMultiPayResult[] result;

      public GachaG003ChargeMultiPay()
      {
      }

      public GachaG003ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG003ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG003ChargeMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG003ChargeMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG003ChargeMultiPayResult) null);
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG003ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG003ChargeMultiPayResult()
      {
      }

      public GachaG003ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG003ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG003ChargePayResult[] result;

      public GachaG003ChargePay()
      {
      }

      public GachaG003ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG003ChargePayResult> g003ChargePayResultList = new List<WebAPI.Response.GachaG003ChargePayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g003ChargePayResultList.Add(json9 != null ? new WebAPI.Response.GachaG003ChargePayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG003ChargePayResult) null);
        this.result = g003ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG003ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG003ChargePayResult()
      {
      }

      public GachaG003ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG004TicketMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG004TicketMultiPayResult[] result;

      public GachaG004TicketMultiPay()
      {
      }

      public GachaG004TicketMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG004TicketMultiPayResult> ticketMultiPayResultList = new List<WebAPI.Response.GachaG004TicketMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          ticketMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG004TicketMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG004TicketMultiPayResult) null);
        this.result = ticketMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG004TicketMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG004TicketMultiPayResult()
      {
      }

      public GachaG004TicketMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG004TicketPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG004TicketPayResult[] result;

      public GachaG004TicketPay()
      {
      }

      public GachaG004TicketPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG004TicketPayResult> g004TicketPayResultList = new List<WebAPI.Response.GachaG004TicketPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g004TicketPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG004TicketPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG004TicketPayResult) null);
        this.result = g004TicketPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG004TicketPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG004TicketPayResult()
      {
      }

      public GachaG004TicketPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG005NewbieMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG005NewbieMultiPayResult[] result;

      public GachaG005NewbieMultiPay()
      {
      }

      public GachaG005NewbieMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG005NewbieMultiPayResult> newbieMultiPayResultList = new List<WebAPI.Response.GachaG005NewbieMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          newbieMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG005NewbieMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG005NewbieMultiPayResult) null);
        this.result = newbieMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG005NewbieMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG005NewbieMultiPayResult()
      {
      }

      public GachaG005NewbieMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG005NewbiePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG005NewbiePayResult[] result;

      public GachaG005NewbiePay()
      {
      }

      public GachaG005NewbiePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG005NewbiePayResult> g005NewbiePayResultList = new List<WebAPI.Response.GachaG005NewbiePayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g005NewbiePayResultList.Add(json9 != null ? new WebAPI.Response.GachaG005NewbiePayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG005NewbiePayResult) null);
        this.result = g005NewbiePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG005NewbiePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG005NewbiePayResult()
      {
      }

      public GachaG005NewbiePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG006GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG006GiftMultiPayResult[] result;

      public GachaG006GiftMultiPay()
      {
      }

      public GachaG006GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG006GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG006GiftMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG006GiftMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG006GiftMultiPayResult) null);
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG006GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG006GiftMultiPayResult()
      {
      }

      public GachaG006GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG006GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG006GiftPayResult[] result;

      public GachaG006GiftPay()
      {
      }

      public GachaG006GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG006GiftPayResult> g006GiftPayResultList = new List<WebAPI.Response.GachaG006GiftPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g006GiftPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG006GiftPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG006GiftPayResult) null);
        this.result = g006GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG006GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG006GiftPayResult()
      {
      }

      public GachaG006GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG007PanelMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public GachaG007PlayerSheet[] player_sheets;
      public GachaG007OpenPanelResult open_panel_result;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnit[] player_units;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG007PanelMultiPayResult[] result;

      public GachaG007PanelMultiPay()
      {
      }

      public GachaG007PanelMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<GachaG007PlayerSheet> gachaG007PlayerSheetList = new List<GachaG007PlayerSheet>();
        foreach (object json4 in (List<object>) json[nameof (player_sheets)])
          gachaG007PlayerSheetList.Add(json4 != null ? new GachaG007PlayerSheet((Dictionary<string, object>) json4) : (GachaG007PlayerSheet) null);
        this.player_sheets = gachaG007PlayerSheetList.ToArray();
        SMManager.UpdateList<GachaG007PlayerSheet>(this.player_sheets);
        this.open_panel_result = json[nameof (open_panel_result)] != null ? new GachaG007OpenPanelResult((Dictionary<string, object>) json[nameof (open_panel_result)]) : (GachaG007OpenPanelResult) null;
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json8 != null ? new PlayerUnit((Dictionary<string, object>) json8) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json9) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 != null ? new PlayerPresent((Dictionary<string, object>) json10) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG007PanelMultiPayResult> panelMultiPayResultList = new List<WebAPI.Response.GachaG007PanelMultiPayResult>();
        foreach (object json11 in (List<object>) json[nameof (result)])
          panelMultiPayResultList.Add(json11 != null ? new WebAPI.Response.GachaG007PanelMultiPayResult((Dictionary<string, object>) json11) : (WebAPI.Response.GachaG007PanelMultiPayResult) null);
        this.result = panelMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG007PanelMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG007PanelMultiPayResult()
      {
      }

      public GachaG007PanelMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG007PanelPanelInfo : KeyCompare
    {
      public GachaG007PlayerSheet[] player_sheets;

      public GachaG007PanelPanelInfo()
      {
      }

      public GachaG007PanelPanelInfo(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GachaG007PlayerSheet> gachaG007PlayerSheetList = new List<GachaG007PlayerSheet>();
        foreach (object json1 in (List<object>) json[nameof (player_sheets)])
          gachaG007PlayerSheetList.Add(json1 != null ? new GachaG007PlayerSheet((Dictionary<string, object>) json1) : (GachaG007PlayerSheet) null);
        this.player_sheets = gachaG007PlayerSheetList.ToArray();
        SMManager.UpdateList<GachaG007PlayerSheet>(this.player_sheets);
      }
    }

    [Serializable]
    public class GachaG007PanelPanelReset : KeyCompare
    {
      public GachaG007PlayerSheet[] player_sheets;

      public GachaG007PanelPanelReset()
      {
      }

      public GachaG007PanelPanelReset(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GachaG007PlayerSheet> gachaG007PlayerSheetList = new List<GachaG007PlayerSheet>();
        foreach (object json1 in (List<object>) json[nameof (player_sheets)])
          gachaG007PlayerSheetList.Add(json1 != null ? new GachaG007PlayerSheet((Dictionary<string, object>) json1) : (GachaG007PlayerSheet) null);
        this.player_sheets = gachaG007PlayerSheetList.ToArray();
        SMManager.UpdateList<GachaG007PlayerSheet>(this.player_sheets);
      }
    }

    [Serializable]
    public class GachaG007PanelPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public GachaG007PlayerSheet[] player_sheets;
      public GachaG007OpenPanelResult open_panel_result;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerUnit[] player_units;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG007PanelPayResult[] result;

      public GachaG007PanelPay()
      {
      }

      public GachaG007PanelPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<GachaG007PlayerSheet> gachaG007PlayerSheetList = new List<GachaG007PlayerSheet>();
        foreach (object json3 in (List<object>) json[nameof (player_sheets)])
          gachaG007PlayerSheetList.Add(json3 != null ? new GachaG007PlayerSheet((Dictionary<string, object>) json3) : (GachaG007PlayerSheet) null);
        this.player_sheets = gachaG007PlayerSheetList.ToArray();
        SMManager.UpdateList<GachaG007PlayerSheet>(this.player_sheets);
        this.open_panel_result = json[nameof (open_panel_result)] != null ? new GachaG007OpenPanelResult((Dictionary<string, object>) json[nameof (open_panel_result)]) : (GachaG007OpenPanelResult) null;
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json7 != null ? new PlayerUnit((Dictionary<string, object>) json7) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG007PanelPayResult> g007PanelPayResultList = new List<WebAPI.Response.GachaG007PanelPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          g007PanelPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG007PanelPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG007PanelPayResult) null);
        this.result = g007PanelPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG007PanelPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG007PanelPayResult()
      {
      }

      public GachaG007PanelPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG008GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG008GiftMultiPayResult[] result;

      public GachaG008GiftMultiPay()
      {
      }

      public GachaG008GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG008GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG008GiftMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG008GiftMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG008GiftMultiPayResult) null);
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG008GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG008GiftMultiPayResult()
      {
      }

      public GachaG008GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG008GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG008GiftPayResult[] result;

      public GachaG008GiftPay()
      {
      }

      public GachaG008GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG008GiftPayResult> g008GiftPayResultList = new List<WebAPI.Response.GachaG008GiftPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g008GiftPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG008GiftPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG008GiftPayResult) null);
        this.result = g008GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG008GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG008GiftPayResult()
      {
      }

      public GachaG008GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG009StatusupMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG009StatusupMultiPayResult[] result;

      public GachaG009StatusupMultiPay()
      {
      }

      public GachaG009StatusupMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG009StatusupMultiPayResult> statusupMultiPayResultList = new List<WebAPI.Response.GachaG009StatusupMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          statusupMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG009StatusupMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG009StatusupMultiPayResult) null);
        this.result = statusupMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG009StatusupMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG009StatusupMultiPayResult()
      {
      }

      public GachaG009StatusupMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG009StatusupPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG009StatusupPayResult[] result;

      public GachaG009StatusupPay()
      {
      }

      public GachaG009StatusupPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG009StatusupPayResult> statusupPayResultList = new List<WebAPI.Response.GachaG009StatusupPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          statusupPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG009StatusupPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG009StatusupPayResult) null);
        this.result = statusupPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG009StatusupPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG009StatusupPayResult()
      {
      }

      public GachaG009StatusupPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG010ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG010ChargeMultiPayResult[] result;

      public GachaG010ChargeMultiPay()
      {
      }

      public GachaG010ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG010ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG010ChargeMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG010ChargeMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG010ChargeMultiPayResult) null);
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG010ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG010ChargeMultiPayResult()
      {
      }

      public GachaG010ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG010ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG010ChargePayResult[] result;

      public GachaG010ChargePay()
      {
      }

      public GachaG010ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG010ChargePayResult> g010ChargePayResultList = new List<WebAPI.Response.GachaG010ChargePayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g010ChargePayResultList.Add(json9 != null ? new WebAPI.Response.GachaG010ChargePayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG010ChargePayResult) null);
        this.result = g010ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG010ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG010ChargePayResult()
      {
      }

      public GachaG010ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG011GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG011GiftMultiPayResult[] result;

      public GachaG011GiftMultiPay()
      {
      }

      public GachaG011GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG011GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG011GiftMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG011GiftMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG011GiftMultiPayResult) null);
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG011GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG011GiftMultiPayResult()
      {
      }

      public GachaG011GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG011GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG011GiftPayResult[] result;

      public GachaG011GiftPay()
      {
      }

      public GachaG011GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG011GiftPayResult> g011GiftPayResultList = new List<WebAPI.Response.GachaG011GiftPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g011GiftPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG011GiftPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG011GiftPayResult) null);
        this.result = g011GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG011GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG011GiftPayResult()
      {
      }

      public GachaG011GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG012FriendpointPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG012FriendpointPayResult[] result;

      public GachaG012FriendpointPay()
      {
      }

      public GachaG012FriendpointPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json4 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json4 != null ? new TicketBanner((Dictionary<string, object>) json4) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json5 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json5 != null ? new GachaModule((Dictionary<string, object>) json5) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json6 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json6) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json7 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json7 != null ? new PlayerPresent((Dictionary<string, object>) json7) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG012FriendpointPayResult> friendpointPayResultList = new List<WebAPI.Response.GachaG012FriendpointPayResult>();
        foreach (object json8 in (List<object>) json[nameof (result)])
          friendpointPayResultList.Add(json8 != null ? new WebAPI.Response.GachaG012FriendpointPayResult((Dictionary<string, object>) json8) : (WebAPI.Response.GachaG012FriendpointPayResult) null);
        this.result = friendpointPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG012FriendpointPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG012FriendpointPayResult()
      {
      }

      public GachaG012FriendpointPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG013FriendpointPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG013FriendpointPayResult[] result;

      public GachaG013FriendpointPay()
      {
      }

      public GachaG013FriendpointPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG013FriendpointPayResult> friendpointPayResultList = new List<WebAPI.Response.GachaG013FriendpointPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          friendpointPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG013FriendpointPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG013FriendpointPayResult) null);
        this.result = friendpointPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG013FriendpointPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG013FriendpointPayResult()
      {
      }

      public GachaG013FriendpointPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG014ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG014ChargeMultiPayResult[] result;

      public GachaG014ChargeMultiPay()
      {
      }

      public GachaG014ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG014ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG014ChargeMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG014ChargeMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG014ChargeMultiPayResult) null);
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG014ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG014ChargeMultiPayResult()
      {
      }

      public GachaG014ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG014ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG014ChargePayResult[] result;

      public GachaG014ChargePay()
      {
      }

      public GachaG014ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG014ChargePayResult> g014ChargePayResultList = new List<WebAPI.Response.GachaG014ChargePayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g014ChargePayResultList.Add(json9 != null ? new WebAPI.Response.GachaG014ChargePayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG014ChargePayResult) null);
        this.result = g014ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG014ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG014ChargePayResult()
      {
      }

      public GachaG014ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG015ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG015ChargeMultiPayResult[] result;

      public GachaG015ChargeMultiPay()
      {
      }

      public GachaG015ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG015ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG015ChargeMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG015ChargeMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG015ChargeMultiPayResult) null);
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG015ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG015ChargeMultiPayResult()
      {
      }

      public GachaG015ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG015ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG015ChargePayResult[] result;

      public GachaG015ChargePay()
      {
      }

      public GachaG015ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG015ChargePayResult> g015ChargePayResultList = new List<WebAPI.Response.GachaG015ChargePayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g015ChargePayResultList.Add(json9 != null ? new WebAPI.Response.GachaG015ChargePayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG015ChargePayResult) null);
        this.result = g015ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG015ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG015ChargePayResult()
      {
      }

      public GachaG015ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG016ChargeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG016ChargeMultiPayResult[] result;

      public GachaG016ChargeMultiPay()
      {
      }

      public GachaG016ChargeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG016ChargeMultiPayResult> chargeMultiPayResultList = new List<WebAPI.Response.GachaG016ChargeMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          chargeMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG016ChargeMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG016ChargeMultiPayResult) null);
        this.result = chargeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG016ChargeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG016ChargeMultiPayResult()
      {
      }

      public GachaG016ChargeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG016ChargePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG016ChargePayResult[] result;

      public GachaG016ChargePay()
      {
      }

      public GachaG016ChargePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG016ChargePayResult> g016ChargePayResultList = new List<WebAPI.Response.GachaG016ChargePayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g016ChargePayResultList.Add(json9 != null ? new WebAPI.Response.GachaG016ChargePayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG016ChargePayResult) null);
        this.result = g016ChargePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG016ChargePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG016ChargePayResult()
      {
      }

      public GachaG016ChargePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG017GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG017GiftMultiPayResult[] result;

      public GachaG017GiftMultiPay()
      {
      }

      public GachaG017GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG017GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG017GiftMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG017GiftMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG017GiftMultiPayResult) null);
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG017GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG017GiftMultiPayResult()
      {
      }

      public GachaG017GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG017GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG017GiftPayResult[] result;

      public GachaG017GiftPay()
      {
      }

      public GachaG017GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG017GiftPayResult> g017GiftPayResultList = new List<WebAPI.Response.GachaG017GiftPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g017GiftPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG017GiftPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG017GiftPayResult) null);
        this.result = g017GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG017GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG017GiftPayResult()
      {
      }

      public GachaG017GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG018GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG018GiftMultiPayResult[] result;

      public GachaG018GiftMultiPay()
      {
      }

      public GachaG018GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG018GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG018GiftMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG018GiftMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG018GiftMultiPayResult) null);
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG018GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG018GiftMultiPayResult()
      {
      }

      public GachaG018GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG018GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG018GiftPayResult[] result;

      public GachaG018GiftPay()
      {
      }

      public GachaG018GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG018GiftPayResult> g018GiftPayResultList = new List<WebAPI.Response.GachaG018GiftPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g018GiftPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG018GiftPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG018GiftPayResult) null);
        this.result = g018GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG018GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG018GiftPayResult()
      {
      }

      public GachaG018GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG019GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG019GiftMultiPayResult[] result;

      public GachaG019GiftMultiPay()
      {
      }

      public GachaG019GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG019GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG019GiftMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG019GiftMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG019GiftMultiPayResult) null);
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG019GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG019GiftMultiPayResult()
      {
      }

      public GachaG019GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG019GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG019GiftPayResult[] result;

      public GachaG019GiftPay()
      {
      }

      public GachaG019GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG019GiftPayResult> g019GiftPayResultList = new List<WebAPI.Response.GachaG019GiftPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g019GiftPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG019GiftPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG019GiftPayResult) null);
        this.result = g019GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG019GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG019GiftPayResult()
      {
      }

      public GachaG019GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG020GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG020GiftMultiPayResult[] result;

      public GachaG020GiftMultiPay()
      {
      }

      public GachaG020GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG020GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG020GiftMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG020GiftMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG020GiftMultiPayResult) null);
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG020GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG020GiftMultiPayResult()
      {
      }

      public GachaG020GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG020GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG020GiftPayResult[] result;

      public GachaG020GiftPay()
      {
      }

      public GachaG020GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG020GiftPayResult> g020GiftPayResultList = new List<WebAPI.Response.GachaG020GiftPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g020GiftPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG020GiftPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG020GiftPayResult) null);
        this.result = g020GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG020GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG020GiftPayResult()
      {
      }

      public GachaG020GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG021FreeMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG021FreeMultiPayResult[] result;

      public GachaG021FreeMultiPay()
      {
      }

      public GachaG021FreeMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG021FreeMultiPayResult> freeMultiPayResultList = new List<WebAPI.Response.GachaG021FreeMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          freeMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG021FreeMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG021FreeMultiPayResult) null);
        this.result = freeMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG021FreeMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG021FreeMultiPayResult()
      {
      }

      public GachaG021FreeMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG021FreePay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG021FreePayResult[] result;

      public GachaG021FreePay()
      {
      }

      public GachaG021FreePay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG021FreePayResult> g021FreePayResultList = new List<WebAPI.Response.GachaG021FreePayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g021FreePayResultList.Add(json9 != null ? new WebAPI.Response.GachaG021FreePayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG021FreePayResult) null);
        this.result = g021FreePayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG021FreePayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG021FreePayResult()
      {
      }

      public GachaG021FreePayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG022GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG022GiftMultiPayResult[] result;

      public GachaG022GiftMultiPay()
      {
      }

      public GachaG022GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG022GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG022GiftMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG022GiftMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG022GiftMultiPayResult) null);
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG022GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG022GiftMultiPayResult()
      {
      }

      public GachaG022GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG022GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG022GiftPayResult[] result;

      public GachaG022GiftPay()
      {
      }

      public GachaG022GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG022GiftPayResult> g022GiftPayResultList = new List<WebAPI.Response.GachaG022GiftPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g022GiftPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG022GiftPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG022GiftPayResult) null);
        this.result = g022GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG022GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG022GiftPayResult()
      {
      }

      public GachaG022GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG023GiftMultiPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public AnimationPatternMultiAfter[] animation_pattern_gems;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG023GiftMultiPayResult[] result;

      public GachaG023GiftMultiPay()
      {
      }

      public GachaG023GiftMultiPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<AnimationPatternMultiAfter> patternMultiAfterList = new List<AnimationPatternMultiAfter>();
        foreach (object json3 in (List<object>) json[nameof (animation_pattern_gems)])
          patternMultiAfterList.Add(json3 != null ? new AnimationPatternMultiAfter((Dictionary<string, object>) json3) : (AnimationPatternMultiAfter) null);
        this.animation_pattern_gems = patternMultiAfterList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json5 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json5 != null ? new UnlockQuest((Dictionary<string, object>) json5) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json6 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json6 != null ? new TicketBanner((Dictionary<string, object>) json6) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json7 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json7 != null ? new GachaModule((Dictionary<string, object>) json7) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json8 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json8) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json9 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json9 != null ? new PlayerPresent((Dictionary<string, object>) json9) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG023GiftMultiPayResult> giftMultiPayResultList = new List<WebAPI.Response.GachaG023GiftMultiPayResult>();
        foreach (object json10 in (List<object>) json[nameof (result)])
          giftMultiPayResultList.Add(json10 != null ? new WebAPI.Response.GachaG023GiftMultiPayResult((Dictionary<string, object>) json10) : (WebAPI.Response.GachaG023GiftMultiPayResult) null);
        this.result = giftMultiPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG023GiftMultiPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG023GiftMultiPayResult()
      {
      }

      public GachaG023GiftMultiPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class GachaG023GiftPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerUnit[] player_units;
      public UnlockQuest[] unlock_quests;
      public TicketBanner[] g004_banner_info;
      public GachaModule[] gacha_modules;
      public string[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public WebAPI.Response.GachaG023GiftPayResult[] result;

      public GachaG023GiftPay()
      {
      }

      public GachaG023GiftPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        List<TicketBanner> ticketBannerList = new List<TicketBanner>();
        foreach (object json5 in (List<object>) json[nameof (g004_banner_info)])
          ticketBannerList.Add(json5 != null ? new TicketBanner((Dictionary<string, object>) json5) : (TicketBanner) null);
        this.g004_banner_info = ticketBannerList.ToArray();
        SMManager.UpdateList<TicketBanner>(this.g004_banner_info);
        List<GachaModule> gachaModuleList = new List<GachaModule>();
        foreach (object json6 in (List<object>) json[nameof (gacha_modules)])
          gachaModuleList.Add(json6 != null ? new GachaModule((Dictionary<string, object>) json6) : (GachaModule) null);
        this.gacha_modules = gachaModuleList.ToArray();
        SMManager.UpdateList<GachaModule>(this.gacha_modules);
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<WebAPI.Response.GachaG023GiftPayResult> g023GiftPayResultList = new List<WebAPI.Response.GachaG023GiftPayResult>();
        foreach (object json9 in (List<object>) json[nameof (result)])
          g023GiftPayResultList.Add(json9 != null ? new WebAPI.Response.GachaG023GiftPayResult((Dictionary<string, object>) json9) : (WebAPI.Response.GachaG023GiftPayResult) null);
        this.result = g023GiftPayResultList.ToArray();
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GachaG023GiftPayResult : KeyCompare
    {
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public GachaG023GiftPayResult()
      {
      }

      public GachaG023GiftPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class Gamekit2All : KeyCompare
    {
      public PlayerGameKit2AchievementResult[] achievements;

      public Gamekit2All()
      {
      }

      public Gamekit2All(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerGameKit2AchievementResult> achievementResultList = new List<PlayerGameKit2AchievementResult>();
        foreach (object json1 in (List<object>) json[nameof (achievements)])
          achievementResultList.Add(json1 != null ? new PlayerGameKit2AchievementResult((Dictionary<string, object>) json1) : (PlayerGameKit2AchievementResult) null);
        this.achievements = achievementResultList.ToArray();
        SMManager.UpdateList<PlayerGameKit2AchievementResult>(this.achievements);
      }
    }

    [Serializable]
    public class GamekitAll : KeyCompare
    {
      public UserAchievements[] achievements;

      public GamekitAll()
      {
      }

      public GamekitAll(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<UserAchievements> userAchievementsList = new List<UserAchievements>();
        foreach (object json1 in (List<object>) json[nameof (achievements)])
          userAchievementsList.Add(json1 != null ? new UserAchievements((Dictionary<string, object>) json1) : (UserAchievements) null);
        this.achievements = userAchievementsList.ToArray();
        SMManager.UpdateList<UserAchievements>(this.achievements);
      }
    }

    [Serializable]
    public class GuildApplicantsAccept : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildApplicantsAccept()
      {
      }

      public GuildApplicantsAccept(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildApplicantsCancel : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildApplicantsCancel()
      {
      }

      public GuildApplicantsCancel(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildApplicantsReject : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildApplicantsReject()
      {
      }

      public GuildApplicantsReject(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildApplicantsSend : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildApplicantsSend()
      {
      }

      public GuildApplicantsSend(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildBankContact : KeyCompare
    {
      public GuildBank bank;

      public GuildBankContact()
      {
      }

      public GuildBankContact(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.bank = json[nameof (bank)] != null ? new GuildBank((Dictionary<string, object>) json[nameof (bank)]) : (GuildBank) null;
      }
    }

    [Serializable]
    public class GuildBankInvest : KeyCompare
    {
      public Player player;
      public PlayerAffiliation player_affiliation;
      public GuildBank from_bank;
      public int[] level_cmp;
      public GuildBank bank;

      public GuildBankInvest()
      {
      }

      public GuildBankInvest(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        this.from_bank = json[nameof (from_bank)] != null ? new GuildBank((Dictionary<string, object>) json[nameof (from_bank)]) : (GuildBank) null;
        this.level_cmp = ((IEnumerable<object>) json[nameof (level_cmp)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.bank = json[nameof (bank)] != null ? new GuildBank((Dictionary<string, object>) json[nameof (bank)]) : (GuildBank) null;
      }
    }

    [Serializable]
    public class GuildBaseInvest : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildBaseInvest()
      {
      }

      public GuildBaseInvest(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildBroadcastMessage : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildBroadcastMessage()
      {
      }

      public GuildBroadcastMessage(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildDissolute : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildDissolute()
      {
      }

      public GuildDissolute(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildEmblemIndex : KeyCompare
    {
      public GuildDisplayEmblem[] emblems;

      public GuildEmblemIndex()
      {
      }

      public GuildEmblemIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildDisplayEmblem> guildDisplayEmblemList = new List<GuildDisplayEmblem>();
        foreach (object json1 in (List<object>) json[nameof (emblems)])
          guildDisplayEmblemList.Add(json1 != null ? new GuildDisplayEmblem((Dictionary<string, object>) json1) : (GuildDisplayEmblem) null);
        this.emblems = guildDisplayEmblemList.ToArray();
      }
    }

    [Serializable]
    public class GuildEmblemSetting : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildEmblemSetting()
      {
      }

      public GuildEmblemSetting(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildEmblemUnsetting : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildEmblemUnsetting()
      {
      }

      public GuildEmblemUnsetting(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildEstablish : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildEstablish()
      {
      }

      public GuildEstablish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildFriendAffiliations : KeyCompare
    {
      public FriendAffiliation[] friend_affiliations;

      public GuildFriendAffiliations()
      {
      }

      public GuildFriendAffiliations(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<FriendAffiliation> friendAffiliationList = new List<FriendAffiliation>();
        foreach (object json1 in (List<object>) json[nameof (friend_affiliations)])
          friendAffiliationList.Add(json1 != null ? new FriendAffiliation((Dictionary<string, object>) json1) : (FriendAffiliation) null);
        this.friend_affiliations = friendAffiliationList.ToArray();
      }
    }

    [Serializable]
    public class GuildGiftGetWishListMaster : KeyCompare
    {
      public GuildGift[] gift_mst;

      public GuildGiftGetWishListMaster()
      {
      }

      public GuildGiftGetWishListMaster(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildGift> guildGiftList = new List<GuildGift>();
        foreach (object json1 in (List<object>) json[nameof (gift_mst)])
          guildGiftList.Add(json1 != null ? new GuildGift((Dictionary<string, object>) json1) : (GuildGift) null);
        this.gift_mst = guildGiftList.ToArray();
        SMManager.UpdateList<GuildGift>(this.gift_mst);
      }
    }

    [Serializable]
    public class GuildGiftReceiveExecute : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public GuildMemberGift[] player_gift;
      public Player player;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public GuildGiftReceiveExecute()
      {
      }

      public GuildGiftReceiveExecute(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<GuildMemberGift> guildMemberGiftList = new List<GuildMemberGift>();
        foreach (object json4 in (List<object>) json[nameof (player_gift)])
          guildMemberGiftList.Add(json4 != null ? new GuildMemberGift((Dictionary<string, object>) json4) : (GuildMemberGift) null);
        this.player_gift = guildMemberGiftList.ToArray();
        SMManager.UpdateList<GuildMemberGift>(this.player_gift);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json5 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json5) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json6 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json6 != null ? new PlayerPresent((Dictionary<string, object>) json6) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json7 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json7 != null ? new PlayerQuestKey((Dictionary<string, object>) json7) : (PlayerQuestKey) null);
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class GuildGiftReceiveList : KeyCompare
    {
      public GuildMemberGift[] player_gift;

      public GuildGiftReceiveList()
      {
      }

      public GuildGiftReceiveList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildMemberGift> guildMemberGiftList = new List<GuildMemberGift>();
        foreach (object json1 in (List<object>) json[nameof (player_gift)])
          guildMemberGiftList.Add(json1 != null ? new GuildMemberGift((Dictionary<string, object>) json1) : (GuildMemberGift) null);
        this.player_gift = guildMemberGiftList.ToArray();
        SMManager.UpdateList<GuildMemberGift>(this.player_gift);
      }
    }

    [Serializable]
    public class GuildGiftSendExecute : KeyCompare
    {
      public GuildMemberGift[] player_send;

      public GuildGiftSendExecute()
      {
      }

      public GuildGiftSendExecute(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildMemberGift> guildMemberGiftList = new List<GuildMemberGift>();
        foreach (object json1 in (List<object>) json[nameof (player_send)])
          guildMemberGiftList.Add(json1 != null ? new GuildMemberGift((Dictionary<string, object>) json1) : (GuildMemberGift) null);
        this.player_send = guildMemberGiftList.ToArray();
        SMManager.UpdateList<GuildMemberGift>(this.player_send);
      }
    }

    [Serializable]
    public class GuildGiftSendList : KeyCompare
    {
      public GuildMemberGift[] player_send;

      public GuildGiftSendList()
      {
      }

      public GuildGiftSendList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildMemberGift> guildMemberGiftList = new List<GuildMemberGift>();
        foreach (object json1 in (List<object>) json[nameof (player_send)])
          guildMemberGiftList.Add(json1 != null ? new GuildMemberGift((Dictionary<string, object>) json1) : (GuildMemberGift) null);
        this.player_send = guildMemberGiftList.ToArray();
        SMManager.UpdateList<GuildMemberGift>(this.player_send);
      }
    }

    [Serializable]
    public class GuildGiftUpdateWishList : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildGiftUpdateWishList()
      {
      }

      public GuildGiftUpdateWishList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildMasterResign : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildMasterResign()
      {
      }

      public GuildMasterResign(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildMasterTransfer : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildMasterTransfer()
      {
      }

      public GuildMasterTransfer(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildMembershipsBanish : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildMembershipsBanish()
      {
      }

      public GuildMembershipsBanish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildMembershipsLeave : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildMembershipsLeave()
      {
      }

      public GuildMembershipsLeave(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildPrivateMessage : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildPrivateMessage()
      {
      }

      public GuildPrivateMessage(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildRecommends : KeyCompare
    {
      public GuildDirectory[] guilds;

      public GuildRecommends()
      {
      }

      public GuildRecommends(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildDirectory> guildDirectoryList = new List<GuildDirectory>();
        foreach (object json1 in (List<object>) json[nameof (guilds)])
          guildDirectoryList.Add(json1 != null ? new GuildDirectory((Dictionary<string, object>) json1) : (GuildDirectory) null);
        this.guilds = guildDirectoryList.ToArray();
      }
    }

    [Serializable]
    public class GuildSearch : KeyCompare
    {
      public GuildDirectory[] guilds;

      public GuildSearch()
      {
      }

      public GuildSearch(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GuildDirectory> guildDirectoryList = new List<GuildDirectory>();
        foreach (object json1 in (List<object>) json[nameof (guilds)])
          guildDirectoryList.Add(json1 != null ? new GuildDirectory((Dictionary<string, object>) json1) : (GuildDirectory) null);
        this.guilds = guildDirectoryList.ToArray();
      }
    }

    [Serializable]
    public class GuildSettings : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildSettings()
      {
      }

      public GuildSettings(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildShow : KeyCompare
    {
      public string[] opposed_player_ids;
      public GuildRegistration guild;
      public GuildRegistration opponent;

      public GuildShow()
      {
      }

      public GuildShow(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.opposed_player_ids = ((IEnumerable<object>) json[nameof (opposed_player_ids)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        this.guild = json[nameof (guild)] != null ? new GuildRegistration((Dictionary<string, object>) json[nameof (guild)]) : (GuildRegistration) null;
        this.opponent = json[nameof (opponent)] != null ? new GuildRegistration((Dictionary<string, object>) json[nameof (opponent)]) : (GuildRegistration) null;
      }
    }

    [Serializable]
    public class GuildSignal : KeyCompare
    {
      public SM.GuildSignal guild_signal;

      public GuildSignal()
      {
      }

      public GuildSignal(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.guild_signal = json[nameof (guild_signal)] != null ? new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]) : (SM.GuildSignal) null;
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
      }
    }

    [Serializable]
    public class GuildSubmasterAssign : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildSubmasterAssign()
      {
      }

      public GuildSubmasterAssign(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildSubmasterDismiss : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildSubmasterDismiss()
      {
      }

      public GuildSubmasterDismiss(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildSubmasterResign : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GuildSubmasterResign()
      {
      }

      public GuildSubmasterResign(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GuildTop : KeyCompare
    {
      public PlayerAffiliation player_affiliation;
      public SM.GuildSignal guild_signal;
      public EventInfo[] event_infos;

      public GuildTop()
      {
      }

      public GuildTop(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        this.guild_signal = json[nameof (guild_signal)] != null ? new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]) : (SM.GuildSignal) null;
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
        List<EventInfo> eventInfoList = new List<EventInfo>();
        foreach (object json1 in (List<object>) json[nameof (event_infos)])
          eventInfoList.Add(json1 != null ? new EventInfo((Dictionary<string, object>) json1) : (EventInfo) null);
        this.event_infos = eventInfoList.ToArray();
        SMManager.UpdateList<EventInfo>(this.event_infos);
      }
    }

    [Serializable]
    public class GuildlogAutoupdate : KeyCompare
    {
      public SM.GuildSignal guild_signal;
      public int remaining_logs_count;
      public GuildLog[] guild_logs;

      public GuildlogAutoupdate()
      {
      }

      public GuildlogAutoupdate(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.guild_signal = json[nameof (guild_signal)] != null ? new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]) : (SM.GuildSignal) null;
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
        this.remaining_logs_count = (int) (long) json[nameof (remaining_logs_count)];
        List<GuildLog> guildLogList = new List<GuildLog>();
        foreach (object json1 in (List<object>) json[nameof (guild_logs)])
          guildLogList.Add(json1 != null ? new GuildLog((Dictionary<string, object>) json1) : (GuildLog) null);
        this.guild_logs = guildLogList.ToArray();
        SMManager.UpdateList<GuildLog>(this.guild_logs);
      }
    }

    [Serializable]
    public class GuildlogMemberShowLatest : KeyCompare
    {
      public WebAPI.Response.GuildlogMemberShowLatestGuild_logs[] guild_logs;

      public GuildlogMemberShowLatest()
      {
      }

      public GuildlogMemberShowLatest(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildlogMemberShowLatestGuild_logs> showLatestGuildLogsList = new List<WebAPI.Response.GuildlogMemberShowLatestGuild_logs>();
        foreach (object json1 in (List<object>) json[nameof (guild_logs)])
          showLatestGuildLogsList.Add(json1 != null ? new WebAPI.Response.GuildlogMemberShowLatestGuild_logs((Dictionary<string, object>) json1) : (WebAPI.Response.GuildlogMemberShowLatestGuild_logs) null);
        this.guild_logs = showLatestGuildLogsList.ToArray();
      }
    }

    [Serializable]
    public class GuildlogMemberShowLatestGuild_logs : KeyCompare
    {
      public bool is_deleted;
      public string log_id;
      public string created_at;
      public string log_author_id;
      public string log_author_name;
      public string log_text;
      public int log_type;

      public GuildlogMemberShowLatestGuild_logs()
      {
      }

      public GuildlogMemberShowLatestGuild_logs(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_deleted = (bool) json[nameof (is_deleted)];
        this.log_id = (string) json[nameof (log_id)];
        this.created_at = json[nameof (created_at)] != null ? (string) json[nameof (created_at)] : (string) null;
        this.log_author_id = json[nameof (log_author_id)] != null ? (string) json[nameof (log_author_id)] : (string) null;
        this.log_author_name = json[nameof (log_author_name)] != null ? (string) json[nameof (log_author_name)] : (string) null;
        this.log_text = (string) json[nameof (log_text)];
        this.log_type = (int) (long) json[nameof (log_type)];
      }
    }

    [Serializable]
    public class GuildlogMemberShowPast : KeyCompare
    {
      public WebAPI.Response.GuildlogMemberShowPastGuild_logs[] guild_logs;

      public GuildlogMemberShowPast()
      {
      }

      public GuildlogMemberShowPast(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.GuildlogMemberShowPastGuild_logs> showPastGuildLogsList = new List<WebAPI.Response.GuildlogMemberShowPastGuild_logs>();
        foreach (object json1 in (List<object>) json[nameof (guild_logs)])
          showPastGuildLogsList.Add(json1 != null ? new WebAPI.Response.GuildlogMemberShowPastGuild_logs((Dictionary<string, object>) json1) : (WebAPI.Response.GuildlogMemberShowPastGuild_logs) null);
        this.guild_logs = showPastGuildLogsList.ToArray();
      }
    }

    [Serializable]
    public class GuildlogMemberShowPastGuild_logs : KeyCompare
    {
      public bool is_deleted;
      public string log_id;
      public string created_at;
      public string log_author_id;
      public string log_author_name;
      public string log_text;
      public int log_type;

      public GuildlogMemberShowPastGuild_logs()
      {
      }

      public GuildlogMemberShowPastGuild_logs(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_deleted = (bool) json[nameof (is_deleted)];
        this.log_id = (string) json[nameof (log_id)];
        this.created_at = json[nameof (created_at)] != null ? (string) json[nameof (created_at)] : (string) null;
        this.log_author_id = json[nameof (log_author_id)] != null ? (string) json[nameof (log_author_id)] : (string) null;
        this.log_author_name = json[nameof (log_author_name)] != null ? (string) json[nameof (log_author_name)] : (string) null;
        this.log_text = (string) json[nameof (log_text)];
        this.log_type = (int) (long) json[nameof (log_type)];
      }
    }

    [Serializable]
    public class GuildlogSendStamp : KeyCompare
    {
      public bool result;

      public GuildlogSendStamp()
      {
      }

      public GuildlogSendStamp(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class GuildlogShow : KeyCompare
    {
      public PlayerAffiliation player_affiliation;
      public WebAPI.Response.GuildlogShowGuild_logs[] guild_logs;

      public GuildlogShow()
      {
      }

      public GuildlogShow(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        List<WebAPI.Response.GuildlogShowGuild_logs> guildlogShowGuildLogsList = new List<WebAPI.Response.GuildlogShowGuild_logs>();
        foreach (object json1 in (List<object>) json[nameof (guild_logs)])
          guildlogShowGuildLogsList.Add(json1 != null ? new WebAPI.Response.GuildlogShowGuild_logs((Dictionary<string, object>) json1) : (WebAPI.Response.GuildlogShowGuild_logs) null);
        this.guild_logs = guildlogShowGuildLogsList.ToArray();
      }
    }

    [Serializable]
    public class GuildlogShowGuild_logs : KeyCompare
    {
      public bool is_deleted;
      public int log_id;
      public string created_at;
      public string log_author_id;
      public string log_author_name;
      public string log_text;
      public int log_type;

      public GuildlogShowGuild_logs()
      {
      }

      public GuildlogShowGuild_logs(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_deleted = (bool) json[nameof (is_deleted)];
        this.log_id = (int) (long) json[nameof (log_id)];
        this.created_at = json[nameof (created_at)] != null ? (string) json[nameof (created_at)] : (string) null;
        this.log_author_id = json[nameof (log_author_id)] != null ? (string) json[nameof (log_author_id)] : (string) null;
        this.log_author_name = json[nameof (log_author_name)] != null ? (string) json[nameof (log_author_name)] : (string) null;
        this.log_text = (string) json[nameof (log_text)];
        this.log_type = (int) (long) json[nameof (log_type)];
      }
    }

    [Serializable]
    public class GuildlogShowPast : KeyCompare
    {
      public PlayerAffiliation player_affiliation;
      public GuildLog[] guild_logs;

      public GuildlogShowPast()
      {
      }

      public GuildlogShowPast(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        List<GuildLog> guildLogList = new List<GuildLog>();
        foreach (object json1 in (List<object>) json[nameof (guild_logs)])
          guildLogList.Add(json1 != null ? new GuildLog((Dictionary<string, object>) json1) : (GuildLog) null);
        this.guild_logs = guildLogList.ToArray();
      }
    }

    [Serializable]
    public class GuildlogWrite : KeyCompare
    {
      public bool result;

      public GuildlogWrite()
      {
      }

      public GuildlogWrite(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class GvgBattleFinish : KeyCompare
    {
      public int gain_player_experience;
      public int gain_battle_medal;
      public int _star_status;
      public Player before_player;
      public bool win;
      public int _battle_status;
      public Player player;
      public int capture_star;
      public int gain_friend_point;

      public GvgBattleFinish()
      {
      }

      public GvgBattleFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.gain_player_experience = (int) (long) json[nameof (gain_player_experience)];
        this.gain_battle_medal = (int) (long) json[nameof (gain_battle_medal)];
        this._star_status = (int) (long) json[nameof (star_status)];
        this.before_player = json[nameof (before_player)] != null ? new Player((Dictionary<string, object>) json[nameof (before_player)]) : (Player) null;
        this.win = (bool) json[nameof (win)];
        this._battle_status = (int) (long) json[nameof (battle_status)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.capture_star = (int) (long) json[nameof (capture_star)];
        this.gain_friend_point = (int) (long) json[nameof (gain_friend_point)];
      }

      public GvgStarStatus star_status
      {
        get
        {
          if (!Enum.IsDefined(typeof (GvgStarStatus), (object) this._star_status))
            Debug.LogError((object) ("Key not Found: MasterDataTable.GvgStarStatus[" + (object) this._star_status + "]"));
          return (GvgStarStatus) this._star_status;
        }
      }

      public GvgBattleStatus battle_status
      {
        get
        {
          if (!Enum.IsDefined(typeof (GvgBattleStatus), (object) this._battle_status))
            Debug.LogError((object) ("Key not Found: MasterDataTable.GvgBattleStatus[" + (object) this._battle_status + "]"));
          return (GvgBattleStatus) this._battle_status;
        }
      }
    }

    [Serializable]
    public class GvgBattleForceClose : KeyCompare
    {
      public GvgBattleForceClose()
      {
      }

      public GvgBattleForceClose(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class GvgBattleResume : KeyCompare
    {
      public PlayerUnit[] target_deck_units;
      public PlayerItem[] target_support_gears;
      public PlayerUnit[] target_support_units;
      public PlayerItem[] own_support_gears;
      public int target_star;
      public PlayerCharacterIntimate[] target_character_intimates;
      public string battle_uuid;
      public DateTime battle_start_time;
      public PlayerCharacterIntimate[] own_character_intimates;
      public PlayerUnit[] own_support_units;
      public PlayerItem[] target_deck_gears;
      public PlayerUnit[] own_deck_units;
      public GuildBaseBonusEffect[] bonus_effects;
      public GuildBaseBonusEffect[] target_bonus_effects;
      public PlayerItem[] own_deck_gears;
      public GvgStage stage;

      public GvgBattleResume()
      {
      }

      public GvgBattleResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (target_deck_units)])
          playerUnitList1.Add(json1 != null ? new PlayerUnit((Dictionary<string, object>) json1) : (PlayerUnit) null);
        this.target_deck_units = playerUnitList1.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (target_support_gears)])
          playerItemList1.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.target_support_gears = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (target_support_units)])
          playerUnitList2.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.target_support_units = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (own_support_gears)])
          playerItemList2.Add(json4 != null ? new PlayerItem((Dictionary<string, object>) json4) : (PlayerItem) null);
        this.own_support_gears = playerItemList2.ToArray();
        this.target_star = (int) (long) json[nameof (target_star)];
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json5 in (List<object>) json[nameof (target_character_intimates)])
          characterIntimateList1.Add(json5 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json5) : (PlayerCharacterIntimate) null);
        this.target_character_intimates = characterIntimateList1.ToArray();
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.battle_start_time = DateTime.Parse((string) json[nameof (battle_start_time)]);
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json6 in (List<object>) json[nameof (own_character_intimates)])
          characterIntimateList2.Add(json6 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json6) : (PlayerCharacterIntimate) null);
        this.own_character_intimates = characterIntimateList2.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (own_support_units)])
          playerUnitList3.Add(json7 != null ? new PlayerUnit((Dictionary<string, object>) json7) : (PlayerUnit) null);
        this.own_support_units = playerUnitList3.ToArray();
        List<PlayerItem> playerItemList3 = new List<PlayerItem>();
        foreach (object json8 in (List<object>) json[nameof (target_deck_gears)])
          playerItemList3.Add(json8 != null ? new PlayerItem((Dictionary<string, object>) json8) : (PlayerItem) null);
        this.target_deck_gears = playerItemList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json9 in (List<object>) json[nameof (own_deck_units)])
          playerUnitList4.Add(json9 != null ? new PlayerUnit((Dictionary<string, object>) json9) : (PlayerUnit) null);
        this.own_deck_units = playerUnitList4.ToArray();
        List<GuildBaseBonusEffect> guildBaseBonusEffectList1 = new List<GuildBaseBonusEffect>();
        foreach (object json10 in (List<object>) json[nameof (bonus_effects)])
          guildBaseBonusEffectList1.Add(json10 != null ? new GuildBaseBonusEffect((Dictionary<string, object>) json10) : (GuildBaseBonusEffect) null);
        this.bonus_effects = guildBaseBonusEffectList1.ToArray();
        List<GuildBaseBonusEffect> guildBaseBonusEffectList2 = new List<GuildBaseBonusEffect>();
        foreach (object json11 in (List<object>) json[nameof (target_bonus_effects)])
          guildBaseBonusEffectList2.Add(json11 != null ? new GuildBaseBonusEffect((Dictionary<string, object>) json11) : (GuildBaseBonusEffect) null);
        this.target_bonus_effects = guildBaseBonusEffectList2.ToArray();
        List<PlayerItem> playerItemList4 = new List<PlayerItem>();
        foreach (object json12 in (List<object>) json[nameof (own_deck_gears)])
          playerItemList4.Add(json12 != null ? new PlayerItem((Dictionary<string, object>) json12) : (PlayerItem) null);
        this.own_deck_gears = playerItemList4.ToArray();
        this.stage = json[nameof (stage)] != null ? new GvgStage((Dictionary<string, object>) json[nameof (stage)]) : (GvgStage) null;
      }
    }

    [Serializable]
    public class GvgBattleStart : KeyCompare
    {
      public PlayerUnit[] target_deck_units;
      public PlayerItem[] target_support_gears;
      public PlayerUnit[] target_support_units;
      public PlayerItem[] own_support_gears;
      public int target_star;
      public PlayerCharacterIntimate[] target_character_intimates;
      public string battle_uuid;
      public DateTime battle_start_time;
      public PlayerCharacterIntimate[] own_character_intimates;
      public PlayerUnit[] own_support_units;
      public PlayerItem[] target_deck_gears;
      public PlayerUnit[] own_deck_units;
      public GuildBaseBonusEffect[] bonus_effects;
      public GuildBaseBonusEffect[] target_bonus_effects;
      public PlayerItem[] own_deck_gears;
      public GvgStage stage;

      public GvgBattleStart()
      {
      }

      public GvgBattleStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (target_deck_units)])
          playerUnitList1.Add(json1 != null ? new PlayerUnit((Dictionary<string, object>) json1) : (PlayerUnit) null);
        this.target_deck_units = playerUnitList1.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (target_support_gears)])
          playerItemList1.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.target_support_gears = playerItemList1.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (target_support_units)])
          playerUnitList2.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.target_support_units = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (own_support_gears)])
          playerItemList2.Add(json4 != null ? new PlayerItem((Dictionary<string, object>) json4) : (PlayerItem) null);
        this.own_support_gears = playerItemList2.ToArray();
        this.target_star = (int) (long) json[nameof (target_star)];
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json5 in (List<object>) json[nameof (target_character_intimates)])
          characterIntimateList1.Add(json5 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json5) : (PlayerCharacterIntimate) null);
        this.target_character_intimates = characterIntimateList1.ToArray();
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        this.battle_start_time = DateTime.Parse((string) json[nameof (battle_start_time)]);
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json6 in (List<object>) json[nameof (own_character_intimates)])
          characterIntimateList2.Add(json6 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json6) : (PlayerCharacterIntimate) null);
        this.own_character_intimates = characterIntimateList2.ToArray();
        List<PlayerUnit> playerUnitList3 = new List<PlayerUnit>();
        foreach (object json7 in (List<object>) json[nameof (own_support_units)])
          playerUnitList3.Add(json7 != null ? new PlayerUnit((Dictionary<string, object>) json7) : (PlayerUnit) null);
        this.own_support_units = playerUnitList3.ToArray();
        List<PlayerItem> playerItemList3 = new List<PlayerItem>();
        foreach (object json8 in (List<object>) json[nameof (target_deck_gears)])
          playerItemList3.Add(json8 != null ? new PlayerItem((Dictionary<string, object>) json8) : (PlayerItem) null);
        this.target_deck_gears = playerItemList3.ToArray();
        List<PlayerUnit> playerUnitList4 = new List<PlayerUnit>();
        foreach (object json9 in (List<object>) json[nameof (own_deck_units)])
          playerUnitList4.Add(json9 != null ? new PlayerUnit((Dictionary<string, object>) json9) : (PlayerUnit) null);
        this.own_deck_units = playerUnitList4.ToArray();
        List<GuildBaseBonusEffect> guildBaseBonusEffectList1 = new List<GuildBaseBonusEffect>();
        foreach (object json10 in (List<object>) json[nameof (bonus_effects)])
          guildBaseBonusEffectList1.Add(json10 != null ? new GuildBaseBonusEffect((Dictionary<string, object>) json10) : (GuildBaseBonusEffect) null);
        this.bonus_effects = guildBaseBonusEffectList1.ToArray();
        List<GuildBaseBonusEffect> guildBaseBonusEffectList2 = new List<GuildBaseBonusEffect>();
        foreach (object json11 in (List<object>) json[nameof (target_bonus_effects)])
          guildBaseBonusEffectList2.Add(json11 != null ? new GuildBaseBonusEffect((Dictionary<string, object>) json11) : (GuildBaseBonusEffect) null);
        this.target_bonus_effects = guildBaseBonusEffectList2.ToArray();
        List<PlayerItem> playerItemList4 = new List<PlayerItem>();
        foreach (object json12 in (List<object>) json[nameof (own_deck_gears)])
          playerItemList4.Add(json12 != null ? new PlayerItem((Dictionary<string, object>) json12) : (PlayerItem) null);
        this.own_deck_gears = playerItemList4.ToArray();
        this.stage = json[nameof (stage)] != null ? new GvgStage((Dictionary<string, object>) json[nameof (stage)]) : (GvgStage) null;
      }
    }

    [Serializable]
    public class GvgDeckAttackEdit : KeyCompare
    {
      public GvgDeck deck;

      public GvgDeckAttackEdit()
      {
      }

      public GvgDeckAttackEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.deck = json[nameof (deck)] != null ? new GvgDeck((Dictionary<string, object>) json[nameof (deck)]) : (GvgDeck) null;
      }
    }

    [Serializable]
    public class GvgDeckAttackShow : KeyCompare
    {
      public GvgDeck deck;

      public GvgDeckAttackShow()
      {
      }

      public GvgDeckAttackShow(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.deck = json[nameof (deck)] != null ? new GvgDeck((Dictionary<string, object>) json[nameof (deck)]) : (GvgDeck) null;
      }
    }

    [Serializable]
    public class GvgDeckDefenseEdit : KeyCompare
    {
      public GvgDeck deck;

      public GvgDeckDefenseEdit()
      {
      }

      public GvgDeckDefenseEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.deck = json[nameof (deck)] != null ? new GvgDeck((Dictionary<string, object>) json[nameof (deck)]) : (GvgDeck) null;
      }
    }

    [Serializable]
    public class GvgDeckDefenseReinforcement : KeyCompare
    {
      public GvgReinforcement reinforcement;

      public GvgDeckDefenseReinforcement()
      {
      }

      public GvgDeckDefenseReinforcement(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reinforcement = json[nameof (reinforcement)] != null ? new GvgReinforcement((Dictionary<string, object>) json[nameof (reinforcement)]) : (GvgReinforcement) null;
      }
    }

    [Serializable]
    public class GvgDeckDefenseRemoveReinforcement : KeyCompare
    {
      public GvgReinforcement reinforcement;

      public GvgDeckDefenseRemoveReinforcement()
      {
      }

      public GvgDeckDefenseRemoveReinforcement(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reinforcement = json[nameof (reinforcement)] != null ? new GvgReinforcement((Dictionary<string, object>) json[nameof (reinforcement)]) : (GvgReinforcement) null;
      }
    }

    [Serializable]
    public class GvgDeckDefenseShow : KeyCompare
    {
      public GvgReinforcement reinforcement;
      public GvgDeck deck;

      public GvgDeckDefenseShow()
      {
      }

      public GvgDeckDefenseShow(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reinforcement = json[nameof (reinforcement)] != null ? new GvgReinforcement((Dictionary<string, object>) json[nameof (reinforcement)]) : (GvgReinforcement) null;
        this.deck = json[nameof (deck)] != null ? new GvgDeck((Dictionary<string, object>) json[nameof (deck)]) : (GvgDeck) null;
      }
    }

    [Serializable]
    public class GvgDeckReinforcementCandidates : KeyCompare
    {
      public GvgCandidate[] candidates;

      public GvgDeckReinforcementCandidates()
      {
      }

      public GvgDeckReinforcementCandidates(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GvgCandidate> gvgCandidateList = new List<GvgCandidate>();
        foreach (object json1 in (List<object>) json[nameof (candidates)])
          gvgCandidateList.Add(json1 != null ? new GvgCandidate((Dictionary<string, object>) json1) : (GvgCandidate) null);
        this.candidates = gvgCandidateList.ToArray();
      }
    }

    [Serializable]
    public class GvgHistoryHistoryGet : KeyCompare
    {
      public GvgHistory[] gvg_histories;

      public GvgHistoryHistoryGet()
      {
      }

      public GvgHistoryHistoryGet(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<GvgHistory> gvgHistoryList = new List<GvgHistory>();
        foreach (object json1 in (List<object>) json[nameof (gvg_histories)])
          gvgHistoryList.Add(json1 != null ? new GvgHistory((Dictionary<string, object>) json1) : (GvgHistory) null);
        this.gvg_histories = gvgHistoryList.ToArray();
        SMManager.UpdateList<GvgHistory>(this.gvg_histories);
      }
    }

    [Serializable]
    public class GvgMatchingCancel : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GvgMatchingCancel()
      {
      }

      public GvgMatchingCancel(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GvgMatchingEntry : KeyCompare
    {
      public PlayerAffiliation player_affiliation;

      public GvgMatchingEntry()
      {
      }

      public GvgMatchingEntry(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
      }
    }

    [Serializable]
    public class GvgResult : KeyCompare
    {
      public int before_experience;
      public GvgGuildRewardMaster[] guild_rewards;
      public GvgBattleScore score;
      public GvgWholeRewardMaster[] whole_rewards;
      public int before_experience_next;
      public int before_level;
      public PlayerPresent[] player_presents;
      public GuildDirectory opponent;

      public GvgResult()
      {
      }

      public GvgResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.before_experience = (int) (long) json[nameof (before_experience)];
        List<GvgGuildRewardMaster> guildRewardMasterList = new List<GvgGuildRewardMaster>();
        foreach (object json1 in (List<object>) json[nameof (guild_rewards)])
          guildRewardMasterList.Add(json1 != null ? new GvgGuildRewardMaster((Dictionary<string, object>) json1) : (GvgGuildRewardMaster) null);
        this.guild_rewards = guildRewardMasterList.ToArray();
        this.score = json[nameof (score)] != null ? new GvgBattleScore((Dictionary<string, object>) json[nameof (score)]) : (GvgBattleScore) null;
        List<GvgWholeRewardMaster> wholeRewardMasterList = new List<GvgWholeRewardMaster>();
        foreach (object json2 in (List<object>) json[nameof (whole_rewards)])
          wholeRewardMasterList.Add(json2 != null ? new GvgWholeRewardMaster((Dictionary<string, object>) json2) : (GvgWholeRewardMaster) null);
        this.whole_rewards = wholeRewardMasterList.ToArray();
        this.before_experience_next = (int) (long) json[nameof (before_experience_next)];
        this.before_level = (int) (long) json[nameof (before_level)];
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json3 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json3 != null ? new PlayerPresent((Dictionary<string, object>) json3) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        this.opponent = json[nameof (opponent)] != null ? new GuildDirectory((Dictionary<string, object>) json[nameof (opponent)]) : (GuildDirectory) null;
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class Heartbeat : KeyCompare
    {
      public Heartbeat()
      {
      }

      public Heartbeat(Dictionary<string, object> json) => this._hasKey = false;
    }

    [Serializable]
    public class HomeColosseumUnlockLev : KeyCompare
    {
      public int unlock_lev;

      public HomeColosseumUnlockLev()
      {
      }

      public HomeColosseumUnlockLev(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.unlock_lev = (int) (long) json[nameof (unlock_lev)];
      }
    }

    [Serializable]
    public class HomeHome : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerHelper[] player_helpers;
      public PlayerDeck[] player_decks;
      public PlayerExtraQuestS[] player_extra_quests;
      public CoinBonus[] coin_bonuses;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public PlayerUnitHistory[] player_unit_histories;
      public Player player;
      public PlayerItemHistory[] player_item_histories;
      public PlayerStoryQuestS[] player_story_quests;
      public PlayerUnit[] player_units;
      public PlayerFriend[] player_friends;
      public Banner[] banners;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public HomeHome()
      {
      }

      public HomeHome(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json2 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json2) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json3 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json3 != null ? new PlayerHelper((Dictionary<string, object>) json3) : (PlayerHelper) null);
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers);
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json4 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json4 != null ? new PlayerDeck((Dictionary<string, object>) json4) : (PlayerDeck) null);
        this.player_decks = playerDeckList.ToArray();
        SMManager.UpdateList<PlayerDeck>(this.player_decks);
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json5 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json5 != null ? new PlayerExtraQuestS((Dictionary<string, object>) json5) : (PlayerExtraQuestS) null);
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests);
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json6 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json6 != null ? new CoinBonus((Dictionary<string, object>) json6) : (CoinBonus) null);
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json7 != null ? new PlayerItem((Dictionary<string, object>) json7) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json8 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json8 != null ? new PlayerMissionHistory((Dictionary<string, object>) json8) : (PlayerMissionHistory) null);
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        List<PlayerUnitHistory> playerUnitHistoryList = new List<PlayerUnitHistory>();
        foreach (object json9 in (List<object>) json[nameof (player_unit_histories)])
          playerUnitHistoryList.Add(json9 != null ? new PlayerUnitHistory((Dictionary<string, object>) json9) : (PlayerUnitHistory) null);
        this.player_unit_histories = playerUnitHistoryList.ToArray();
        SMManager.UpdateList<PlayerUnitHistory>(this.player_unit_histories);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerItemHistory> playerItemHistoryList = new List<PlayerItemHistory>();
        foreach (object json10 in (List<object>) json[nameof (player_item_histories)])
          playerItemHistoryList.Add(json10 != null ? new PlayerItemHistory((Dictionary<string, object>) json10) : (PlayerItemHistory) null);
        this.player_item_histories = playerItemHistoryList.ToArray();
        SMManager.UpdateList<PlayerItemHistory>(this.player_item_histories);
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json11 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json11 != null ? new PlayerStoryQuestS((Dictionary<string, object>) json11) : (PlayerStoryQuestS) null);
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json12 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json12 != null ? new PlayerUnit((Dictionary<string, object>) json12) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json13 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json13 != null ? new PlayerFriend((Dictionary<string, object>) json13) : (PlayerFriend) null);
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
        List<Banner> bannerList = new List<Banner>();
        foreach (object json14 in (List<object>) json[nameof (banners)])
          bannerList.Add(json14 != null ? new Banner((Dictionary<string, object>) json14) : (Banner) null);
        this.banners = bannerList.ToArray();
        SMManager.UpdateList<Banner>(this.banners);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json15 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json15 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json15) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json16 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json16 != null ? new PlayerPresent((Dictionary<string, object>) json16) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json17 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json17 != null ? new PlayerQuestKey((Dictionary<string, object>) json17) : (PlayerQuestKey) null);
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class HomeNow : KeyCompare
    {
      public DateTime now;

      public HomeNow()
      {
      }

      public HomeNow(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.now = DateTime.Parse((string) json[nameof (now)]);
      }
    }

    [Serializable]
    public class HomeStartUp : KeyCompare
    {
      public DateTime? battle_medal_shop_latest_start_time;
      public PlayerItemHistory[] player_item_histories;
      public PlayerQuestGate[] quest_gates;
      public CoinBonus[] coin_bonuses;
      public DateTime last_signed_in_at;
      public Period[] event_info;
      public Player player;
      public int received_friend_request_count;
      public int[] active_boost_period_id_list;
      public PlayerQuestKey[] player_quest_keys;
      public PlayerLoginBonus[] player_loginbonuses;
      public PlayerExtraQuestS[] player_extra_quests;
      public PlayerAffiliation player_affiliation;
      public PlayerUnit[] player_units;
      public int[] boost_type_id_list;
      public LevelRewardSchemaMixin[] player_achieve_level_rewards;
      public PlayerDeck[] player_decks;
      public PlayerHelper[] player_helpers;
      public DateTime? gacha_latest_start_time;
      public SM.GuildSignal guild_signal;
      public PlayerItem[] player_items;
      public UnitBonus[] event_unit_bonuses;
      public DateTime? medal_shop_latest_start_time;
      public DateTime? money_shop_latest_start_time;
      public PlayerPresent[] player_presents;
      public OfficialInformationArticle[] articles;
      public PlayerCharacterIntimate[] player_character_intimates;
      public string[] favorite_friend_list;
      public PlayerUnitHistory[] player_unit_histories;
      public PlayerMissionHistory[] player_mission_histories;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public PlayerFriend[] player_friends;
      public Banner[] banners;
      public DateTime? slot_latest_start_time;
      public DateTime? limit_shop_latest_start_time;
      public PlayerStoryQuestS[] player_story_quests;

      public HomeStartUp()
      {
      }

      public HomeStartUp(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.battle_medal_shop_latest_start_time = json[nameof (battle_medal_shop_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (battle_medal_shop_latest_start_time)])) : new DateTime?();
        List<PlayerItemHistory> playerItemHistoryList = new List<PlayerItemHistory>();
        foreach (object json1 in (List<object>) json[nameof (player_item_histories)])
          playerItemHistoryList.Add(json1 != null ? new PlayerItemHistory((Dictionary<string, object>) json1) : (PlayerItemHistory) null);
        this.player_item_histories = playerItemHistoryList.ToArray();
        SMManager.UpdateList<PlayerItemHistory>(this.player_item_histories);
        List<PlayerQuestGate> playerQuestGateList = new List<PlayerQuestGate>();
        foreach (object json2 in (List<object>) json[nameof (quest_gates)])
          playerQuestGateList.Add(json2 != null ? new PlayerQuestGate((Dictionary<string, object>) json2) : (PlayerQuestGate) null);
        this.quest_gates = playerQuestGateList.ToArray();
        SMManager.UpdateList<PlayerQuestGate>(this.quest_gates);
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json3 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json3 != null ? new CoinBonus((Dictionary<string, object>) json3) : (CoinBonus) null);
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        this.last_signed_in_at = DateTime.Parse((string) json[nameof (last_signed_in_at)]);
        List<Period> periodList = new List<Period>();
        foreach (object json4 in (List<object>) json[nameof (event_info)])
          periodList.Add(json4 != null ? new Period((Dictionary<string, object>) json4) : (Period) null);
        this.event_info = periodList.ToArray();
        SMManager.UpdateList<Period>(this.event_info);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.received_friend_request_count = (int) (long) json[nameof (received_friend_request_count)];
        this.active_boost_period_id_list = ((IEnumerable<object>) json[nameof (active_boost_period_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json5 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json5 != null ? new PlayerQuestKey((Dictionary<string, object>) json5) : (PlayerQuestKey) null);
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        List<PlayerLoginBonus> playerLoginBonusList = new List<PlayerLoginBonus>();
        foreach (object json6 in (List<object>) json[nameof (player_loginbonuses)])
          playerLoginBonusList.Add(json6 != null ? new PlayerLoginBonus((Dictionary<string, object>) json6) : (PlayerLoginBonus) null);
        this.player_loginbonuses = playerLoginBonusList.ToArray();
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json7 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json7 != null ? new PlayerExtraQuestS((Dictionary<string, object>) json7) : (PlayerExtraQuestS) null);
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests);
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json8 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json8 != null ? new PlayerUnit((Dictionary<string, object>) json8) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.boost_type_id_list = ((IEnumerable<object>) json[nameof (boost_type_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<LevelRewardSchemaMixin> rewardSchemaMixinList = new List<LevelRewardSchemaMixin>();
        foreach (object json9 in (List<object>) json[nameof (player_achieve_level_rewards)])
          rewardSchemaMixinList.Add(json9 != null ? new LevelRewardSchemaMixin((Dictionary<string, object>) json9) : (LevelRewardSchemaMixin) null);
        this.player_achieve_level_rewards = rewardSchemaMixinList.ToArray();
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json10 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json10 != null ? new PlayerDeck((Dictionary<string, object>) json10) : (PlayerDeck) null);
        this.player_decks = playerDeckList.ToArray();
        SMManager.UpdateList<PlayerDeck>(this.player_decks);
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json11 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json11 != null ? new PlayerHelper((Dictionary<string, object>) json11) : (PlayerHelper) null);
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers);
        this.gacha_latest_start_time = json[nameof (gacha_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (gacha_latest_start_time)])) : new DateTime?();
        this.guild_signal = json[nameof (guild_signal)] != null ? new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]) : (SM.GuildSignal) null;
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json12 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json12 != null ? new PlayerItem((Dictionary<string, object>) json12) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<UnitBonus> unitBonusList = new List<UnitBonus>();
        foreach (object json13 in (List<object>) json[nameof (event_unit_bonuses)])
          unitBonusList.Add(json13 != null ? new UnitBonus((Dictionary<string, object>) json13) : (UnitBonus) null);
        this.event_unit_bonuses = unitBonusList.ToArray();
        SMManager.UpdateList<UnitBonus>(this.event_unit_bonuses);
        this.medal_shop_latest_start_time = json[nameof (medal_shop_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (medal_shop_latest_start_time)])) : new DateTime?();
        this.money_shop_latest_start_time = json[nameof (money_shop_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (money_shop_latest_start_time)])) : new DateTime?();
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json14 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json14 != null ? new PlayerPresent((Dictionary<string, object>) json14) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<OfficialInformationArticle> informationArticleList = new List<OfficialInformationArticle>();
        foreach (object json15 in (List<object>) json[nameof (articles)])
          informationArticleList.Add(json15 != null ? new OfficialInformationArticle((Dictionary<string, object>) json15) : (OfficialInformationArticle) null);
        this.articles = informationArticleList.ToArray();
        SMManager.UpdateList<OfficialInformationArticle>(this.articles);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json16 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json16 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json16) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        this.favorite_friend_list = ((IEnumerable<object>) json[nameof (favorite_friend_list)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerUnitHistory> playerUnitHistoryList = new List<PlayerUnitHistory>();
        foreach (object json17 in (List<object>) json[nameof (player_unit_histories)])
          playerUnitHistoryList.Add(json17 != null ? new PlayerUnitHistory((Dictionary<string, object>) json17) : (PlayerUnitHistory) null);
        this.player_unit_histories = playerUnitHistoryList.ToArray();
        SMManager.UpdateList<PlayerUnitHistory>(this.player_unit_histories);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json18 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json18 != null ? new PlayerMissionHistory((Dictionary<string, object>) json18) : (PlayerMissionHistory) null);
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json19 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json19 != null ? new QuestScoreBonusTimetable((Dictionary<string, object>) json19) : (QuestScoreBonusTimetable) null);
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json20 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json20 != null ? new PlayerFriend((Dictionary<string, object>) json20) : (PlayerFriend) null);
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends);
        List<Banner> bannerList = new List<Banner>();
        foreach (object json21 in (List<object>) json[nameof (banners)])
          bannerList.Add(json21 != null ? new Banner((Dictionary<string, object>) json21) : (Banner) null);
        this.banners = bannerList.ToArray();
        SMManager.UpdateList<Banner>(this.banners);
        this.slot_latest_start_time = json[nameof (slot_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (slot_latest_start_time)])) : new DateTime?();
        this.limit_shop_latest_start_time = json[nameof (limit_shop_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (limit_shop_latest_start_time)])) : new DateTime?();
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json22 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json22 != null ? new PlayerStoryQuestS((Dictionary<string, object>) json22) : (PlayerStoryQuestS) null);
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class HomeStartUp2 : KeyCompare
    {
      public DateTime? battle_medal_shop_latest_start_time;
      public PlayerItemHistory[] player_item_histories;
      public CoinBonus[] coin_bonuses;
      public DateTime last_signed_in_at;
      public Period[] event_info;
      public Player player;
      public int received_friend_request_count;
      public int[] active_boost_period_id_list;
      public PlayerQuestKey[] player_quest_keys;
      public PlayerLoginBonus[] player_loginbonuses;
      public PlayerAffiliation player_affiliation;
      public PlayerUnit[] player_units;
      public int[] boost_type_id_list;
      public LevelRewardSchemaMixin[] player_achieve_level_rewards;
      public PlayerDeck[] player_decks;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerHelper[] player_helpers;
      public DateTime? gacha_latest_start_time;
      public SM.GuildSignal guild_signal;
      public PlayerItem[] player_items;
      public UnitBonus[] event_unit_bonuses;
      public DateTime? medal_shop_latest_start_time;
      public DateTime? money_shop_latest_start_time;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public OfficialInformationArticle[] articles;
      public PlayerCharacterIntimate[] player_character_intimates;
      public string[] favorite_friend_list;
      public PlayerUnitHistory[] player_unit_histories;
      public PlayerMissionHistory[] player_mission_histories;
      public QuestScoreBonusTimetable[] questscore_bonus_timetable;
      public Banner[] banners;
      public DateTime? slot_latest_start_time;
      public DateTime? limit_shop_latest_start_time;
      public PlayerStoryQuestS[] player_story_quests;
      public QuestScoreCampaignProgress[] score_campaigns;

      public HomeStartUp2()
      {
      }

      public HomeStartUp2(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.battle_medal_shop_latest_start_time = json[nameof (battle_medal_shop_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (battle_medal_shop_latest_start_time)])) : new DateTime?();
        List<PlayerItemHistory> playerItemHistoryList = new List<PlayerItemHistory>();
        foreach (object json1 in (List<object>) json[nameof (player_item_histories)])
          playerItemHistoryList.Add(json1 != null ? new PlayerItemHistory((Dictionary<string, object>) json1) : (PlayerItemHistory) null);
        this.player_item_histories = playerItemHistoryList.ToArray();
        SMManager.UpdateList<PlayerItemHistory>(this.player_item_histories);
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json2 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json2 != null ? new CoinBonus((Dictionary<string, object>) json2) : (CoinBonus) null);
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        this.last_signed_in_at = DateTime.Parse((string) json[nameof (last_signed_in_at)]);
        List<Period> periodList = new List<Period>();
        foreach (object json3 in (List<object>) json[nameof (event_info)])
          periodList.Add(json3 != null ? new Period((Dictionary<string, object>) json3) : (Period) null);
        this.event_info = periodList.ToArray();
        SMManager.UpdateList<Period>(this.event_info);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.received_friend_request_count = (int) (long) json[nameof (received_friend_request_count)];
        this.active_boost_period_id_list = ((IEnumerable<object>) json[nameof (active_boost_period_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json4 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json4 != null ? new PlayerQuestKey((Dictionary<string, object>) json4) : (PlayerQuestKey) null);
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        List<PlayerLoginBonus> playerLoginBonusList = new List<PlayerLoginBonus>();
        foreach (object json5 in (List<object>) json[nameof (player_loginbonuses)])
          playerLoginBonusList.Add(json5 != null ? new PlayerLoginBonus((Dictionary<string, object>) json5) : (PlayerLoginBonus) null);
        this.player_loginbonuses = playerLoginBonusList.ToArray();
        this.player_affiliation = json[nameof (player_affiliation)] != null ? new PlayerAffiliation((Dictionary<string, object>) json[nameof (player_affiliation)]) : (PlayerAffiliation) null;
        SMManager.Change<PlayerAffiliation>(this.player_affiliation);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json6 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json6 != null ? new PlayerUnit((Dictionary<string, object>) json6) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units, true);
        this.boost_type_id_list = ((IEnumerable<object>) json[nameof (boost_type_id_list)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<LevelRewardSchemaMixin> rewardSchemaMixinList = new List<LevelRewardSchemaMixin>();
        foreach (object json7 in (List<object>) json[nameof (player_achieve_level_rewards)])
          rewardSchemaMixinList.Add(json7 != null ? new LevelRewardSchemaMixin((Dictionary<string, object>) json7) : (LevelRewardSchemaMixin) null);
        this.player_achieve_level_rewards = rewardSchemaMixinList.ToArray();
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json8 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json8 != null ? new PlayerDeck((Dictionary<string, object>) json8) : (PlayerDeck) null);
        this.player_decks = playerDeckList.ToArray();
        SMManager.UpdateList<PlayerDeck>(this.player_decks);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json9 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json9 != null ? new PlayerMaterialGear((Dictionary<string, object>) json9) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears, true);
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json10 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json10 != null ? new PlayerHelper((Dictionary<string, object>) json10) : (PlayerHelper) null);
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers);
        this.gacha_latest_start_time = json[nameof (gacha_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (gacha_latest_start_time)])) : new DateTime?();
        this.guild_signal = json[nameof (guild_signal)] != null ? new SM.GuildSignal((Dictionary<string, object>) json[nameof (guild_signal)]) : (SM.GuildSignal) null;
        SMManager.Change<SM.GuildSignal>(this.guild_signal);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json11 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json11 != null ? new PlayerItem((Dictionary<string, object>) json11) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items, true);
        List<UnitBonus> unitBonusList = new List<UnitBonus>();
        foreach (object json12 in (List<object>) json[nameof (event_unit_bonuses)])
          unitBonusList.Add(json12 != null ? new UnitBonus((Dictionary<string, object>) json12) : (UnitBonus) null);
        this.event_unit_bonuses = unitBonusList.ToArray();
        SMManager.UpdateList<UnitBonus>(this.event_unit_bonuses);
        this.medal_shop_latest_start_time = json[nameof (medal_shop_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (medal_shop_latest_start_time)])) : new DateTime?();
        this.money_shop_latest_start_time = json[nameof (money_shop_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (money_shop_latest_start_time)])) : new DateTime?();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json13 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json13 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json13) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units, true);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json14 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json14 != null ? new PlayerPresent((Dictionary<string, object>) json14) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents, true);
        List<OfficialInformationArticle> informationArticleList = new List<OfficialInformationArticle>();
        foreach (object json15 in (List<object>) json[nameof (articles)])
          informationArticleList.Add(json15 != null ? new OfficialInformationArticle((Dictionary<string, object>) json15) : (OfficialInformationArticle) null);
        this.articles = informationArticleList.ToArray();
        SMManager.UpdateList<OfficialInformationArticle>(this.articles);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json16 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json16 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json16) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates, true);
        this.favorite_friend_list = ((IEnumerable<object>) json[nameof (favorite_friend_list)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        List<PlayerUnitHistory> playerUnitHistoryList = new List<PlayerUnitHistory>();
        foreach (object json17 in (List<object>) json[nameof (player_unit_histories)])
          playerUnitHistoryList.Add(json17 != null ? new PlayerUnitHistory((Dictionary<string, object>) json17) : (PlayerUnitHistory) null);
        this.player_unit_histories = playerUnitHistoryList.ToArray();
        SMManager.UpdateList<PlayerUnitHistory>(this.player_unit_histories);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json18 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json18 != null ? new PlayerMissionHistory((Dictionary<string, object>) json18) : (PlayerMissionHistory) null);
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories);
        List<QuestScoreBonusTimetable> scoreBonusTimetableList = new List<QuestScoreBonusTimetable>();
        foreach (object json19 in (List<object>) json[nameof (questscore_bonus_timetable)])
          scoreBonusTimetableList.Add(json19 != null ? new QuestScoreBonusTimetable((Dictionary<string, object>) json19) : (QuestScoreBonusTimetable) null);
        this.questscore_bonus_timetable = scoreBonusTimetableList.ToArray();
        SMManager.UpdateList<QuestScoreBonusTimetable>(this.questscore_bonus_timetable);
        List<Banner> bannerList = new List<Banner>();
        foreach (object json20 in (List<object>) json[nameof (banners)])
          bannerList.Add(json20 != null ? new Banner((Dictionary<string, object>) json20) : (Banner) null);
        this.banners = bannerList.ToArray();
        SMManager.UpdateList<Banner>(this.banners);
        this.slot_latest_start_time = json[nameof (slot_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (slot_latest_start_time)])) : new DateTime?();
        this.limit_shop_latest_start_time = json[nameof (limit_shop_latest_start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (limit_shop_latest_start_time)])) : new DateTime?();
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json21 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json21 != null ? new PlayerStoryQuestS((Dictionary<string, object>) json21) : (PlayerStoryQuestS) null);
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests);
        List<QuestScoreCampaignProgress> campaignProgressList = new List<QuestScoreCampaignProgress>();
        foreach (object json22 in (List<object>) json[nameof (score_campaigns)])
          campaignProgressList.Add(json22 != null ? new QuestScoreCampaignProgress((Dictionary<string, object>) json22) : (QuestScoreCampaignProgress) null);
        this.score_campaigns = campaignProgressList.ToArray();
        SMManager.UpdateList<QuestScoreCampaignProgress>(this.score_campaigns);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class HomeUpdateAllData : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PlayerHelper[] player_helpers;
      public PlayerDeck[] player_decks;
      public PlayerExtraQuestS[] player_extra_quests;
      public PlayerItemHistory[] player_item_histories;
      public PlayerItem[] player_items;
      public PlayerMissionHistory[] player_mission_histories;
      public Player player;
      public PlayerStoryQuestS[] player_story_quests;
      public PlayerUnit[] player_units;
      public PlayerFriend[] player_friends;
      public PlayerQuestGate[] quest_gates;
      public PlayerUnitHistory[] player_unit_histories;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public HomeUpdateAllData()
      {
      }

      public HomeUpdateAllData(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears, true);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json2 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json2 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json2) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates, true);
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json3 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json3 != null ? new PlayerHelper((Dictionary<string, object>) json3) : (PlayerHelper) null);
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers, true);
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json4 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json4 != null ? new PlayerDeck((Dictionary<string, object>) json4) : (PlayerDeck) null);
        this.player_decks = playerDeckList.ToArray();
        SMManager.UpdateList<PlayerDeck>(this.player_decks, true);
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json5 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json5 != null ? new PlayerExtraQuestS((Dictionary<string, object>) json5) : (PlayerExtraQuestS) null);
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests, true);
        List<PlayerItemHistory> playerItemHistoryList = new List<PlayerItemHistory>();
        foreach (object json6 in (List<object>) json[nameof (player_item_histories)])
          playerItemHistoryList.Add(json6 != null ? new PlayerItemHistory((Dictionary<string, object>) json6) : (PlayerItemHistory) null);
        this.player_item_histories = playerItemHistoryList.ToArray();
        SMManager.UpdateList<PlayerItemHistory>(this.player_item_histories, true);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json7 != null ? new PlayerItem((Dictionary<string, object>) json7) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items, true);
        List<PlayerMissionHistory> playerMissionHistoryList = new List<PlayerMissionHistory>();
        foreach (object json8 in (List<object>) json[nameof (player_mission_histories)])
          playerMissionHistoryList.Add(json8 != null ? new PlayerMissionHistory((Dictionary<string, object>) json8) : (PlayerMissionHistory) null);
        this.player_mission_histories = playerMissionHistoryList.ToArray();
        SMManager.UpdateList<PlayerMissionHistory>(this.player_mission_histories, true);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json9 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json9 != null ? new PlayerStoryQuestS((Dictionary<string, object>) json9) : (PlayerStoryQuestS) null);
        this.player_story_quests = playerStoryQuestSList.ToArray();
        SMManager.UpdateList<PlayerStoryQuestS>(this.player_story_quests, true);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json10 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json10 != null ? new PlayerUnit((Dictionary<string, object>) json10) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units, true);
        List<PlayerFriend> playerFriendList = new List<PlayerFriend>();
        foreach (object json11 in (List<object>) json[nameof (player_friends)])
          playerFriendList.Add(json11 != null ? new PlayerFriend((Dictionary<string, object>) json11) : (PlayerFriend) null);
        this.player_friends = playerFriendList.ToArray();
        SMManager.UpdateList<PlayerFriend>(this.player_friends, true);
        List<PlayerQuestGate> playerQuestGateList = new List<PlayerQuestGate>();
        foreach (object json12 in (List<object>) json[nameof (quest_gates)])
          playerQuestGateList.Add(json12 != null ? new PlayerQuestGate((Dictionary<string, object>) json12) : (PlayerQuestGate) null);
        this.quest_gates = playerQuestGateList.ToArray();
        SMManager.UpdateList<PlayerQuestGate>(this.quest_gates, true);
        List<PlayerUnitHistory> playerUnitHistoryList = new List<PlayerUnitHistory>();
        foreach (object json13 in (List<object>) json[nameof (player_unit_histories)])
          playerUnitHistoryList.Add(json13 != null ? new PlayerUnitHistory((Dictionary<string, object>) json13) : (PlayerUnitHistory) null);
        this.player_unit_histories = playerUnitHistoryList.ToArray();
        SMManager.UpdateList<PlayerUnitHistory>(this.player_unit_histories, true);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json14 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json14 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json14) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units, true);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json15 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json15 != null ? new PlayerPresent((Dictionary<string, object>) json15) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents, true);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json16 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json16 != null ? new PlayerQuestKey((Dictionary<string, object>) json16) : (PlayerQuestKey) null);
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys, true);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class InternalPvpFinish : KeyCompare
    {
      public bool battle_finish;

      public InternalPvpFinish()
      {
      }

      public InternalPvpFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.battle_finish = (bool) json[nameof (battle_finish)];
      }
    }

    [Serializable]
    public class InternalPvpForceClose : KeyCompare
    {
      public bool result;

      public InternalPvpForceClose()
      {
      }

      public InternalPvpForceClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class InternalPvpMaintenance : KeyCompare
    {
      public string pvp_maintenance_title;
      public bool pvp_maintenance;
      public string pvp_maintenance_message;

      public InternalPvpMaintenance()
      {
      }

      public InternalPvpMaintenance(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.pvp_maintenance_title = (string) json[nameof (pvp_maintenance_title)];
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.pvp_maintenance_message = (string) json[nameof (pvp_maintenance_message)];
      }
    }

    [Serializable]
    public class InternalPvpStart : KeyCompare
    {
      public PlayerCharacterIntimate[] player2_character_intimates;
      public PlayerUnit[] player2_units;
      public DateTime battle_start_at;
      public string battle_uuid;
      public Bonus[] bonus;
      public PlayerItem[] player1_items;
      public bool battle_start;
      public PlayerCharacterIntimate[] player1_character_intimates;
      public Player player2;
      public Player player1;
      public PlayerUnit[] player1_units;
      public PlayerItem[] player2_items;
      public MpStage stage;

      public InternalPvpStart()
      {
      }

      public InternalPvpStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json1 in (List<object>) json[nameof (player2_character_intimates)])
          characterIntimateList1.Add(json1 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json1) : (PlayerCharacterIntimate) null);
        this.player2_character_intimates = characterIntimateList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player2_units)])
          playerUnitList1.Add(json2 != null ? new PlayerUnit((Dictionary<string, object>) json2) : (PlayerUnit) null);
        this.player2_units = playerUnitList1.ToArray();
        this.battle_start_at = DateTime.Parse((string) json[nameof (battle_start_at)]);
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json3 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json3 != null ? new Bonus((Dictionary<string, object>) json3) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (player1_items)])
          playerItemList1.Add(json4 != null ? new PlayerItem((Dictionary<string, object>) json4) : (PlayerItem) null);
        this.player1_items = playerItemList1.ToArray();
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json5 in (List<object>) json[nameof (player1_character_intimates)])
          characterIntimateList2.Add(json5 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json5) : (PlayerCharacterIntimate) null);
        this.player1_character_intimates = characterIntimateList2.ToArray();
        this.player2 = json[nameof (player2)] != null ? new Player((Dictionary<string, object>) json[nameof (player2)]) : (Player) null;
        this.player1 = json[nameof (player1)] != null ? new Player((Dictionary<string, object>) json[nameof (player1)]) : (Player) null;
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json6 in (List<object>) json[nameof (player1_units)])
          playerUnitList2.Add(json6 != null ? new PlayerUnit((Dictionary<string, object>) json6) : (PlayerUnit) null);
        this.player1_units = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (player2_items)])
          playerItemList2.Add(json7 != null ? new PlayerItem((Dictionary<string, object>) json7) : (PlayerItem) null);
        this.player2_items = playerItemList2.ToArray();
        this.stage = json[nameof (stage)] != null ? new MpStage((Dictionary<string, object>) json[nameof (stage)]) : (MpStage) null;
      }
    }

    [Serializable]
    public class InternalPvpStatus : KeyCompare
    {
      public int league_rank;
      public bool is_battle;
      public int point;
      public bool pvp_maintenance;
      public bool auth;
      public string[] friend_ids;

      public InternalPvpStatus()
      {
      }

      public InternalPvpStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.league_rank = (int) (long) json[nameof (league_rank)];
        this.is_battle = (bool) json[nameof (is_battle)];
        this.point = (int) (long) json[nameof (point)];
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.auth = (bool) json[nameof (auth)];
        this.friend_ids = ((IEnumerable<object>) json[nameof (friend_ids)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
      }
    }

    [Serializable]
    public class InternalPvpTutorialFinish : KeyCompare
    {
      public bool battle_finish;

      public InternalPvpTutorialFinish()
      {
      }

      public InternalPvpTutorialFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.battle_finish = (bool) json[nameof (battle_finish)];
      }
    }

    [Serializable]
    public class InternalPvpTutorialStart : KeyCompare
    {
      public PlayerCharacterIntimate[] player2_character_intimates;
      public PlayerUnit[] player2_units;
      public DateTime battle_start_at;
      public string battle_uuid;
      public Bonus[] bonus;
      public PlayerItem[] player1_items;
      public bool battle_start;
      public PlayerCharacterIntimate[] player1_character_intimates;
      public Player player2;
      public Player player1;
      public PlayerUnit[] player1_units;
      public PlayerItem[] player2_items;
      public MpStage stage;

      public InternalPvpTutorialStart()
      {
      }

      public InternalPvpTutorialStart(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json1 in (List<object>) json[nameof (player2_character_intimates)])
          characterIntimateList1.Add(json1 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json1) : (PlayerCharacterIntimate) null);
        this.player2_character_intimates = characterIntimateList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player2_units)])
          playerUnitList1.Add(json2 != null ? new PlayerUnit((Dictionary<string, object>) json2) : (PlayerUnit) null);
        this.player2_units = playerUnitList1.ToArray();
        this.battle_start_at = DateTime.Parse((string) json[nameof (battle_start_at)]);
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json3 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json3 != null ? new Bonus((Dictionary<string, object>) json3) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (player1_items)])
          playerItemList1.Add(json4 != null ? new PlayerItem((Dictionary<string, object>) json4) : (PlayerItem) null);
        this.player1_items = playerItemList1.ToArray();
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json5 in (List<object>) json[nameof (player1_character_intimates)])
          characterIntimateList2.Add(json5 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json5) : (PlayerCharacterIntimate) null);
        this.player1_character_intimates = characterIntimateList2.ToArray();
        this.player2 = json[nameof (player2)] != null ? new Player((Dictionary<string, object>) json[nameof (player2)]) : (Player) null;
        this.player1 = json[nameof (player1)] != null ? new Player((Dictionary<string, object>) json[nameof (player1)]) : (Player) null;
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json6 in (List<object>) json[nameof (player1_units)])
          playerUnitList2.Add(json6 != null ? new PlayerUnit((Dictionary<string, object>) json6) : (PlayerUnit) null);
        this.player1_units = playerUnitList2.ToArray();
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (player2_items)])
          playerItemList2.Add(json7 != null ? new PlayerItem((Dictionary<string, object>) json7) : (PlayerItem) null);
        this.player2_items = playerItemList2.ToArray();
        this.stage = json[nameof (stage)] != null ? new MpStage((Dictionary<string, object>) json[nameof (stage)]) : (MpStage) null;
      }
    }

    [Serializable]
    public class InvitationAccept : KeyCompare
    {
      public WebAPI.Response.InvitationAcceptRewards[] rewards;
      public bool is_success;
      public PlayerPresent[] player_presents;

      public InvitationAccept()
      {
      }

      public InvitationAccept(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.InvitationAcceptRewards> invitationAcceptRewardsList = new List<WebAPI.Response.InvitationAcceptRewards>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          invitationAcceptRewardsList.Add(json1 != null ? new WebAPI.Response.InvitationAcceptRewards((Dictionary<string, object>) json1) : (WebAPI.Response.InvitationAcceptRewards) null);
        this.rewards = invitationAcceptRewardsList.ToArray();
        this.is_success = (bool) json[nameof (is_success)];
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 != null ? new PlayerPresent((Dictionary<string, object>) json2) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class InvitationAcceptRewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public InvitationAcceptRewards()
      {
      }

      public InvitationAcceptRewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class InvitationInvite : KeyCompare
    {
      public bool exist_new_reward;

      public InvitationInvite()
      {
      }

      public InvitationInvite(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.exist_new_reward = (bool) json[nameof (exist_new_reward)];
      }
    }

    [Serializable]
    public class ItemGearBuildup : KeyCompare
    {
      public string[] animation_pattern;
      public Player player;
      public PlayerItem[] player_items;
      public PlayerItem player_item;

      public ItemGearBuildup()
      {
      }

      public ItemGearBuildup(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 != null ? new PlayerItem((Dictionary<string, object>) json1) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player_item = json[nameof (player_item)] != null ? new PlayerItem((Dictionary<string, object>) json[nameof (player_item)]) : (PlayerItem) null;
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearCombine : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerItem player_item;
      public string[] animation_pattern;
      public PlayerMaterialGear player_material_gear;

      public ItemGearCombine()
      {
      }

      public ItemGearCombine(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.player_item = json[nameof (player_item)] != null ? new PlayerItem((Dictionary<string, object>) json[nameof (player_item)]) : (PlayerItem) null;
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        this.player_material_gear = json[nameof (player_material_gear)] != null ? new PlayerMaterialGear((Dictionary<string, object>) json[nameof (player_material_gear)]) : (PlayerMaterialGear) null;
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearDrilling : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public Player player;
      public PlayerItem player_item;
      public string[] animation_pattern;
      public PlayerMaterialGear player_material_gear;

      public ItemGearDrilling()
      {
      }

      public ItemGearDrilling(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.player_item = json[nameof (player_item)] != null ? new PlayerItem((Dictionary<string, object>) json[nameof (player_item)]) : (PlayerItem) null;
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, string>((Func<object, string>) (s => (string) s)).ToArray<string>();
        this.player_material_gear = json[nameof (player_material_gear)] != null ? new PlayerMaterialGear((Dictionary<string, object>) json[nameof (player_material_gear)]) : (PlayerMaterialGear) null;
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearDrillingConfirm : KeyCompare
    {
      public PlayerMaterialGear player_material_gear;
      public PlayerItem player_item;
      public int consume_money;

      public ItemGearDrillingConfirm()
      {
      }

      public ItemGearDrillingConfirm(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_material_gear = json[nameof (player_material_gear)] != null ? new PlayerMaterialGear((Dictionary<string, object>) json[nameof (player_material_gear)]) : (PlayerMaterialGear) null;
        this.player_item = json[nameof (player_item)] != null ? new PlayerItem((Dictionary<string, object>) json[nameof (player_item)]) : (PlayerItem) null;
        this.consume_money = (int) (long) json[nameof (consume_money)];
      }
    }

    [Serializable]
    public class ItemGearFavorite : KeyCompare
    {
      public PlayerItem[] player_items;

      public ItemGearFavorite()
      {
      }

      public ItemGearFavorite(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 != null ? new PlayerItem((Dictionary<string, object>) json1) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
      }
    }

    [Serializable]
    public class ItemGearPoweredRepair : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;
      public WebAPI.Response.ItemGearPoweredRepairRepair_results[] repair_results;
      public PlayerUnit[] player_units;

      public ItemGearPoweredRepair()
      {
      }

      public ItemGearPoweredRepair(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 != null ? new PlayerItem((Dictionary<string, object>) json1) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.ItemGearPoweredRepairRepair_results> repairRepairResultsList = new List<WebAPI.Response.ItemGearPoweredRepairRepair_results>();
        foreach (object json2 in (List<object>) json[nameof (repair_results)])
          repairRepairResultsList.Add(json2 != null ? new WebAPI.Response.ItemGearPoweredRepairRepair_results((Dictionary<string, object>) json2) : (WebAPI.Response.ItemGearPoweredRepairRepair_results) null);
        this.repair_results = repairRepairResultsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearPoweredRepairRepair_results : KeyCompare
    {
      public int status;
      public int player_gear_id;

      public ItemGearPoweredRepairRepair_results()
      {
      }

      public ItemGearPoweredRepairRepair_results(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.status = (int) (long) json[nameof (status)];
        this.player_gear_id = (int) (long) json[nameof (player_gear_id)];
      }
    }

    [Serializable]
    public class ItemGearRepair : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;
      public WebAPI.Response.ItemGearRepairRepair_results[] repair_results;
      public PlayerUnit[] player_units;

      public ItemGearRepair()
      {
      }

      public ItemGearRepair(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 != null ? new PlayerItem((Dictionary<string, object>) json1) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<WebAPI.Response.ItemGearRepairRepair_results> repairRepairResultsList = new List<WebAPI.Response.ItemGearRepairRepair_results>();
        foreach (object json2 in (List<object>) json[nameof (repair_results)])
          repairRepairResultsList.Add(json2 != null ? new WebAPI.Response.ItemGearRepairRepair_results((Dictionary<string, object>) json2) : (WebAPI.Response.ItemGearRepairRepair_results) null);
        this.repair_results = repairRepairResultsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemGearRepairRepair_results : KeyCompare
    {
      public int status;
      public int player_gear_id;

      public ItemGearRepairRepair_results()
      {
      }

      public ItemGearRepairRepair_results(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.status = (int) (long) json[nameof (status)];
        this.player_gear_id = (int) (long) json[nameof (player_gear_id)];
      }
    }

    [Serializable]
    public class ItemSell : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;
      public PlayerMaterialGear[] player_material_gears;

      public ItemSell()
      {
      }

      public ItemSell(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 != null ? new PlayerItem((Dictionary<string, object>) json1) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json2 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json2 != null ? new PlayerMaterialGear((Dictionary<string, object>) json2) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ItemSupplyDeckEdit : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;

      public ItemSupplyDeckEdit()
      {
      }

      public ItemSupplyDeckEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 != null ? new PlayerItem((Dictionary<string, object>) json1) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        if (!json.ContainsKey("player_items:delete"))
          return;
        SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class KomelogAdd : KeyCompare
    {
      public bool is_success;

      public KomelogAdd()
      {
      }

      public KomelogAdd(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class Officialinfo : KeyCompare
    {
      public OfficialInformationArticle[] articles;

      public Officialinfo()
      {
      }

      public Officialinfo(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<OfficialInformationArticle> informationArticleList = new List<OfficialInformationArticle>();
        foreach (object json1 in (List<object>) json[nameof (articles)])
          informationArticleList.Add(json1 != null ? new OfficialInformationArticle((Dictionary<string, object>) json1) : (OfficialInformationArticle) null);
        this.articles = informationArticleList.ToArray();
        SMManager.UpdateList<OfficialInformationArticle>(this.articles);
      }
    }

    [Serializable]
    public class OfficialinfoMaintenance : KeyCompare
    {
      public string message_body;
      public bool hardware_maintenance;
      public bool is_maintenance;
      public string message_schedule;

      public OfficialinfoMaintenance()
      {
      }

      public OfficialinfoMaintenance(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.message_body = (string) json[nameof (message_body)];
        this.hardware_maintenance = (bool) json[nameof (hardware_maintenance)];
        this.is_maintenance = (bool) json[nameof (is_maintenance)];
        this.message_schedule = (string) json[nameof (message_schedule)];
      }
    }

    [Serializable]
    public class Pay
    {
      public Pay()
      {
      }

      public Pay(Dictionary<string, object> json)
      {
      }
    }

    [Serializable]
    public class PlayerBoot : KeyCompare
    {
      public string pvp_battle_uuid;
      public string game_server_host;
      public bool player_during_battle;
      public string application_download_url;
      public bool latest_application;
      public int continue_count;
      public bool player_during_pvp_result;
      public bool player_during_pvp;
      public string pvp_token;
      public bool player_is_create;
      public string dlc_latest_version;
      public bool application_review;
      public int game_server_port;

      public PlayerBoot()
      {
      }

      public PlayerBoot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.pvp_battle_uuid = (string) json[nameof (pvp_battle_uuid)];
        this.game_server_host = (string) json[nameof (game_server_host)];
        this.player_during_battle = (bool) json[nameof (player_during_battle)];
        this.application_download_url = (string) json[nameof (application_download_url)];
        this.latest_application = (bool) json[nameof (latest_application)];
        this.continue_count = (int) (long) json[nameof (continue_count)];
        this.player_during_pvp_result = (bool) json[nameof (player_during_pvp_result)];
        this.player_during_pvp = (bool) json[nameof (player_during_pvp)];
        this.pvp_token = (string) json[nameof (pvp_token)];
        this.player_is_create = (bool) json[nameof (player_is_create)];
        this.dlc_latest_version = (string) json[nameof (dlc_latest_version)];
        this.application_review = (bool) json[nameof (application_review)];
        this.game_server_port = (int) (long) json[nameof (game_server_port)];
      }
    }

    [Serializable]
    public class PlayerBootRelease : KeyCompare
    {
      public string pvp_battle_uuid;
      public string game_server_host;
      public bool player_during_battle;
      public string application_download_url;
      public bool latest_application;
      public int continue_count;
      public bool player_during_pvp_result;
      public bool player_during_pvp;
      public string pvp_token;
      public bool player_is_create;
      public string dlc_latest_version;
      public bool application_review;
      public int game_server_port;

      public PlayerBootRelease()
      {
      }

      public PlayerBootRelease(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.pvp_battle_uuid = (string) json[nameof (pvp_battle_uuid)];
        this.game_server_host = (string) json[nameof (game_server_host)];
        this.player_during_battle = (bool) json[nameof (player_during_battle)];
        this.application_download_url = (string) json[nameof (application_download_url)];
        this.latest_application = (bool) json[nameof (latest_application)];
        this.continue_count = (int) (long) json[nameof (continue_count)];
        this.player_during_pvp_result = (bool) json[nameof (player_during_pvp_result)];
        this.player_during_pvp = (bool) json[nameof (player_during_pvp)];
        this.pvp_token = (string) json[nameof (pvp_token)];
        this.player_is_create = (bool) json[nameof (player_is_create)];
        this.dlc_latest_version = (string) json[nameof (dlc_latest_version)];
        this.application_review = (bool) json[nameof (application_review)];
        this.game_server_port = (int) (long) json[nameof (game_server_port)];
      }
    }

    [Serializable]
    public class PlayerCommentEdit : KeyCompare
    {
      public Player player;

      public PlayerCommentEdit()
      {
      }

      public PlayerCommentEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
      }
    }

    [Serializable]
    public class PlayerHelpers : KeyCompare
    {
      public PlayerHelper[] player_helpers;

      public PlayerHelpers()
      {
      }

      public PlayerHelpers(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json1 in (List<object>) json[nameof (player_helpers)])
          playerHelperList.Add(json1 != null ? new PlayerHelper((Dictionary<string, object>) json1) : (PlayerHelper) null);
        this.player_helpers = playerHelperList.ToArray();
        SMManager.UpdateList<PlayerHelper>(this.player_helpers);
      }
    }

    [Serializable]
    public class PlayerNameEdit : KeyCompare
    {
      public Player player;

      public PlayerNameEdit()
      {
      }

      public PlayerNameEdit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
      }
    }

    [Serializable]
    public class PlayerSearch : KeyCompare
    {
      public PlayerUnit target_leader_unit;
      public PlayerHelper target_player_helper;
      public Player target_player;

      public PlayerSearch()
      {
      }

      public PlayerSearch(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.target_leader_unit = json[nameof (target_leader_unit)] != null ? new PlayerUnit((Dictionary<string, object>) json[nameof (target_leader_unit)]) : (PlayerUnit) null;
        this.target_player_helper = json[nameof (target_player_helper)] != null ? new PlayerHelper((Dictionary<string, object>) json[nameof (target_player_helper)]) : (PlayerHelper) null;
        this.target_player = json[nameof (target_player)] != null ? new Player((Dictionary<string, object>) json[nameof (target_player)]) : (Player) null;
      }
    }

    [Serializable]
    public class PlayerSignin : KeyCompare
    {
      public PlayerLoginBonus[] player_loginbonuses;
      public DateTime last_signed_in_at;
      public PlayerPresent[] player_presents;

      public PlayerSignin()
      {
      }

      public PlayerSignin(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerLoginBonus> playerLoginBonusList = new List<PlayerLoginBonus>();
        foreach (object json1 in (List<object>) json[nameof (player_loginbonuses)])
          playerLoginBonusList.Add(json1 != null ? new PlayerLoginBonus((Dictionary<string, object>) json1) : (PlayerLoginBonus) null);
        this.player_loginbonuses = playerLoginBonusList.ToArray();
        this.last_signed_in_at = DateTime.Parse((string) json[nameof (last_signed_in_at)]);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 != null ? new PlayerPresent((Dictionary<string, object>) json2) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PlayerSignup : KeyCompare
    {
      public bool is_created;

      public PlayerSignup()
      {
      }

      public PlayerSignup(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_created = (bool) json[nameof (is_created)];
      }
    }

    [Serializable]
    public class PlayerStatus : KeyCompare
    {
      public bool is_started;

      public PlayerStatus()
      {
      }

      public PlayerStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_started = (bool) json[nameof (is_started)];
      }
    }

    [Serializable]
    public class PresentDelete : KeyCompare
    {
      public PlayerPresent[] player_presents;

      public PresentDelete()
      {
      }

      public PresentDelete(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json1 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json1 != null ? new PlayerPresent((Dictionary<string, object>) json1) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PresentRead : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public WebAPI.Response.PresentReadReceived_presents[] received_presents;
      public Player player;
      public bool is_success;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public PresentRead()
      {
      }

      public PresentRead(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<WebAPI.Response.PresentReadReceived_presents> receivedPresentsList = new List<WebAPI.Response.PresentReadReceived_presents>();
        foreach (object json4 in (List<object>) json[nameof (received_presents)])
          receivedPresentsList.Add(json4 != null ? new WebAPI.Response.PresentReadReceived_presents((Dictionary<string, object>) json4) : (WebAPI.Response.PresentReadReceived_presents) null);
        this.received_presents = receivedPresentsList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.is_success = (bool) json[nameof (is_success)];
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json5 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json5) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json6 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json6 != null ? new PlayerPresent((Dictionary<string, object>) json6) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json7 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json7 != null ? new PlayerQuestKey((Dictionary<string, object>) json7) : (PlayerQuestKey) null);
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PresentReadReceived_presents : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int? reward_id;

      public PresentReadReceived_presents()
      {
      }

      public PresentReadReceived_presents(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        int? nullable1;
        if (json[nameof (reward_id)] == null)
        {
          nullable1 = new int?();
        }
        else
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = !nullable2.HasValue ? new int?() : new int?((int) nullable2.Value);
        }
        this.reward_id = nullable1;
      }
    }

    [Serializable]
    public class PresentReadLump : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public WebAPI.Response.PresentReadLumpReceived_presents[] received_presents;
      public Player player;
      public bool is_success;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public PresentReadLump()
      {
      }

      public PresentReadLump(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<WebAPI.Response.PresentReadLumpReceived_presents> receivedPresentsList = new List<WebAPI.Response.PresentReadLumpReceived_presents>();
        foreach (object json4 in (List<object>) json[nameof (received_presents)])
          receivedPresentsList.Add(json4 != null ? new WebAPI.Response.PresentReadLumpReceived_presents((Dictionary<string, object>) json4) : (WebAPI.Response.PresentReadLumpReceived_presents) null);
        this.received_presents = receivedPresentsList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.is_success = (bool) json[nameof (is_success)];
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json5 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json5) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json6 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json6 != null ? new PlayerPresent((Dictionary<string, object>) json6) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json7 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json7 != null ? new PlayerQuestKey((Dictionary<string, object>) json7) : (PlayerQuestKey) null);
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PresentReadLumpReceived_presents : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int? reward_id;

      public PresentReadLumpReceived_presents()
      {
      }

      public PresentReadLumpReceived_presents(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        int? nullable1;
        if (json[nameof (reward_id)] == null)
        {
          nullable1 = new int?();
        }
        else
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = !nullable2.HasValue ? new int?() : new int?((int) nullable2.Value);
        }
        this.reward_id = nullable1;
      }
    }

    [Serializable]
    public class PvpBoot : KeyCompare
    {
      public int season_remaining_matches;
      public bool is_battle;
      public string pvp_maintenance_message;
      public bool rank_done;
      public bool is_tutorial;
      public Player player;
      public bool is_tutorial_battle_end;
      public bool is_season_done;
      public MpStage stage;
      public PvPCampaign[] pvp_campaigns;
      public int current_class;
      public PlayerDeck[] player_decks;
      public int matching_port;
      public bool medal_shop_is_available;
      public DateTime? matches_finish_time;
      public int remaining_addition_matches;
      public int remaining_times;
      public int best_class;
      public bool rank_aggregate;
      public int ranking;
      public Bonus[] bonus;
      public bool friend_match_enable;
      public Campaign[] campaigns;
      public int max_addition_matches;
      public PvPRecord pvp_record_by_friend;
      public DateTime? aggregate_finish_time;
      public int ranking_pt;
      public PvPRecord pvp_record;
      public bool has_friends;
      public bool pvp_maintenance;
      public bool class_match_enable;
      public string pvp_maintenance_title;
      public PvPClassRecord pvp_class_record;
      public bool battle_medal_shop_is_available;
      public bool is_latest_client_version;
      public string matching_host;
      public int limit_times;

      public PvpBoot()
      {
      }

      public PvpBoot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.season_remaining_matches = (int) (long) json[nameof (season_remaining_matches)];
        this.is_battle = (bool) json[nameof (is_battle)];
        this.pvp_maintenance_message = (string) json[nameof (pvp_maintenance_message)];
        this.rank_done = (bool) json[nameof (rank_done)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.is_tutorial_battle_end = (bool) json[nameof (is_tutorial_battle_end)];
        this.is_season_done = (bool) json[nameof (is_season_done)];
        this.stage = json[nameof (stage)] != null ? new MpStage((Dictionary<string, object>) json[nameof (stage)]) : (MpStage) null;
        List<PvPCampaign> pvPcampaignList = new List<PvPCampaign>();
        foreach (object json1 in (List<object>) json[nameof (pvp_campaigns)])
          pvPcampaignList.Add(json1 != null ? new PvPCampaign((Dictionary<string, object>) json1) : (PvPCampaign) null);
        this.pvp_campaigns = pvPcampaignList.ToArray();
        this.current_class = (int) (long) json[nameof (current_class)];
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json2 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json2 != null ? new PlayerDeck((Dictionary<string, object>) json2) : (PlayerDeck) null);
        this.player_decks = playerDeckList.ToArray();
        this.matching_port = (int) (long) json[nameof (matching_port)];
        this.medal_shop_is_available = (bool) json[nameof (medal_shop_is_available)];
        this.matches_finish_time = json[nameof (matches_finish_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (matches_finish_time)])) : new DateTime?();
        this.remaining_addition_matches = (int) (long) json[nameof (remaining_addition_matches)];
        this.remaining_times = (int) (long) json[nameof (remaining_times)];
        this.best_class = (int) (long) json[nameof (best_class)];
        this.rank_aggregate = (bool) json[nameof (rank_aggregate)];
        this.ranking = (int) (long) json[nameof (ranking)];
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json3 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json3 != null ? new Bonus((Dictionary<string, object>) json3) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        this.friend_match_enable = (bool) json[nameof (friend_match_enable)];
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json4 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json4 != null ? new Campaign((Dictionary<string, object>) json4) : (Campaign) null);
        this.campaigns = campaignList.ToArray();
        this.max_addition_matches = (int) (long) json[nameof (max_addition_matches)];
        this.pvp_record_by_friend = json[nameof (pvp_record_by_friend)] != null ? new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record_by_friend)]) : (PvPRecord) null;
        SMManager.Change<PvPRecord>(this.pvp_record_by_friend);
        this.aggregate_finish_time = json[nameof (aggregate_finish_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (aggregate_finish_time)])) : new DateTime?();
        this.ranking_pt = (int) (long) json[nameof (ranking_pt)];
        this.pvp_record = json[nameof (pvp_record)] != null ? new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record)]) : (PvPRecord) null;
        SMManager.Change<PvPRecord>(this.pvp_record);
        this.has_friends = (bool) json[nameof (has_friends)];
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.class_match_enable = (bool) json[nameof (class_match_enable)];
        this.pvp_maintenance_title = (string) json[nameof (pvp_maintenance_title)];
        this.pvp_class_record = json[nameof (pvp_class_record)] != null ? new PvPClassRecord((Dictionary<string, object>) json[nameof (pvp_class_record)]) : (PvPClassRecord) null;
        this.battle_medal_shop_is_available = (bool) json[nameof (battle_medal_shop_is_available)];
        this.is_latest_client_version = (bool) json[nameof (is_latest_client_version)];
        this.matching_host = (string) json[nameof (matching_host)];
        this.limit_times = (int) (long) json[nameof (limit_times)];
      }
    }

    [Serializable]
    public class PvpForceClose : KeyCompare
    {
      public bool result;

      public PvpForceClose()
      {
      }

      public PvpForceClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.result = (bool) json[nameof (result)];
      }
    }

    [Serializable]
    public class PvpFriend : KeyCompare
    {
      public int ranking;
      public PvPRecord pvp_record;
      public PvPRecord pvp_record_by_friend;
      public bool is_friend;
      public int level;
      public string target_player_id;
      public DateTime target_player_last_signed_in_at;
      public int target_player_current_class;
      public int ranking_point;
      public int current_emblem_id;
      public int leader_unit_id;
      public string target_player_name;
      public int leader_unit_level;
      public bool is_first_battle;

      public PvpFriend()
      {
      }

      public PvpFriend(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.ranking = (int) (long) json[nameof (ranking)];
        this.pvp_record = json[nameof (pvp_record)] != null ? new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record)]) : (PvPRecord) null;
        this.pvp_record_by_friend = json[nameof (pvp_record_by_friend)] != null ? new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record_by_friend)]) : (PvPRecord) null;
        this.is_friend = (bool) json[nameof (is_friend)];
        this.level = (int) (long) json[nameof (level)];
        this.target_player_id = (string) json[nameof (target_player_id)];
        this.target_player_last_signed_in_at = DateTime.Parse((string) json[nameof (target_player_last_signed_in_at)]);
        this.target_player_current_class = (int) (long) json[nameof (target_player_current_class)];
        this.ranking_point = (int) (long) json[nameof (ranking_point)];
        this.current_emblem_id = (int) (long) json[nameof (current_emblem_id)];
        this.leader_unit_id = (int) (long) json[nameof (leader_unit_id)];
        this.target_player_name = (string) json[nameof (target_player_name)];
        this.leader_unit_level = (int) (long) json[nameof (leader_unit_level)];
        this.is_first_battle = (bool) json[nameof (is_first_battle)];
      }

      public string getClassNameString()
      {
        return MasterData.PvpClassKind[this.target_player_current_class].name;
      }

      public string getRankingString()
      {
        return Player.Current.IsClassMatchRanking() && this.ranking > 0 ? this.ranking.ToLocalizeNumberText() : Consts.GetInstance().VERSUS_002610RANKING_DEFAULT;
      }

      public string getPointString()
      {
        return Player.Current.IsClassMatchRanking() ? this.ranking_point.ToLocalizeNumberText() : Consts.GetInstance().VERSUS_002610RANKING_DEFAULT;
      }
    }

    [Serializable]
    public class PvpLiteBoot : KeyCompare
    {
      public bool is_battle;
      public string pvp_maintenance_message;
      public bool pvp_maintenance;
      public string pvp_maintenance_title;
      public Player player;
      public bool is_latest_version;

      public PvpLiteBoot()
      {
      }

      public PvpLiteBoot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.pvp_maintenance_message = (string) json[nameof (pvp_maintenance_message)];
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.pvp_maintenance_title = (string) json[nameof (pvp_maintenance_title)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.is_latest_version = (bool) json[nameof (is_latest_version)];
      }
    }

    [Serializable]
    public class PvpPlayerFinish : KeyCompare
    {
      public bool is_battle;
      public string pvp_maintenance_message;
      public int ranking;
      public int reward_money;
      public bool is_tutorial;
      public Player player;
      public bool is_season_done;
      public PvPEnd pvp_finish;
      public WebAPI.Response.PvpPlayerFinishCampaign_next_rewards[] campaign_next_rewards;
      public int current_class;
      public bool target_player_is_friend;
      public bool rank_aggregate;
      public WebAPI.Response.PvpPlayerFinishBonus_rewards[] bonus_rewards;
      public WebAPI.Response.PvpPlayerFinishFirst_battle_rewards[] first_battle_rewards;
      public PlayerUnit[] player_units;
      public Bonus[] bonus;
      public PlayerItem[] player_items;
      public Campaign[] campaigns;
      public int matching_type;
      public WebAPI.Response.PvpPlayerFinishCampaign_rewards[] campaign_rewards;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PvPRecord pvp_record;
      public PvPRecord pvp_record_by_friend;
      public bool pvp_maintenance;
      public string pvp_maintenance_title;
      public PvPClassRecord pvp_class_record;
      public int ranking_pt;
      public PlayerHelper[] gladiators;

      public PvpPlayerFinish()
      {
      }

      public PvpPlayerFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.pvp_maintenance_message = (string) json[nameof (pvp_maintenance_message)];
        this.ranking = (int) (long) json[nameof (ranking)];
        this.reward_money = (int) (long) json[nameof (reward_money)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.is_season_done = (bool) json[nameof (is_season_done)];
        this.pvp_finish = json[nameof (pvp_finish)] != null ? new PvPEnd((Dictionary<string, object>) json[nameof (pvp_finish)]) : (PvPEnd) null;
        List<WebAPI.Response.PvpPlayerFinishCampaign_next_rewards> campaignNextRewardsList = new List<WebAPI.Response.PvpPlayerFinishCampaign_next_rewards>();
        foreach (object json1 in (List<object>) json[nameof (campaign_next_rewards)])
          campaignNextRewardsList.Add(json1 != null ? new WebAPI.Response.PvpPlayerFinishCampaign_next_rewards((Dictionary<string, object>) json1) : (WebAPI.Response.PvpPlayerFinishCampaign_next_rewards) null);
        this.campaign_next_rewards = campaignNextRewardsList.ToArray();
        this.current_class = (int) (long) json[nameof (current_class)];
        this.target_player_is_friend = (bool) json[nameof (target_player_is_friend)];
        this.rank_aggregate = (bool) json[nameof (rank_aggregate)];
        List<WebAPI.Response.PvpPlayerFinishBonus_rewards> finishBonusRewardsList = new List<WebAPI.Response.PvpPlayerFinishBonus_rewards>();
        foreach (object json2 in (List<object>) json[nameof (bonus_rewards)])
          finishBonusRewardsList.Add(json2 != null ? new WebAPI.Response.PvpPlayerFinishBonus_rewards((Dictionary<string, object>) json2) : (WebAPI.Response.PvpPlayerFinishBonus_rewards) null);
        this.bonus_rewards = finishBonusRewardsList.ToArray();
        List<WebAPI.Response.PvpPlayerFinishFirst_battle_rewards> firstBattleRewardsList = new List<WebAPI.Response.PvpPlayerFinishFirst_battle_rewards>();
        foreach (object json3 in (List<object>) json[nameof (first_battle_rewards)])
          firstBattleRewardsList.Add(json3 != null ? new WebAPI.Response.PvpPlayerFinishFirst_battle_rewards((Dictionary<string, object>) json3) : (WebAPI.Response.PvpPlayerFinishFirst_battle_rewards) null);
        this.first_battle_rewards = firstBattleRewardsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json5 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json5 != null ? new Bonus((Dictionary<string, object>) json5) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json6 != null ? new PlayerItem((Dictionary<string, object>) json6) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json7 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json7 != null ? new Campaign((Dictionary<string, object>) json7) : (Campaign) null);
        this.campaigns = campaignList.ToArray();
        this.matching_type = (int) (long) json[nameof (matching_type)];
        List<WebAPI.Response.PvpPlayerFinishCampaign_rewards> finishCampaignRewardsList = new List<WebAPI.Response.PvpPlayerFinishCampaign_rewards>();
        foreach (object json8 in (List<object>) json[nameof (campaign_rewards)])
          finishCampaignRewardsList.Add(json8 != null ? new WebAPI.Response.PvpPlayerFinishCampaign_rewards((Dictionary<string, object>) json8) : (WebAPI.Response.PvpPlayerFinishCampaign_rewards) null);
        this.campaign_rewards = finishCampaignRewardsList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json9) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 != null ? new PlayerPresent((Dictionary<string, object>) json10) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json11 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json11 != null ? new PlayerMaterialGear((Dictionary<string, object>) json11) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json12 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json12 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json12) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        this.pvp_record = json[nameof (pvp_record)] != null ? new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record)]) : (PvPRecord) null;
        this.pvp_record_by_friend = json[nameof (pvp_record_by_friend)] != null ? new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record_by_friend)]) : (PvPRecord) null;
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.pvp_maintenance_title = (string) json[nameof (pvp_maintenance_title)];
        this.pvp_class_record = json[nameof (pvp_class_record)] != null ? new PvPClassRecord((Dictionary<string, object>) json[nameof (pvp_class_record)]) : (PvPClassRecord) null;
        this.ranking_pt = (int) (long) json[nameof (ranking_pt)];
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json13 in (List<object>) json[nameof (gladiators)])
          playerHelperList.Add(json13 != null ? new PlayerHelper((Dictionary<string, object>) json13) : (PlayerHelper) null);
        this.gladiators = playerHelperList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PvpPlayerFinishCampaign_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public int reward_type_id;
      public int campaign_id;
      public string show_title;
      public string show_text;
      public int reward_id;

      public PvpPlayerFinishCampaign_rewards()
      {
      }

      public PvpPlayerFinishCampaign_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.show_title = (string) json[nameof (show_title)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpPlayerFinishFirst_battle_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public string show_text;
      public int reward_type_id;
      public int reward_id;

      public PvpPlayerFinishFirst_battle_rewards()
      {
      }

      public PvpPlayerFinishFirst_battle_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpPlayerFinishBonus_rewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public PvpPlayerFinishBonus_rewards()
      {
      }

      public PvpPlayerFinishBonus_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpPlayerFinishCampaign_next_rewards : KeyCompare
    {
      public string next_reward_title;
      public int campaign_id;
      public string next_reward_text;

      public PvpPlayerFinishCampaign_next_rewards()
      {
      }

      public PvpPlayerFinishCampaign_next_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.next_reward_title = (string) json[nameof (next_reward_title)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.next_reward_text = (string) json[nameof (next_reward_text)];
      }
    }

    [Serializable]
    public class PvpPlayerStatus : KeyCompare
    {
      public bool has_battle_result;

      public PvpPlayerStatus()
      {
      }

      public PvpPlayerStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.has_battle_result = (bool) json[nameof (has_battle_result)];
      }
    }

    [Serializable]
    public class PvpRanking : KeyCompare
    {
      public bool rank_aggregate;
      public RankingGroup[] ranking_groups;

      public PvpRanking()
      {
      }

      public PvpRanking(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.rank_aggregate = (bool) json[nameof (rank_aggregate)];
        List<RankingGroup> rankingGroupList = new List<RankingGroup>();
        foreach (object json1 in (List<object>) json[nameof (ranking_groups)])
          rankingGroupList.Add(json1 != null ? new RankingGroup((Dictionary<string, object>) json1) : (RankingGroup) null);
        this.ranking_groups = rankingGroupList.ToArray();
      }
    }

    [Serializable]
    public class PvpRankingClose : KeyCompare
    {
      public int ranking;
      public PlayerEmblem[] new_emblems;
      public DateTime? finish_time;
      public int term_id;
      public DateTime? start_time;
      public int ranking_pt;
      public WebAPI.Response.PvpRankingCloseRanking_rewards[] ranking_rewards;
      public PlayerPresent[] player_presents;

      public PvpRankingClose()
      {
      }

      public PvpRankingClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.ranking = (int) (long) json[nameof (ranking)];
        List<PlayerEmblem> playerEmblemList = new List<PlayerEmblem>();
        foreach (object json1 in (List<object>) json[nameof (new_emblems)])
          playerEmblemList.Add(json1 != null ? new PlayerEmblem((Dictionary<string, object>) json1) : (PlayerEmblem) null);
        this.new_emblems = playerEmblemList.ToArray();
        this.finish_time = json[nameof (finish_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (finish_time)])) : new DateTime?();
        this.term_id = (int) (long) json[nameof (term_id)];
        this.start_time = json[nameof (start_time)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (start_time)])) : new DateTime?();
        this.ranking_pt = (int) (long) json[nameof (ranking_pt)];
        List<WebAPI.Response.PvpRankingCloseRanking_rewards> closeRankingRewardsList = new List<WebAPI.Response.PvpRankingCloseRanking_rewards>();
        foreach (object json2 in (List<object>) json[nameof (ranking_rewards)])
          closeRankingRewardsList.Add(json2 != null ? new WebAPI.Response.PvpRankingCloseRanking_rewards((Dictionary<string, object>) json2) : (WebAPI.Response.PvpRankingCloseRanking_rewards) null);
        this.ranking_rewards = closeRankingRewardsList.ToArray();
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json3 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json3 != null ? new PlayerPresent((Dictionary<string, object>) json3) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PvpRankingCloseRanking_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text;
      public int condition_id;
      public int reward_id;
      public int reward_type_id;

      public PvpRankingCloseRanking_rewards()
      {
      }

      public PvpRankingCloseRanking_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text = (string) json[nameof (show_text)];
        this.condition_id = (int) (long) json[nameof (condition_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
      }
    }

    [Serializable]
    public class PvpResume : KeyCompare
    {
      public PlayerCharacterIntimate[] player2_character_intimates;
      public PlayerUnit[] player2_units;
      public DateTime battle_start_at;
      public string battle_uuid;
      public Bonus[] bonus;
      public PlayerItem[] player1_items;
      public bool battle_start;
      public PlayerCharacterIntimate[] player1_character_intimates;
      public PlayerUnit[] player1_units;
      public Player player2;
      public Player player1;
      public int order;
      public PlayerItem[] player2_items;
      public MpStage stage;

      public PvpResume()
      {
      }

      public PvpResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerCharacterIntimate> characterIntimateList1 = new List<PlayerCharacterIntimate>();
        foreach (object json1 in (List<object>) json[nameof (player2_character_intimates)])
          characterIntimateList1.Add(json1 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json1) : (PlayerCharacterIntimate) null);
        this.player2_character_intimates = characterIntimateList1.ToArray();
        List<PlayerUnit> playerUnitList1 = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player2_units)])
          playerUnitList1.Add(json2 != null ? new PlayerUnit((Dictionary<string, object>) json2) : (PlayerUnit) null);
        this.player2_units = playerUnitList1.ToArray();
        this.battle_start_at = DateTime.Parse((string) json[nameof (battle_start_at)]);
        this.battle_uuid = (string) json[nameof (battle_uuid)];
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json3 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json3 != null ? new Bonus((Dictionary<string, object>) json3) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList1 = new List<PlayerItem>();
        foreach (object json4 in (List<object>) json[nameof (player1_items)])
          playerItemList1.Add(json4 != null ? new PlayerItem((Dictionary<string, object>) json4) : (PlayerItem) null);
        this.player1_items = playerItemList1.ToArray();
        this.battle_start = (bool) json[nameof (battle_start)];
        List<PlayerCharacterIntimate> characterIntimateList2 = new List<PlayerCharacterIntimate>();
        foreach (object json5 in (List<object>) json[nameof (player1_character_intimates)])
          characterIntimateList2.Add(json5 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json5) : (PlayerCharacterIntimate) null);
        this.player1_character_intimates = characterIntimateList2.ToArray();
        List<PlayerUnit> playerUnitList2 = new List<PlayerUnit>();
        foreach (object json6 in (List<object>) json[nameof (player1_units)])
          playerUnitList2.Add(json6 != null ? new PlayerUnit((Dictionary<string, object>) json6) : (PlayerUnit) null);
        this.player1_units = playerUnitList2.ToArray();
        this.player2 = json[nameof (player2)] != null ? new Player((Dictionary<string, object>) json[nameof (player2)]) : (Player) null;
        this.player1 = json[nameof (player1)] != null ? new Player((Dictionary<string, object>) json[nameof (player1)]) : (Player) null;
        this.order = (int) (long) json[nameof (order)];
        List<PlayerItem> playerItemList2 = new List<PlayerItem>();
        foreach (object json7 in (List<object>) json[nameof (player2_items)])
          playerItemList2.Add(json7 != null ? new PlayerItem((Dictionary<string, object>) json7) : (PlayerItem) null);
        this.player2_items = playerItemList2.ToArray();
        this.stage = json[nameof (stage)] != null ? new MpStage((Dictionary<string, object>) json[nameof (stage)]) : (MpStage) null;
      }
    }

    [Serializable]
    public class PvpSeasonClose : KeyCompare
    {
      public WebAPI.Response.PvpSeasonCloseClass_rewards[] class_rewards;
      public PlayerEmblem[] new_emblems;
      public PlayerPresent[] player_presents;

      public PvpSeasonClose()
      {
      }

      public PvpSeasonClose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.PvpSeasonCloseClass_rewards> closeClassRewardsList = new List<WebAPI.Response.PvpSeasonCloseClass_rewards>();
        foreach (object json1 in (List<object>) json[nameof (class_rewards)])
          closeClassRewardsList.Add(json1 != null ? new WebAPI.Response.PvpSeasonCloseClass_rewards((Dictionary<string, object>) json1) : (WebAPI.Response.PvpSeasonCloseClass_rewards) null);
        this.class_rewards = closeClassRewardsList.ToArray();
        List<PlayerEmblem> playerEmblemList = new List<PlayerEmblem>();
        foreach (object json2 in (List<object>) json[nameof (new_emblems)])
          playerEmblemList.Add(json2 != null ? new PlayerEmblem((Dictionary<string, object>) json2) : (PlayerEmblem) null);
        this.new_emblems = playerEmblemList.ToArray();
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json3 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json3 != null ? new PlayerPresent((Dictionary<string, object>) json3) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PvpSeasonCloseClass_rewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int class_reward_type;
      public string show_text;
      public int class_kind;
      public int reward_id;

      public PvpSeasonCloseClass_rewards()
      {
      }

      public PvpSeasonCloseClass_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.class_reward_type = (int) (long) json[nameof (class_reward_type)];
        this.show_text = (string) json[nameof (show_text)];
        this.class_kind = (int) (long) json[nameof (class_kind)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpTutorialPlayerFinish : KeyCompare
    {
      public bool is_battle;
      public string pvp_maintenance_message;
      public int ranking;
      public int reward_money;
      public bool is_tutorial;
      public Player player;
      public bool is_season_done;
      public PvPEnd pvp_finish;
      public WebAPI.Response.PvpTutorialPlayerFinishCampaign_next_rewards[] campaign_next_rewards;
      public int current_class;
      public bool target_player_is_friend;
      public bool rank_aggregate;
      public WebAPI.Response.PvpTutorialPlayerFinishBonus_rewards[] bonus_rewards;
      public WebAPI.Response.PvpTutorialPlayerFinishFirst_battle_rewards[] first_battle_rewards;
      public PlayerUnit[] player_units;
      public Bonus[] bonus;
      public PlayerItem[] player_items;
      public Campaign[] campaigns;
      public int matching_type;
      public WebAPI.Response.PvpTutorialPlayerFinishCampaign_rewards[] campaign_rewards;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerMaterialGear[] player_material_gears;
      public PlayerCharacterIntimate[] player_character_intimates;
      public PvPRecord pvp_record;
      public PvPRecord pvp_record_by_friend;
      public bool pvp_maintenance;
      public string pvp_maintenance_title;
      public PvPClassRecord pvp_class_record;
      public int ranking_pt;
      public PlayerHelper[] gladiators;

      public PvpTutorialPlayerFinish()
      {
      }

      public PvpTutorialPlayerFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_battle = (bool) json[nameof (is_battle)];
        this.pvp_maintenance_message = (string) json[nameof (pvp_maintenance_message)];
        this.ranking = (int) (long) json[nameof (ranking)];
        this.reward_money = (int) (long) json[nameof (reward_money)];
        this.is_tutorial = (bool) json[nameof (is_tutorial)];
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.is_season_done = (bool) json[nameof (is_season_done)];
        this.pvp_finish = json[nameof (pvp_finish)] != null ? new PvPEnd((Dictionary<string, object>) json[nameof (pvp_finish)]) : (PvPEnd) null;
        List<WebAPI.Response.PvpTutorialPlayerFinishCampaign_next_rewards> campaignNextRewardsList = new List<WebAPI.Response.PvpTutorialPlayerFinishCampaign_next_rewards>();
        foreach (object json1 in (List<object>) json[nameof (campaign_next_rewards)])
          campaignNextRewardsList.Add(json1 != null ? new WebAPI.Response.PvpTutorialPlayerFinishCampaign_next_rewards((Dictionary<string, object>) json1) : (WebAPI.Response.PvpTutorialPlayerFinishCampaign_next_rewards) null);
        this.campaign_next_rewards = campaignNextRewardsList.ToArray();
        this.current_class = (int) (long) json[nameof (current_class)];
        this.target_player_is_friend = (bool) json[nameof (target_player_is_friend)];
        this.rank_aggregate = (bool) json[nameof (rank_aggregate)];
        List<WebAPI.Response.PvpTutorialPlayerFinishBonus_rewards> finishBonusRewardsList = new List<WebAPI.Response.PvpTutorialPlayerFinishBonus_rewards>();
        foreach (object json2 in (List<object>) json[nameof (bonus_rewards)])
          finishBonusRewardsList.Add(json2 != null ? new WebAPI.Response.PvpTutorialPlayerFinishBonus_rewards((Dictionary<string, object>) json2) : (WebAPI.Response.PvpTutorialPlayerFinishBonus_rewards) null);
        this.bonus_rewards = finishBonusRewardsList.ToArray();
        List<WebAPI.Response.PvpTutorialPlayerFinishFirst_battle_rewards> firstBattleRewardsList = new List<WebAPI.Response.PvpTutorialPlayerFinishFirst_battle_rewards>();
        foreach (object json3 in (List<object>) json[nameof (first_battle_rewards)])
          firstBattleRewardsList.Add(json3 != null ? new WebAPI.Response.PvpTutorialPlayerFinishFirst_battle_rewards((Dictionary<string, object>) json3) : (WebAPI.Response.PvpTutorialPlayerFinishFirst_battle_rewards) null);
        this.first_battle_rewards = firstBattleRewardsList.ToArray();
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json4 != null ? new PlayerUnit((Dictionary<string, object>) json4) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<Bonus> bonusList = new List<Bonus>();
        foreach (object json5 in (List<object>) json[nameof (bonus)])
          bonusList.Add(json5 != null ? new Bonus((Dictionary<string, object>) json5) : (Bonus) null);
        this.bonus = bonusList.ToArray();
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json6 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json6 != null ? new PlayerItem((Dictionary<string, object>) json6) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<Campaign> campaignList = new List<Campaign>();
        foreach (object json7 in (List<object>) json[nameof (campaigns)])
          campaignList.Add(json7 != null ? new Campaign((Dictionary<string, object>) json7) : (Campaign) null);
        this.campaigns = campaignList.ToArray();
        this.matching_type = (int) (long) json[nameof (matching_type)];
        List<WebAPI.Response.PvpTutorialPlayerFinishCampaign_rewards> finishCampaignRewardsList = new List<WebAPI.Response.PvpTutorialPlayerFinishCampaign_rewards>();
        foreach (object json8 in (List<object>) json[nameof (campaign_rewards)])
          finishCampaignRewardsList.Add(json8 != null ? new WebAPI.Response.PvpTutorialPlayerFinishCampaign_rewards((Dictionary<string, object>) json8) : (WebAPI.Response.PvpTutorialPlayerFinishCampaign_rewards) null);
        this.campaign_rewards = finishCampaignRewardsList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json9 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json9 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json9) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json10 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json10 != null ? new PlayerPresent((Dictionary<string, object>) json10) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json11 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json11 != null ? new PlayerMaterialGear((Dictionary<string, object>) json11) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerCharacterIntimate> characterIntimateList = new List<PlayerCharacterIntimate>();
        foreach (object json12 in (List<object>) json[nameof (player_character_intimates)])
          characterIntimateList.Add(json12 != null ? new PlayerCharacterIntimate((Dictionary<string, object>) json12) : (PlayerCharacterIntimate) null);
        this.player_character_intimates = characterIntimateList.ToArray();
        SMManager.UpdateList<PlayerCharacterIntimate>(this.player_character_intimates);
        this.pvp_record = json[nameof (pvp_record)] != null ? new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record)]) : (PvPRecord) null;
        this.pvp_record_by_friend = json[nameof (pvp_record_by_friend)] != null ? new PvPRecord((Dictionary<string, object>) json[nameof (pvp_record_by_friend)]) : (PvPRecord) null;
        this.pvp_maintenance = (bool) json[nameof (pvp_maintenance)];
        this.pvp_maintenance_title = (string) json[nameof (pvp_maintenance_title)];
        this.pvp_class_record = json[nameof (pvp_class_record)] != null ? new PvPClassRecord((Dictionary<string, object>) json[nameof (pvp_class_record)]) : (PvPClassRecord) null;
        this.ranking_pt = (int) (long) json[nameof (ranking_pt)];
        List<PlayerHelper> playerHelperList = new List<PlayerHelper>();
        foreach (object json13 in (List<object>) json[nameof (gladiators)])
          playerHelperList.Add(json13 != null ? new PlayerHelper((Dictionary<string, object>) json13) : (PlayerHelper) null);
        this.gladiators = playerHelperList.ToArray();
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_items:delete"))
          SMManager.DeleteList<PlayerItem>(((IEnumerable<object>) json["player_items:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class PvpTutorialPlayerFinishCampaign_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public int reward_type_id;
      public int campaign_id;
      public string show_title;
      public string show_text;
      public int reward_id;

      public PvpTutorialPlayerFinishCampaign_rewards()
      {
      }

      public PvpTutorialPlayerFinishCampaign_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.show_title = (string) json[nameof (show_title)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpTutorialPlayerFinishFirst_battle_rewards : KeyCompare
    {
      public int reward_quantity;
      public string show_text2;
      public string show_text;
      public int reward_type_id;
      public int reward_id;

      public PvpTutorialPlayerFinishFirst_battle_rewards()
      {
      }

      public PvpTutorialPlayerFinishFirst_battle_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.show_text2 = (string) json[nameof (show_text2)];
        this.show_text = (string) json[nameof (show_text)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpTutorialPlayerFinishBonus_rewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public PvpTutorialPlayerFinishBonus_rewards()
      {
      }

      public PvpTutorialPlayerFinishBonus_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class PvpTutorialPlayerFinishCampaign_next_rewards : KeyCompare
    {
      public string next_reward_title;
      public int campaign_id;
      public string next_reward_text;

      public PvpTutorialPlayerFinishCampaign_next_rewards()
      {
      }

      public PvpTutorialPlayerFinishCampaign_next_rewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.next_reward_title = (string) json[nameof (next_reward_title)];
        this.campaign_id = (int) (long) json[nameof (campaign_id)];
        this.next_reward_text = (string) json[nameof (next_reward_text)];
      }
    }

    [Serializable]
    public class PvpTutorialProgressFinish : KeyCompare
    {
      public bool tutorial_finish;

      public PvpTutorialProgressFinish()
      {
      }

      public PvpTutorialProgressFinish(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.tutorial_finish = (bool) json[nameof (tutorial_finish)];
      }
    }

    [Serializable]
    public class QuestHistoryExtra : KeyCompare
    {
      public int[] cleared_quest_s_ids;

      public QuestHistoryExtra()
      {
      }

      public QuestHistoryExtra(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.cleared_quest_s_ids = ((IEnumerable<object>) json[nameof (cleared_quest_s_ids)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class QuestLimitationCharacter : KeyCompare
    {
      public PlayerDeck[] limitation_player_decks;

      public QuestLimitationCharacter()
      {
      }

      public QuestLimitationCharacter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json1 in (List<object>) json[nameof (limitation_player_decks)])
          playerDeckList.Add(json1 != null ? new PlayerDeck((Dictionary<string, object>) json1) : (PlayerDeck) null);
        this.limitation_player_decks = playerDeckList.ToArray();
      }
    }

    [Serializable]
    public class QuestLimitationExtra : KeyCompare
    {
      public PlayerDeck[] limitation_player_decks;

      public QuestLimitationExtra()
      {
      }

      public QuestLimitationExtra(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json1 in (List<object>) json[nameof (limitation_player_decks)])
          playerDeckList.Add(json1 != null ? new PlayerDeck((Dictionary<string, object>) json1) : (PlayerDeck) null);
        this.limitation_player_decks = playerDeckList.ToArray();
      }
    }

    [Serializable]
    public class QuestLimitationHarmony : KeyCompare
    {
      public PlayerDeck[] limitation_player_decks;

      public QuestLimitationHarmony()
      {
      }

      public QuestLimitationHarmony(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json1 in (List<object>) json[nameof (limitation_player_decks)])
          playerDeckList.Add(json1 != null ? new PlayerDeck((Dictionary<string, object>) json1) : (PlayerDeck) null);
        this.limitation_player_decks = playerDeckList.ToArray();
      }
    }

    [Serializable]
    public class QuestLimitationStory : KeyCompare
    {
      public PlayerDeck[] limitation_player_decks;

      public QuestLimitationStory()
      {
      }

      public QuestLimitationStory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json1 in (List<object>) json[nameof (limitation_player_decks)])
          playerDeckList.Add(json1 != null ? new PlayerDeck((Dictionary<string, object>) json1) : (PlayerDeck) null);
        this.limitation_player_decks = playerDeckList.ToArray();
      }
    }

    [Serializable]
    public class QuestProgressCharacter : KeyCompare
    {
      public WebAPI.Response.QuestProgressCharacterHarmony_quest_s_lost_aps[] harmony_quest_s_lost_aps;
      public WebAPI.Response.QuestProgressCharacterCharacter_quest_s_lost_aps[] character_quest_s_lost_aps;
      public PlayerCharacterQuestS[] player_character_quests;
      public PlayerHarmonyQuestM[] harmonies;
      public PlayerCharacterQuestM[] characters;
      public PlayerHarmonyQuestS[] player_harmony_quests;

      public QuestProgressCharacter()
      {
      }

      public QuestProgressCharacter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.QuestProgressCharacterHarmony_quest_s_lost_aps> harmonyQuestSLostApsList = new List<WebAPI.Response.QuestProgressCharacterHarmony_quest_s_lost_aps>();
        foreach (object json1 in (List<object>) json[nameof (harmony_quest_s_lost_aps)])
          harmonyQuestSLostApsList.Add(json1 != null ? new WebAPI.Response.QuestProgressCharacterHarmony_quest_s_lost_aps((Dictionary<string, object>) json1) : (WebAPI.Response.QuestProgressCharacterHarmony_quest_s_lost_aps) null);
        this.harmony_quest_s_lost_aps = harmonyQuestSLostApsList.ToArray();
        List<WebAPI.Response.QuestProgressCharacterCharacter_quest_s_lost_aps> characterQuestSLostApsList = new List<WebAPI.Response.QuestProgressCharacterCharacter_quest_s_lost_aps>();
        foreach (object json2 in (List<object>) json[nameof (character_quest_s_lost_aps)])
          characterQuestSLostApsList.Add(json2 != null ? new WebAPI.Response.QuestProgressCharacterCharacter_quest_s_lost_aps((Dictionary<string, object>) json2) : (WebAPI.Response.QuestProgressCharacterCharacter_quest_s_lost_aps) null);
        this.character_quest_s_lost_aps = characterQuestSLostApsList.ToArray();
        List<PlayerCharacterQuestS> playerCharacterQuestSList = new List<PlayerCharacterQuestS>();
        foreach (object json3 in (List<object>) json[nameof (player_character_quests)])
          playerCharacterQuestSList.Add(json3 != null ? new PlayerCharacterQuestS((Dictionary<string, object>) json3) : (PlayerCharacterQuestS) null);
        this.player_character_quests = playerCharacterQuestSList.ToArray();
        SMManager.UpdateList<PlayerCharacterQuestS>(this.player_character_quests);
        List<PlayerHarmonyQuestM> playerHarmonyQuestMList = new List<PlayerHarmonyQuestM>();
        foreach (object json4 in (List<object>) json[nameof (harmonies)])
          playerHarmonyQuestMList.Add(json4 != null ? new PlayerHarmonyQuestM((Dictionary<string, object>) json4) : (PlayerHarmonyQuestM) null);
        this.harmonies = playerHarmonyQuestMList.ToArray();
        SMManager.UpdateList<PlayerHarmonyQuestM>(this.harmonies);
        List<PlayerCharacterQuestM> playerCharacterQuestMList = new List<PlayerCharacterQuestM>();
        foreach (object json5 in (List<object>) json[nameof (characters)])
          playerCharacterQuestMList.Add(json5 != null ? new PlayerCharacterQuestM((Dictionary<string, object>) json5) : (PlayerCharacterQuestM) null);
        this.characters = playerCharacterQuestMList.ToArray();
        SMManager.UpdateList<PlayerCharacterQuestM>(this.characters);
        List<PlayerHarmonyQuestS> playerHarmonyQuestSList = new List<PlayerHarmonyQuestS>();
        foreach (object json6 in (List<object>) json[nameof (player_harmony_quests)])
          playerHarmonyQuestSList.Add(json6 != null ? new PlayerHarmonyQuestS((Dictionary<string, object>) json6) : (PlayerHarmonyQuestS) null);
        this.player_harmony_quests = playerHarmonyQuestSList.ToArray();
        SMManager.UpdateList<PlayerHarmonyQuestS>(this.player_harmony_quests);
      }
    }

    [Serializable]
    public class QuestProgressCharacterCharacter_quest_s_lost_aps : KeyCompare
    {
      public int lost_ap;
      public int quest_s_id;

      public QuestProgressCharacterCharacter_quest_s_lost_aps()
      {
      }

      public QuestProgressCharacterCharacter_quest_s_lost_aps(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.lost_ap = (int) (long) json[nameof (lost_ap)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class QuestProgressCharacterHarmony_quest_s_lost_aps : KeyCompare
    {
      public int lost_ap;
      public int quest_s_id;

      public QuestProgressCharacterHarmony_quest_s_lost_aps()
      {
      }

      public QuestProgressCharacterHarmony_quest_s_lost_aps(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.lost_ap = (int) (long) json[nameof (lost_ap)];
        this.quest_s_id = (int) (long) json[nameof (quest_s_id)];
      }
    }

    [Serializable]
    public class QuestProgressExtra : KeyCompare
    {
      public PlayerQuestGate[] quest_gates;
      public PlayerExtraQuestS[] player_extra_quests;
      public EventInfo[] event_infos;
      public QuestScoreCampaignProgress[] score_campaigns;
      public QuestExtraTimetable timetable;
      public int[] sort_categories;

      public QuestProgressExtra()
      {
      }

      public QuestProgressExtra(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerQuestGate> playerQuestGateList = new List<PlayerQuestGate>();
        foreach (object json1 in (List<object>) json[nameof (quest_gates)])
          playerQuestGateList.Add(json1 != null ? new PlayerQuestGate((Dictionary<string, object>) json1) : (PlayerQuestGate) null);
        this.quest_gates = playerQuestGateList.ToArray();
        SMManager.UpdateList<PlayerQuestGate>(this.quest_gates);
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json2 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json2 != null ? new PlayerExtraQuestS((Dictionary<string, object>) json2) : (PlayerExtraQuestS) null);
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests);
        List<EventInfo> eventInfoList = new List<EventInfo>();
        foreach (object json3 in (List<object>) json[nameof (event_infos)])
          eventInfoList.Add(json3 != null ? new EventInfo((Dictionary<string, object>) json3) : (EventInfo) null);
        this.event_infos = eventInfoList.ToArray();
        SMManager.UpdateList<EventInfo>(this.event_infos);
        List<QuestScoreCampaignProgress> campaignProgressList = new List<QuestScoreCampaignProgress>();
        foreach (object json4 in (List<object>) json[nameof (score_campaigns)])
          campaignProgressList.Add(json4 != null ? new QuestScoreCampaignProgress((Dictionary<string, object>) json4) : (QuestScoreCampaignProgress) null);
        this.score_campaigns = campaignProgressList.ToArray();
        SMManager.UpdateList<QuestScoreCampaignProgress>(this.score_campaigns);
        this.timetable = json[nameof (timetable)] != null ? new QuestExtraTimetable((Dictionary<string, object>) json[nameof (timetable)]) : (QuestExtraTimetable) null;
        SMManager.Change<QuestExtraTimetable>(this.timetable);
        this.sort_categories = ((IEnumerable<object>) json[nameof (sort_categories)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
      }
    }

    [Serializable]
    public class QuestProgressHarmony : KeyCompare
    {
      public PlayerHarmonyQuestM[] harmonies;
      public PlayerHarmonyQuestS[] player_harmony_quests;

      public QuestProgressHarmony()
      {
      }

      public QuestProgressHarmony(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerHarmonyQuestM> playerHarmonyQuestMList = new List<PlayerHarmonyQuestM>();
        foreach (object json1 in (List<object>) json[nameof (harmonies)])
          playerHarmonyQuestMList.Add(json1 != null ? new PlayerHarmonyQuestM((Dictionary<string, object>) json1) : (PlayerHarmonyQuestM) null);
        this.harmonies = playerHarmonyQuestMList.ToArray();
        SMManager.UpdateList<PlayerHarmonyQuestM>(this.harmonies);
        List<PlayerHarmonyQuestS> playerHarmonyQuestSList = new List<PlayerHarmonyQuestS>();
        foreach (object json2 in (List<object>) json[nameof (player_harmony_quests)])
          playerHarmonyQuestSList.Add(json2 != null ? new PlayerHarmonyQuestS((Dictionary<string, object>) json2) : (PlayerHarmonyQuestS) null);
        this.player_harmony_quests = playerHarmonyQuestSList.ToArray();
        SMManager.UpdateList<PlayerHarmonyQuestS>(this.player_harmony_quests);
      }
    }

    [Serializable]
    public class QuestProgressStory : KeyCompare
    {
      public PlayerStoryQuestS[] player_story_quests;

      public QuestProgressStory()
      {
      }

      public QuestProgressStory(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerStoryQuestS> playerStoryQuestSList = new List<PlayerStoryQuestS>();
        foreach (object json1 in (List<object>) json[nameof (player_story_quests)])
          playerStoryQuestSList.Add(json1 != null ? new PlayerStoryQuestS((Dictionary<string, object>) json1) : (PlayerStoryQuestS) null);
        this.player_story_quests = playerStoryQuestSList.ToArray();
      }
    }

    [Serializable]
    public class QuestRankingExtra : KeyCompare
    {
      public QuestScoreRankingPlayer[] ranking;
      public QuestScoreRankingPlayer my_ranking;

      public QuestRankingExtra()
      {
      }

      public QuestRankingExtra(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<QuestScoreRankingPlayer> scoreRankingPlayerList = new List<QuestScoreRankingPlayer>();
        foreach (object json1 in (List<object>) json[nameof (ranking)])
          scoreRankingPlayerList.Add(json1 != null ? new QuestScoreRankingPlayer((Dictionary<string, object>) json1) : (QuestScoreRankingPlayer) null);
        this.ranking = scoreRankingPlayerList.ToArray();
        this.my_ranking = json[nameof (my_ranking)] != null ? new QuestScoreRankingPlayer((Dictionary<string, object>) json[nameof (my_ranking)]) : (QuestScoreRankingPlayer) null;
      }
    }

    [Serializable]
    public class QuestkeyIndex : KeyCompare
    {
      public PlayerQuestGate[] quest_gates;
      public PlayerExtraQuestS[] player_extra_quests;
      public PlayerQuestKey[] player_quest_keys;

      public QuestkeyIndex()
      {
      }

      public QuestkeyIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerQuestGate> playerQuestGateList = new List<PlayerQuestGate>();
        foreach (object json1 in (List<object>) json[nameof (quest_gates)])
          playerQuestGateList.Add(json1 != null ? new PlayerQuestGate((Dictionary<string, object>) json1) : (PlayerQuestGate) null);
        this.quest_gates = playerQuestGateList.ToArray();
        SMManager.UpdateList<PlayerQuestGate>(this.quest_gates);
        List<PlayerExtraQuestS> playerExtraQuestSList = new List<PlayerExtraQuestS>();
        foreach (object json2 in (List<object>) json[nameof (player_extra_quests)])
          playerExtraQuestSList.Add(json2 != null ? new PlayerExtraQuestS((Dictionary<string, object>) json2) : (PlayerExtraQuestS) null);
        this.player_extra_quests = playerExtraQuestSList.ToArray();
        SMManager.UpdateList<PlayerExtraQuestS>(this.player_extra_quests);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json3 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json3 != null ? new PlayerQuestKey((Dictionary<string, object>) json3) : (PlayerQuestKey) null);
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
      }
    }

    [Serializable]
    public class QuestkeySpend : KeyCompare
    {
      public QuestKeyGate[] quest_key_gates;
      public PlayerQuestKey[] player_quest_keys;

      public QuestkeySpend()
      {
      }

      public QuestkeySpend(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<QuestKeyGate> questKeyGateList = new List<QuestKeyGate>();
        foreach (object json1 in (List<object>) json[nameof (quest_key_gates)])
          questKeyGateList.Add(json1 != null ? new QuestKeyGate((Dictionary<string, object>) json1) : (QuestKeyGate) null);
        this.quest_key_gates = questKeyGateList.ToArray();
        SMManager.UpdateList<QuestKeyGate>(this.quest_key_gates);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json2 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json2 != null ? new PlayerQuestKey((Dictionary<string, object>) json2) : (PlayerQuestKey) null);
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
      }
    }

    [Serializable]
    public class QuestscoreReward : KeyCompare
    {
      public WebAPI.Response.QuestscoreRewardRewards[] rewards;
      public bool already_received;
      public PlayerPresent[] player_presents;
      public QuestScoreCampaignProgress[] score_campaigns;

      public QuestscoreReward()
      {
      }

      public QuestscoreReward(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.QuestscoreRewardRewards> questscoreRewardRewardsList = new List<WebAPI.Response.QuestscoreRewardRewards>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          questscoreRewardRewardsList.Add(json1 != null ? new WebAPI.Response.QuestscoreRewardRewards((Dictionary<string, object>) json1) : (WebAPI.Response.QuestscoreRewardRewards) null);
        this.rewards = questscoreRewardRewardsList.ToArray();
        this.already_received = (bool) json[nameof (already_received)];
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 != null ? new PlayerPresent((Dictionary<string, object>) json2) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<QuestScoreCampaignProgress> campaignProgressList = new List<QuestScoreCampaignProgress>();
        foreach (object json3 in (List<object>) json[nameof (score_campaigns)])
          campaignProgressList.Add(json3 != null ? new QuestScoreCampaignProgress((Dictionary<string, object>) json3) : (QuestScoreCampaignProgress) null);
        this.score_campaigns = campaignProgressList.ToArray();
        SMManager.UpdateList<QuestScoreCampaignProgress>(this.score_campaigns);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class QuestscoreRewardRewards : KeyCompare
    {
      public int reward_quantity;
      public int ranking_group_id;
      public int reward_type_id;
      public int? reward_id;

      public QuestscoreRewardRewards()
      {
      }

      public QuestscoreRewardRewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.ranking_group_id = (int) (long) json[nameof (ranking_group_id)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        int? nullable1;
        if (json[nameof (reward_id)] == null)
        {
          nullable1 = new int?();
        }
        else
        {
          long? nullable2 = (long?) json[nameof (reward_id)];
          nullable1 = !nullable2.HasValue ? new int?() : new int?((int) nullable2.Value);
        }
        this.reward_id = nullable1;
      }
    }

    [Serializable]
    public class ReviewCancel : KeyCompare
    {
      public bool is_success;

      public ReviewCancel()
      {
      }

      public ReviewCancel(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class ReviewContribute : KeyCompare
    {
      public bool is_success;

      public ReviewContribute()
      {
      }

      public ReviewContribute(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class RpcMasterdataList : KeyCompare
    {
      public WebAPI.Response.RpcMasterdataListVersions[] versions;

      public RpcMasterdataList()
      {
      }

      public RpcMasterdataList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.RpcMasterdataListVersions> masterdataListVersionsList = new List<WebAPI.Response.RpcMasterdataListVersions>();
        foreach (object json1 in (List<object>) json[nameof (versions)])
          masterdataListVersionsList.Add(json1 != null ? new WebAPI.Response.RpcMasterdataListVersions((Dictionary<string, object>) json1) : (WebAPI.Response.RpcMasterdataListVersions) null);
        this.versions = masterdataListVersionsList.ToArray();
      }
    }

    [Serializable]
    public class RpcMasterdataListVersions : KeyCompare
    {
      public string dlc_version;
      public DateTime created_at;
      public DateTime updated_at;
      public string platform;
      public string masterdata_version;
      public string client_version;
      public string application_version;
      public bool is_maintenance;

      public RpcMasterdataListVersions()
      {
      }

      public RpcMasterdataListVersions(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.dlc_version = (string) json[nameof (dlc_version)];
        this.created_at = DateTime.Parse((string) json[nameof (created_at)]);
        this.updated_at = DateTime.Parse((string) json[nameof (updated_at)]);
        this.platform = (string) json[nameof (platform)];
        this.masterdata_version = (string) json[nameof (masterdata_version)];
        this.client_version = (string) json[nameof (client_version)];
        this.application_version = (string) json[nameof (application_version)];
        this.is_maintenance = (bool) json[nameof (is_maintenance)];
      }
    }

    [Serializable]
    public class RpcMasterdataQuery : KeyCompare
    {
      public string dlc_version;
      public DateTime created_at;
      public DateTime updated_at;
      public string platform;
      public string masterdata_version;
      public string client_version;
      public string application_version;
      public bool is_maintenance;

      public RpcMasterdataQuery()
      {
      }

      public RpcMasterdataQuery(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.dlc_version = (string) json[nameof (dlc_version)];
        this.created_at = DateTime.Parse((string) json[nameof (created_at)]);
        this.updated_at = DateTime.Parse((string) json[nameof (updated_at)]);
        this.platform = (string) json[nameof (platform)];
        this.masterdata_version = (string) json[nameof (masterdata_version)];
        this.client_version = (string) json[nameof (client_version)];
        this.application_version = (string) json[nameof (application_version)];
        this.is_maintenance = (bool) json[nameof (is_maintenance)];
      }
    }

    [Serializable]
    public class RpcSubmitEnv : KeyCompare
    {
      public bool is_submit_env;

      public RpcSubmitEnv()
      {
      }

      public RpcSubmitEnv(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_submit_env = (bool) json[nameof (is_submit_env)];
      }
    }

    [Serializable]
    public class SeasonticketIndex : KeyCompare
    {
      public PlayerSeasonTicket[] player_season_tickets;

      public SeasonticketIndex()
      {
      }

      public SeasonticketIndex(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        foreach (object json1 in (List<object>) json[nameof (player_season_tickets)])
          playerSeasonTicketList.Add(json1 != null ? new PlayerSeasonTicket((Dictionary<string, object>) json1) : (PlayerSeasonTicket) null);
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
      }
    }

    [Serializable]
    public class SeasonticketSpend : KeyCompare
    {
      public PlayerSeasonTicket[] player_season_tickets;

      public SeasonticketSpend()
      {
      }

      public SeasonticketSpend(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        foreach (object json1 in (List<object>) json[nameof (player_season_tickets)])
          playerSeasonTicketList.Add(json1 != null ? new PlayerSeasonTicket((Dictionary<string, object>) json1) : (PlayerSeasonTicket) null);
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        SMManager.UpdateList<PlayerSeasonTicket>(this.player_season_tickets);
      }
    }

    [Serializable]
    public class SerialList : KeyCompare
    {
      public SerialCampaign[] campaigns;

      public SerialList()
      {
      }

      public SerialList(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<SerialCampaign> serialCampaignList = new List<SerialCampaign>();
        foreach (object json1 in (List<object>) json[nameof (campaigns)])
          serialCampaignList.Add(json1 != null ? new SerialCampaign((Dictionary<string, object>) json1) : (SerialCampaign) null);
        this.campaigns = serialCampaignList.ToArray();
      }
    }

    [Serializable]
    public class SerialRegister : KeyCompare
    {
      public WebAPI.Response.SerialRegisterRewards[] rewards;
      public bool is_success;
      public PlayerPresent[] player_presents;

      public SerialRegister()
      {
      }

      public SerialRegister(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<WebAPI.Response.SerialRegisterRewards> serialRegisterRewardsList = new List<WebAPI.Response.SerialRegisterRewards>();
        foreach (object json1 in (List<object>) json[nameof (rewards)])
          serialRegisterRewardsList.Add(json1 != null ? new WebAPI.Response.SerialRegisterRewards((Dictionary<string, object>) json1) : (WebAPI.Response.SerialRegisterRewards) null);
        this.rewards = serialRegisterRewardsList.ToArray();
        this.is_success = (bool) json[nameof (is_success)];
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json2 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json2 != null ? new PlayerPresent((Dictionary<string, object>) json2) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class SerialRegisterRewards : KeyCompare
    {
      public int reward_quantity;
      public int reward_type_id;
      public int reward_id;

      public SerialRegisterRewards()
      {
      }

      public SerialRegisterRewards(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.reward_quantity = (int) (long) json[nameof (reward_quantity)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_id = (int) (long) json[nameof (reward_id)];
      }
    }

    [Serializable]
    public class ShopBuy : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public WebAPI.Response.ShopBuyAfter after;
      public PlayerSeasonTicket[] player_season_tickets;
      public Player player;
      public PlayerUnitTicketSummary[] unit_tickets;
      public Shop[] shops;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;
      public WebAPI.Response.ShopBuyBefore before;

      public ShopBuy()
      {
      }

      public ShopBuy(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.after = json[nameof (after)] != null ? new WebAPI.Response.ShopBuyAfter((Dictionary<string, object>) json[nameof (after)]) : (WebAPI.Response.ShopBuyAfter) null;
        List<PlayerSeasonTicket> playerSeasonTicketList = new List<PlayerSeasonTicket>();
        foreach (object json4 in (List<object>) json[nameof (player_season_tickets)])
          playerSeasonTicketList.Add(json4 != null ? new PlayerSeasonTicket((Dictionary<string, object>) json4) : (PlayerSeasonTicket) null);
        this.player_season_tickets = playerSeasonTicketList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerUnitTicketSummary> unitTicketSummaryList = new List<PlayerUnitTicketSummary>();
        foreach (object json5 in (List<object>) json[nameof (unit_tickets)])
          unitTicketSummaryList.Add(json5 != null ? new PlayerUnitTicketSummary((Dictionary<string, object>) json5) : (PlayerUnitTicketSummary) null);
        this.unit_tickets = unitTicketSummaryList.ToArray();
        SMManager.UpdateList<PlayerUnitTicketSummary>(this.unit_tickets);
        List<Shop> shopList = new List<Shop>();
        foreach (object json6 in (List<object>) json[nameof (shops)])
          shopList.Add(json6 != null ? new Shop((Dictionary<string, object>) json6) : (Shop) null);
        this.shops = shopList.ToArray();
        SMManager.UpdateList<Shop>(this.shops);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json7 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json7 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json7) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json8 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json8 != null ? new PlayerPresent((Dictionary<string, object>) json8) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json9 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json9 != null ? new PlayerQuestKey((Dictionary<string, object>) json9) : (PlayerQuestKey) null);
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        this.before = json[nameof (before)] != null ? new WebAPI.Response.ShopBuyBefore((Dictionary<string, object>) json[nameof (before)]) : (WebAPI.Response.ShopBuyBefore) null;
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class ShopBuyBefore : KeyCompare
    {
      public int medal;
      public int battle_medal;
      public int coin;
      public PlayerBattleMedal[] battle_medals;
      public int money;

      public ShopBuyBefore()
      {
      }

      public ShopBuyBefore(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.medal = (int) (long) json[nameof (medal)];
        this.battle_medal = (int) (long) json[nameof (battle_medal)];
        this.coin = (int) (long) json[nameof (coin)];
        List<PlayerBattleMedal> playerBattleMedalList = new List<PlayerBattleMedal>();
        foreach (object json1 in (List<object>) json[nameof (battle_medals)])
          playerBattleMedalList.Add(json1 != null ? new PlayerBattleMedal((Dictionary<string, object>) json1) : (PlayerBattleMedal) null);
        this.battle_medals = playerBattleMedalList.ToArray();
        this.money = (int) (long) json[nameof (money)];
      }
    }

    [Serializable]
    public class ShopBuyAfter : KeyCompare
    {
      public int medal;
      public int battle_medal;
      public int coin;
      public PlayerBattleMedal[] battle_medals;
      public int money;

      public ShopBuyAfter()
      {
      }

      public ShopBuyAfter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.medal = (int) (long) json[nameof (medal)];
        this.battle_medal = (int) (long) json[nameof (battle_medal)];
        this.coin = (int) (long) json[nameof (coin)];
        List<PlayerBattleMedal> playerBattleMedalList = new List<PlayerBattleMedal>();
        foreach (object json1 in (List<object>) json[nameof (battle_medals)])
          playerBattleMedalList.Add(json1 != null ? new PlayerBattleMedal((Dictionary<string, object>) json1) : (PlayerBattleMedal) null);
        this.battle_medals = playerBattleMedalList.ToArray();
        this.money = (int) (long) json[nameof (money)];
      }
    }

    [Serializable]
    public class ShopStatus : KeyCompare
    {
      public PlayerBattleMedal[] battle_medals;
      public DateTime? limited_shop_end_at;
      public string limited_shop_banner_url;
      public CoinBonus[] coin_bonuses;
      public PlayerUnitTicketSummary[] unit_tickets;
      public Shop[] shops;

      public ShopStatus()
      {
      }

      public ShopStatus(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerBattleMedal> playerBattleMedalList = new List<PlayerBattleMedal>();
        foreach (object json1 in (List<object>) json[nameof (battle_medals)])
          playerBattleMedalList.Add(json1 != null ? new PlayerBattleMedal((Dictionary<string, object>) json1) : (PlayerBattleMedal) null);
        this.battle_medals = playerBattleMedalList.ToArray();
        SMManager.UpdateList<PlayerBattleMedal>(this.battle_medals);
        this.limited_shop_end_at = json[nameof (limited_shop_end_at)] != null ? new DateTime?(DateTime.Parse((string) json[nameof (limited_shop_end_at)])) : new DateTime?();
        this.limited_shop_banner_url = (string) json[nameof (limited_shop_banner_url)];
        List<CoinBonus> coinBonusList = new List<CoinBonus>();
        foreach (object json2 in (List<object>) json[nameof (coin_bonuses)])
          coinBonusList.Add(json2 != null ? new CoinBonus((Dictionary<string, object>) json2) : (CoinBonus) null);
        this.coin_bonuses = coinBonusList.ToArray();
        SMManager.UpdateList<CoinBonus>(this.coin_bonuses);
        List<PlayerUnitTicketSummary> unitTicketSummaryList = new List<PlayerUnitTicketSummary>();
        foreach (object json3 in (List<object>) json[nameof (unit_tickets)])
          unitTicketSummaryList.Add(json3 != null ? new PlayerUnitTicketSummary((Dictionary<string, object>) json3) : (PlayerUnitTicketSummary) null);
        this.unit_tickets = unitTicketSummaryList.ToArray();
        SMManager.UpdateList<PlayerUnitTicketSummary>(this.unit_tickets);
        List<Shop> shopList = new List<Shop>();
        foreach (object json4 in (List<object>) json[nameof (shops)])
          shopList.Add(json4 != null ? new Shop((Dictionary<string, object>) json4) : (Shop) null);
        this.shops = shopList.ToArray();
        SMManager.UpdateList<Shop>(this.shops);
      }
    }

    [Serializable]
    public class Slot : KeyCompare
    {
      public SlotModule[] slot_modules;

      public Slot()
      {
      }

      public Slot(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<SlotModule> slotModuleList = new List<SlotModule>();
        foreach (object json1 in (List<object>) json[nameof (slot_modules)])
          slotModuleList.Add(json1 != null ? new SlotModule((Dictionary<string, object>) json1) : (SlotModule) null);
        this.slot_modules = slotModuleList.ToArray();
        SMManager.UpdateList<SlotModule>(this.slot_modules);
      }
    }

    [Serializable]
    public class SlotS001MedalPay : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public int[] result_reel_index;
      public Player player;
      public WebAPI.Response.SlotS001MedalPayResult[] result;
      public int[] animation_pattern;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerPresent[] player_presents;
      public PlayerQuestKey[] player_quest_keys;

      public SlotS001MedalPay()
      {
      }

      public SlotS001MedalPay(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.result_reel_index = ((IEnumerable<object>) json[nameof (result_reel_index)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<WebAPI.Response.SlotS001MedalPayResult> s001MedalPayResultList = new List<WebAPI.Response.SlotS001MedalPayResult>();
        foreach (object json4 in (List<object>) json[nameof (result)])
          s001MedalPayResultList.Add(json4 != null ? new WebAPI.Response.SlotS001MedalPayResult((Dictionary<string, object>) json4) : (WebAPI.Response.SlotS001MedalPayResult) null);
        this.result = s001MedalPayResultList.ToArray();
        this.animation_pattern = ((IEnumerable<object>) json[nameof (animation_pattern)]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).ToArray<int>();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json5 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json5) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerPresent> playerPresentList = new List<PlayerPresent>();
        foreach (object json6 in (List<object>) json[nameof (player_presents)])
          playerPresentList.Add(json6 != null ? new PlayerPresent((Dictionary<string, object>) json6) : (PlayerPresent) null);
        this.player_presents = playerPresentList.ToArray();
        SMManager.UpdateList<PlayerPresent>(this.player_presents);
        List<PlayerQuestKey> playerQuestKeyList = new List<PlayerQuestKey>();
        foreach (object json7 in (List<object>) json[nameof (player_quest_keys)])
          playerQuestKeyList.Add(json7 != null ? new PlayerQuestKey((Dictionary<string, object>) json7) : (PlayerQuestKey) null);
        this.player_quest_keys = playerQuestKeyList.ToArray();
        SMManager.UpdateList<PlayerQuestKey>(this.player_quest_keys);
        if (!json.ContainsKey("player_presents:delete"))
          return;
        SMManager.DeleteList<PlayerPresent>(((IEnumerable<object>) json["player_presents:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class SlotS001MedalPayResult : KeyCompare
    {
      public int rarity_id;
      public int reward_result_quantity;
      public bool is_new;
      public int reward_type_id;
      public int reward_result_id;

      public SlotS001MedalPayResult()
      {
      }

      public SlotS001MedalPayResult(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.rarity_id = (int) (long) json[nameof (rarity_id)];
        this.reward_result_quantity = (int) (long) json[nameof (reward_result_quantity)];
        this.is_new = (bool) json[nameof (is_new)];
        this.reward_type_id = (int) (long) json[nameof (reward_type_id)];
        this.reward_result_id = (int) (long) json[nameof (reward_result_id)];
      }
    }

    [Serializable]
    public class TutorialTutorialResume : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public PlayerDeck[] player_decks;
      public Player player;
      public PlayerMaterialUnit[] player_material_units;

      public TutorialTutorialResume()
      {
      }

      public TutorialTutorialResume(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        List<PlayerDeck> playerDeckList = new List<PlayerDeck>();
        foreach (object json4 in (List<object>) json[nameof (player_decks)])
          playerDeckList.Add(json4 != null ? new PlayerDeck((Dictionary<string, object>) json4) : (PlayerDeck) null);
        this.player_decks = playerDeckList.ToArray();
        SMManager.UpdateList<PlayerDeck>(this.player_decks);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json5 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json5) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
      }
    }

    [Serializable]
    public class TutorialTutorialValid : KeyCompare
    {
      public bool is_valid;

      public TutorialTutorialValid()
      {
      }

      public TutorialTutorialValid(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_valid = (bool) json[nameof (is_valid)];
      }
    }

    [Serializable]
    public class UnitCompose : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public int increment_medal;
      public UnlockQuest[] unlock_quests;
      public Player player;
      public bool is_success;
      public PlayerMaterialUnit[] player_material_units;

      public UnitCompose()
      {
      }

      public UnitCompose(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.increment_medal = (int) (long) json[nameof (increment_medal)];
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json4 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json4 != null ? new UnlockQuest((Dictionary<string, object>) json4) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        this.is_success = (bool) json[nameof (is_success)];
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json5 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json5 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json5) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        if (json.ContainsKey("player_material_gears:delete"))
          SMManager.DeleteList<PlayerMaterialGear>(((IEnumerable<object>) json["player_material_gears:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (json.ContainsKey("player_material_units:delete"))
          SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_units:delete"))
          return;
        SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitEquip : KeyCompare
    {
      public Player player;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;

      public UnitEquip()
      {
      }

      public UnitEquip(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json1 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json1 != null ? new PlayerItem((Dictionary<string, object>) json1) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 != null ? new PlayerUnit((Dictionary<string, object>) json2) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class UnitEvolution : KeyCompare
    {
      public PlayerUnit[] player_units;
      public bool is_new;
      public UnlockQuest[] unlock_quests;
      public Player player;
      public PlayerMaterialUnit[] player_material_units;

      public UnitEvolution()
      {
      }

      public UnitEvolution(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 != null ? new PlayerUnit((Dictionary<string, object>) json1) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.is_new = (bool) json[nameof (is_new)];
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json2 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json2 != null ? new UnlockQuest((Dictionary<string, object>) json2) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json3 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json3) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        if (json.ContainsKey("player_material_units:delete"))
          SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_units:delete"))
          return;
        SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitEvolutionParameter : KeyCompare
    {
      public PlayerUnit[] target_player_units;
      public PlayerMaterialUnit[] target_player_material_units;

      public UnitEvolutionParameter()
      {
      }

      public UnitEvolutionParameter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (target_player_units)])
          playerUnitList.Add(json1 != null ? new PlayerUnit((Dictionary<string, object>) json1) : (PlayerUnit) null);
        this.target_player_units = playerUnitList.ToArray();
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json2 in (List<object>) json[nameof (target_player_material_units)])
          playerMaterialUnitList.Add(json2 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json2) : (PlayerMaterialUnit) null);
        this.target_player_material_units = playerMaterialUnitList.ToArray();
      }
    }

    [Serializable]
    public class UnitFavorite : KeyCompare
    {
      public PlayerUnit[] player_units;

      public UnitFavorite()
      {
      }

      public UnitFavorite(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json1 != null ? new PlayerUnit((Dictionary<string, object>) json1) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class UnitSell : KeyCompare
    {
      public PlayerMaterialGear[] player_material_gears;
      public PlayerItem[] player_items;
      public PlayerUnit[] player_units;
      public Player player;
      public PlayerMaterialUnit[] player_material_units;

      public UnitSell()
      {
      }

      public UnitSell(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerMaterialGear> playerMaterialGearList = new List<PlayerMaterialGear>();
        foreach (object json1 in (List<object>) json[nameof (player_material_gears)])
          playerMaterialGearList.Add(json1 != null ? new PlayerMaterialGear((Dictionary<string, object>) json1) : (PlayerMaterialGear) null);
        this.player_material_gears = playerMaterialGearList.ToArray();
        SMManager.UpdateList<PlayerMaterialGear>(this.player_material_gears);
        List<PlayerItem> playerItemList = new List<PlayerItem>();
        foreach (object json2 in (List<object>) json[nameof (player_items)])
          playerItemList.Add(json2 != null ? new PlayerItem((Dictionary<string, object>) json2) : (PlayerItem) null);
        this.player_items = playerItemList.ToArray();
        SMManager.UpdateList<PlayerItem>(this.player_items);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json3 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json3 != null ? new PlayerUnit((Dictionary<string, object>) json3) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json4 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json4 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json4) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        if (json.ContainsKey("player_material_units:delete"))
          SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_units:delete"))
          return;
        SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitTransmigrate : KeyCompare
    {
      public Player player;
      public PlayerMaterialUnit[] player_material_units;
      public PlayerUnit[] player_units;

      public UnitTransmigrate()
      {
      }

      public UnitTransmigrate(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<PlayerMaterialUnit> playerMaterialUnitList = new List<PlayerMaterialUnit>();
        foreach (object json1 in (List<object>) json[nameof (player_material_units)])
          playerMaterialUnitList.Add(json1 != null ? new PlayerMaterialUnit((Dictionary<string, object>) json1) : (PlayerMaterialUnit) null);
        this.player_material_units = playerMaterialUnitList.ToArray();
        SMManager.UpdateList<PlayerMaterialUnit>(this.player_material_units);
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 != null ? new PlayerUnit((Dictionary<string, object>) json2) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
        if (json.ContainsKey("player_material_units:delete"))
          SMManager.DeleteList<PlayerMaterialUnit>(((IEnumerable<object>) json["player_material_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
        if (!json.ContainsKey("player_units:delete"))
          return;
        SMManager.DeleteList<PlayerUnit>(((IEnumerable<object>) json["player_units:delete"]).Select<object, int>((Func<object, int>) (s => (int) (long) s)).Select<int, object>((Func<int, object>) (x => (object) x)).ToArray<object>());
      }
    }

    [Serializable]
    public class UnitTransmigrateParameter : KeyCompare
    {
      public PlayerUnit target_player_unit;

      public UnitTransmigrateParameter()
      {
      }

      public UnitTransmigrateParameter(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.target_player_unit = json[nameof (target_player_unit)] != null ? new PlayerUnit((Dictionary<string, object>) json[nameof (target_player_unit)]) : (PlayerUnit) null;
      }
    }

    [Serializable]
    public class UnitticketSpend : KeyCompare
    {
      public Player player;
      public UnlockQuest[] unlock_quests;
      public bool is_new;
      public PlayerUnit[] player_units;

      public UnitticketSpend()
      {
      }

      public UnitticketSpend(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player = json[nameof (player)] != null ? new Player((Dictionary<string, object>) json[nameof (player)]) : (Player) null;
        SMManager.Change<Player>(this.player);
        List<UnlockQuest> unlockQuestList = new List<UnlockQuest>();
        foreach (object json1 in (List<object>) json[nameof (unlock_quests)])
          unlockQuestList.Add(json1 != null ? new UnlockQuest((Dictionary<string, object>) json1) : (UnlockQuest) null);
        this.unlock_quests = unlockQuestList.ToArray();
        this.is_new = (bool) json[nameof (is_new)];
        List<PlayerUnit> playerUnitList = new List<PlayerUnit>();
        foreach (object json2 in (List<object>) json[nameof (player_units)])
          playerUnitList.Add(json2 != null ? new PlayerUnit((Dictionary<string, object>) json2) : (PlayerUnit) null);
        this.player_units = playerUnitList.ToArray();
        SMManager.UpdateList<PlayerUnit>(this.player_units);
      }
    }

    [Serializable]
    public class ZeroLoad : KeyCompare
    {
      public string player_data;
      public bool has_data;

      public ZeroLoad()
      {
      }

      public ZeroLoad(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.player_data = (string) json[nameof (player_data)];
        this.has_data = (bool) json[nameof (has_data)];
      }
    }

    [Serializable]
    public class ZeroReset : KeyCompare
    {
      public bool is_success;

      public ZeroReset()
      {
      }

      public ZeroReset(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class ZeroSave : KeyCompare
    {
      public bool is_success;

      public ZeroSave()
      {
      }

      public ZeroSave(Dictionary<string, object> json)
      {
        this._hasKey = false;
        this.is_success = (bool) json[nameof (is_success)];
      }
    }

    [Serializable]
    public class ZukanDefeatRewardEnemy : KeyCompare
    {
      public PlayerEnemyHistory[] histories;
      public PlayerDefeatReward[] defeat_rewards;

      public ZukanDefeatRewardEnemy()
      {
      }

      public ZukanDefeatRewardEnemy(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerEnemyHistory> playerEnemyHistoryList = new List<PlayerEnemyHistory>();
        foreach (object json1 in (List<object>) json[nameof (histories)])
          playerEnemyHistoryList.Add(json1 != null ? new PlayerEnemyHistory((Dictionary<string, object>) json1) : (PlayerEnemyHistory) null);
        this.histories = playerEnemyHistoryList.ToArray();
        SMManager.UpdateList<PlayerEnemyHistory>(this.histories);
        List<PlayerDefeatReward> playerDefeatRewardList = new List<PlayerDefeatReward>();
        foreach (object json2 in (List<object>) json[nameof (defeat_rewards)])
          playerDefeatRewardList.Add(json2 != null ? new PlayerDefeatReward((Dictionary<string, object>) json2) : (PlayerDefeatReward) null);
        this.defeat_rewards = playerDefeatRewardList.ToArray();
        SMManager.UpdateList<PlayerDefeatReward>(this.defeat_rewards);
      }
    }

    [Serializable]
    public class ZukanDefeatRewardReceive : KeyCompare
    {
      public PlayerDefeatReward[] defeat_rewards;

      public ZukanDefeatRewardReceive()
      {
      }

      public ZukanDefeatRewardReceive(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerDefeatReward> playerDefeatRewardList = new List<PlayerDefeatReward>();
        foreach (object json1 in (List<object>) json[nameof (defeat_rewards)])
          playerDefeatRewardList.Add(json1 != null ? new PlayerDefeatReward((Dictionary<string, object>) json1) : (PlayerDefeatReward) null);
        this.defeat_rewards = playerDefeatRewardList.ToArray();
        SMManager.UpdateList<PlayerDefeatReward>(this.defeat_rewards);
      }
    }

    [Serializable]
    public class ZukanEnemy : KeyCompare
    {
      public PlayerEnemyHistory[] histories;

      public ZukanEnemy()
      {
      }

      public ZukanEnemy(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerEnemyHistory> playerEnemyHistoryList = new List<PlayerEnemyHistory>();
        foreach (object json1 in (List<object>) json[nameof (histories)])
          playerEnemyHistoryList.Add(json1 != null ? new PlayerEnemyHistory((Dictionary<string, object>) json1) : (PlayerEnemyHistory) null);
        this.histories = playerEnemyHistoryList.ToArray();
        SMManager.UpdateList<PlayerEnemyHistory>(this.histories);
      }
    }

    [Serializable]
    public class ZukanGear : KeyCompare
    {
      public PlayerGearHistory[] histories;

      public ZukanGear()
      {
      }

      public ZukanGear(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerGearHistory> playerGearHistoryList = new List<PlayerGearHistory>();
        foreach (object json1 in (List<object>) json[nameof (histories)])
          playerGearHistoryList.Add(json1 != null ? new PlayerGearHistory((Dictionary<string, object>) json1) : (PlayerGearHistory) null);
        this.histories = playerGearHistoryList.ToArray();
        SMManager.UpdateList<PlayerGearHistory>(this.histories);
      }
    }

    [Serializable]
    public class ZukanUnit : KeyCompare
    {
      public PlayerUnitHistory[] histories;

      public ZukanUnit()
      {
      }

      public ZukanUnit(Dictionary<string, object> json)
      {
        this._hasKey = false;
        List<PlayerUnitHistory> playerUnitHistoryList = new List<PlayerUnitHistory>();
        foreach (object json1 in (List<object>) json[nameof (histories)])
          playerUnitHistoryList.Add(json1 != null ? new PlayerUnitHistory((Dictionary<string, object>) json1) : (PlayerUnitHistory) null);
        this.histories = playerUnitHistoryList.ToArray();
        SMManager.UpdateList<PlayerUnitHistory>(this.histories);
      }
    }

    public class UserError
    {
      public readonly string Code = string.Empty;
      public readonly string Reason = string.Empty;

      public UserError(Dictionary<string, object> json)
      {
        object obj;
        if (json.TryGetValue("code", out obj))
        {
          if (!(obj is string str))
            str = string.Empty;
          this.Code = str;
        }
        if (!json.TryGetValue("reason", out obj))
          return;
        if (!(obj is string str1))
          str1 = string.Empty;
        this.Reason = str1;
      }
    }
  }

  public static class Request
  {
    public class BattleFinish
    {
      public CommonQuestType quest_type;
      public bool win;
      public bool is_game_over;
      public string battle_uuid;
      public int player_money;
      public int battle_turn;
      public int continue_count;
      public int week_element_attack_count;
      public int week_kind_attack_count;
      public List<int> panel_entity_ids = new List<int>();
      public List<int> drop_entity_ids = new List<int>();
      public List<GameCore.Reward> panel_reward = new List<GameCore.Reward>();
      public List<GameCore.Reward> drop_reward = new List<GameCore.Reward>();
      public List<int> duels_critical_count = new List<int>();
      public List<int> duels_damage = new List<int>();
      public List<int> duels_hit_damage = new List<int>();
      public List<int> duels_max_damage = new List<int>();
      public List<WebAPI.Request.BattleFinish.UnitResult> units = new List<WebAPI.Request.BattleFinish.UnitResult>();
      public List<WebAPI.Request.BattleFinish.EnemyResult> enemies = new List<WebAPI.Request.BattleFinish.EnemyResult>();
      public List<WebAPI.Request.BattleFinish.GearResult> gears = new List<WebAPI.Request.BattleFinish.GearResult>();
      public List<WebAPI.Request.BattleFinish.SupplyResult> supplies = new List<WebAPI.Request.BattleFinish.SupplyResult>();
      public List<WebAPI.Request.BattleFinish.IntimateResult> intimates = new List<WebAPI.Request.BattleFinish.IntimateResult>();

      public class UnitResult
      {
        public int player_unit_id;
        public int total_damage;
        public int total_damage_count;
        public int total_kill_count;
        public int remaining_hp;
        public int rental;
        public int received_damage;
        public int guest;
      }

      public class EnemyResult
      {
        public int enemy_id;
        public int kill_count;
        public int dead_count;
        public int level_difference;
        public int overkill_damage;
        public int kill_by_playerunit_id;
      }

      public class GearResult
      {
        public int player_gear_id;
        public int damage_count;
        public int kill_count;
      }

      public class SupplyResult
      {
        public int supply_id;
        public int use_quantity;
      }

      public class IntimateResult
      {
        public int character_id;
        public int target_character_id;
        public int exp;
      }
    }
  }
}
